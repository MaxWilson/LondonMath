{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./.fable/fable-library.2.3.25/Util.js","webpack:///./.fable/fable-library.2.3.25/Types.js","webpack:///./.fable/fable-library.2.3.25/Reflection.js","webpack:///./.fable/fable-library.2.3.25/lib/big.js","webpack:///./.fable/fable-library.2.3.25/Decimal.js","webpack:///./.fable/fable-library.2.3.25/Int32.js","webpack:///./.fable/fable-library.2.3.25/lib/long.js","webpack:///./.fable/fable-library.2.3.25/Long.js","webpack:///./.fable/fable-library.2.3.25/Option.js","webpack:///./.fable/fable-library.2.3.25/Seq.js","webpack:///./.fable/fable-library.2.3.25/Date.js","webpack:///./.fable/fable-library.2.3.25/RegExp.js","webpack:///./.fable/fable-library.2.3.25/String.js","webpack:///./.fable/fable-library.2.3.25/MutableMap.js","webpack:///./.fable/fable-library.2.3.25/Map.js","webpack:///./.fable/fable-library.2.3.25/MutableSet.js","webpack:///./.fable/fable-library.2.3.25/Set.js","webpack:///./.fable/fable-library.2.3.25/Array.js","webpack:///./.fable/fable-library.2.3.25/List.js","webpack:///.fable/Thoth.Json.3.3.0/Types.fs","webpack:///./.fable/fable-library.2.3.25/BigInt/n.js","webpack:///./.fable/fable-library.2.3.25/BigInt/z.js","webpack:///./.fable/fable-library.2.3.25/BigInt.js","webpack:///./.fable/fable-library.2.3.25/DateOffset.js","webpack:///./.fable/fable-library.2.3.25/TimeSpan.js","webpack:///.fable/Thoth.Json.3.3.0/Decode.fs","webpack:///src/Model.fs","webpack:///./.fable/fable-library.2.3.25/AsyncBuilder.js","webpack:///./.fable/fable-library.2.3.25/Async.js","webpack:///.fable/Fable.Elmish.3.0.6/ring.fs","webpack:///.fable/Fable.Elmish.3.0.6/cmd.fs","webpack:///src/View.fs","webpack:///.fable/Thoth.Json.3.3.0/Encode.fs","webpack:///src/Update.fs","webpack:///.fable/Fable.Elmish.React.3.0.1/react.fs","webpack:///src/App.fs","webpack:///.fable/Fable.Elmish.React.3.0.1/common.fs"],"names":["webpackJsonpCallback","data","moduleId","chunkId","chunkIds","moreModules","executeModules","i","resolves","length","Object","prototype","hasOwnProperty","call","installedChunks","push","modules","parentJsonpFunction","shift","deferredModules","apply","checkDeferredModules","result","deferredModule","fulfilled","j","depId","splice","__webpack_require__","s","installedModules","0","exports","module","l","m","c","d","name","getter","o","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","p","jsonpArray","window","oldJsonpFunction","slice","isDisposable","x","Dispose","tryGetValue","map","defaultValue","has","Lazy","factory","this","isValueCreated","createdValue","padWithZeros","str","toString","dateOffset","date","date1","offset","kind","getTimezoneOffset","int32ToString","radix","ObjectRef","idMap","set","count","stringHash","h","len","charCodeAt","numberHash","combineHashCodes","hashes","reduce","h1","h2","structuralHash","GetHashCode","isArray","ar","Array","String","ArrayBuffer","isView","equalArraysWith","y","eq","equalArrays","equals","Equals","Date","compareDates","xtime","ytime","getTime","comparePrimitives","compareArraysWith","comp","compareArrays","compare","CompareTo","min","comparer","max","WeakMap","CaseRules","None","LowerFirst","changeCase","caseRule","charAt","toLowerCase","createObj","fields","fail","kvPair","Error","definedCaseRule","toJSON","CURRIED_KEY","uncurry","arity","f","uncurriedFn","a1","a2","a3","a4","a5","a6","a7","a8","curry","partialApply","args","concat","mapCurriedArgs","fn","mappings","arg","mapArg","idx","mapping","expectedArity","actualArity","res","getItemFromDict","sameType","getPrototypeOf","constructor","declare","cons","superClass","subClass","writable","configurable","inherits","SystemObject","compareList","self","other","tail","head","List","Union","tag","recordToJson","record","getFieldNames","keys","recordEquals","thisNames","recordCompare","Record","anonRecord","assign","k","join","id","identityHash","from","iterator","cur","next","tmp","done","FSharpRef","contents","Exception","msg","stack","message","getFSharpExceptionFieldNames","filter","FSharpException","fieldNames","arg1","arg2","arg3","CaseInfo","declaringType","TypeInfo","fullname","generics","cases","fullName","getGenerics","t1","t2","getRecordElements","k1","v1","k2","v2","union","obj","bool","int32","info","lastIndexOf","substr","gen","endsWith","getElementType","isGenericType","getGenericTypeDefinition","getUnionCases","getTupleElements","isTuple","isUnion","isRecord","startsWith","getUnionCaseFields","uci","makeUnion","values","expectedLength","P","e","cmp","DP","RM","MAX_DP","NE","PE","NAME","INVALID","INVALID_DP","INVALID_RM","UNDEFINED","NUMERIC","parse","nl","test","indexOf","replace","search","substring","round","Big","dp","rm","more","xc","unshift","pop","stringify","z","abs","isneg","yc","Math","div","a","b","bl","bt","ri","bz","ai","al","rl","q","qc","qi","gt","gte","lt","lte","minus","sub","xlty","plus","xe","ye","reverse","mod","ygtx","times","add","pow","one","sqrt","half","toExponential","mul","toFixed","toPrecision","sd","valueOf","_Big_","findIndex","normalize","version","Decimal","NumberStyles","getRange","unsigned","bitsize","isValid","style","exec","prefix","digits","getInvalidDigits","AllowHexSpecifier","getRadix","regexMatch","sign","validResponse","tryParse","v","Number","parseInt","isNaN","umin","umax","_a","op_UnaryNegation_Int32","Long","wasm","WebAssembly","Instance","Module","Uint8Array","low","high","isLong","__isLong__","INT_CACHE","UINT_CACHE","fromInt","cachedObj","cache","fromBits","fromNumber","UZERO","ZERO","TWO_PWR_64_DBL","MAX_UNSIGNED_VALUE","TWO_PWR_63_DBL","MIN_VALUE","MAX_VALUE","negate","TWO_PWR_32_DBL","lowBits","highBits","pow_dbl","fromString","RangeError","radixToPower","size","multiply","fromValue","val","TWO_PWR_16_DBL","TWO_PWR_24","ONE","UONE","NEG_ONE","toInt","$this","toNumber","isZero","isNegative","radixLong","divide","rem1","subtract","rem","remDiv","isOdd","lessThan","greaterThan","greaterThanOrEqual","thisNeg","otherNeg","not","addend","a48","a32","a16","a00","b48","b32","b16","c48","c32","c16","c00","subtrahend","multiplier","get_high","b00","divisor","approx","div_u","div_s","toUnsigned","shiftRightUnsigned","shiftLeft","shiftRight","floor","log2","ceil","log","LN2","delta","approxRes","approxRem","numBits","op_Addition","op_Multiply","op_Division","op_Modulus","rem_u","rem_s","op_UnaryNegation","op_BitwiseAnd","fromBytes","bytes","le","fromBytesLE","fromBytesBE","toBytes","hi","lo","toBytesLE","toBytesBE","fromInteger","xh","Some","some","undefined","acceptNull","defaultArg","field","Result","mapOk","Enumerator","iter","current","getEnumerator","toIterator","en","MoveNext","Current","__failIfNone","append","xs","ys","delay","firstDone","iters","unfold","output","innerIter","hasFinished","collect","empty","exists","fold","acc","iterate","_","iterateIndexed","mapIndexed","rangeNumber","first","step","last","singleton","skip","sumBy","adder","Add","GetZero","take","truncate","tryFind","find","fst","offsetRegex","dateOffsetToString","isMinus","minutes","dateToHalfUTCString","toISOString","dateToStringWithCustomFormat","format","utc","match","rep","NaN","getUTCFullYear","getFullYear","getUTCMonth","getMonth","getUTCDate","getDate","getUTCHours","getHours","getUTCMinutes","getMinutes","getUTCSeconds","getSeconds","getUTCMilliseconds","getMilliseconds","dateToStringWithOffset","dateWithOffset","dateToStringWithKind","toUTCString","toLocaleString","toLocaleDateString","toLocaleTimeString","printOffset","dateToISOString","DateTime","minValue","parseRaw","baseDate","timeInSeconds","timeParts","split","parseFloat","toUpperCase","offsetParts","offsetInMinutes","detectUTC","escape","fsFormatRegExp","guidRegex","toHex","longToString","longFromBytes","longToBytes","printf","input","cont","createPrinter","strCopy","formatOnce","toText","str2","flags","pad","precision","plusPrefix","ch","padLeft","delimiter","validateGuid","doNotThrow","trimmedAndLowered","chars","trim","pattern","RegExp","isRight","replicate","initialize","MutableMap$00602","pairs","this$","Map","pair","MutableMap$00602$$Add$$5BDDA1","MutableMap$00602$$TryFindIndex$$2B595","this$$$1","matchValue","pair$$1","MutableMap$00602$$TryFind$$2B595","this$$$2","k$$1","matchValue$$1","MutableMap$00602$$Clear","this$$$4","clear","MutableMap$00602$$get_Count","this$$$5","pairs$$2","$x$$2","$y$$3","this$$$8","k$$4","v$$1","matchValue$$4","clo1","MutableMap$00602$$Remove$$2B595","this$$$10","k$$6","matchValue$$6","this$$$11","pairs$$3","pair$$3","item","Clear","Contains","item$$1","matchValue$$7","CopyTo","array","arrayIndex","i$$10","Remove","item$$2","matchValue$$8","delete","k$$7","entries","k$$8","this$$$6","k$$2","matchValue$$2","MutableMap$00602$$get_Item$$2B595","k$$9","this$$$9","k$$5","matchValue$$5","MutableMap$00602$$ContainsKey$$2B595","pair$$5","k$$10","v$$2","this$$$7","k$$3","matchValue$$3","MutableMap$00602$$set_Item$$5BDDA1","pair$$6","MapTree$00602","MapTreeModule$$$size","MapTreeModule$$$sizeAux","$acc$$5","$m$$6","MapTreeModule$$$empty","MapTreeModule$$$height","_arg1","MapTreeModule$$$mk","l$$1","r$$1","hl","hr","MapTreeModule$$$rebalance","t1h","t2h","MapTreeModule$$$add","m$$3","Compare","c$$1","MapTreeModule$$$find","$comparer$$1$$23","$k$$3$$24","$m$$4$$25","comparer$$1","m$$4","c$$3","MapTreeModule$$$tryFind","$comparer$$2$$26","$k$$4$$27","$m$$5$$28","comparer$$2","m$$5","c$$5","MapTreeModule$$$mem","$comparer$$10$$59","$k$$12$$60","$m$$8$$61","comparer$$10","k$$12","m$$8","c$$8","MapTreeModule$$$ofSeq","comparer$$16","c$$9","ie","$comparer$$14$$97","$acc$$10$$98","$e$$99","comparer$$14","acc$$10","patternInput$$2","MapTreeModule$$$mkFromEnumerator","MapTreeModule$002EMapIterator$00602","started","MapTreeModule$$$collapseLHS","$stack$$111","MapTreeModule$$$mkIterator","s$$5","MapTreeModule$$$current","i$$2","MapTreeModule$$$alreadyFinished","MapTreeModule$$$notStarted","MapTreeModule$002EmkIEnumerator$0027$00602","s$$6","MapTreeModule$$$mkIEnumerator","s$$7","MapTreeModule$002EmkIEnumerator$0027$00602$$$$002Ector$$Z26BC498C","MapTreeModule$$$toSeq","s$$8","en$$1","i$$3","MapTreeModule$$$moveNext","Reset","FSharpMap","comparer$$17","tree","FSharpMap$$$$002Ector$$58ADD115","FSharpMap$$get_Tree","__$$5","FSharpMap$$get_Item$$2B595","__$$8","k$$29","FSharpMap$$Map$$Z6F6B671C","__$$18","f$$25","MapTreeModule$$$mapi","f$$11","m$$14","l2$$1","v2$$17","r2$$1","FSharpMap$$get_Count","__$$20","FSharpMap$$ContainsKey$$2B595","__$$21","k$$31","k$$37","v$$27","m$$24","k$$28","v$$24","__$$6","k$$39","m$$26","k$$33","__$$23","f$$35","m$$37","comparer$$21","map$$2","kv","clo2","combineHash","x$$16","y$$3","res$$3","e$$1","activePatternResult3676","that","res$$4","finished","e1","e2","kvp1","kvp2","c$$10","_arg1$$1","k$$34","k$$35","kv$$1","k$$36","v$$26","kv$$2","MutableSet$00601","items","MutableSet$00601$$Add$$2B595","MutableSet$00601$$TryFindIndex$$2B595","MutableSet$00601$$Clear","MutableSet$00601$$get_Count","MutableSet$00601$$Contains$$2B595","MutableSet$00601$$Remove$$2B595","values$$1","value$$2","i$$8","item$$3","add_","x$$1","SetTree$00601","SetTreeModule$$$SetOne","SetTreeModule$$$SetNode","SetTreeModule$$$height","SetTreeModule$$$tolerance","SetTreeModule$$$mk","l$$2","r$$2","SetTreeModule$$$rebalance","SetTreeModule$$$add","t$$1","SetTreeModule$002ESetIterator$00601","SetTreeModule$$$collapseLHS","$stack$$104","SetTreeModule$$$mkIterator","s$$13","SetTreeModule$$$current","SetTreeModule$$$alreadyFinished","SetTreeModule$$$notStarted","SetTreeModule$002EmkIEnumerator$00601","s$$14","SetTreeModule$$$mkIEnumerator","s$$15","SetTreeModule$002EmkIEnumerator$00601$$$$002Ector$$Z5B395D56","SetTreeModule$$$compare","comparer$$18","s1","s2","$comparer$$17$$112","$l1$$113","$l2$$114","SetTreeModule$$$compareStacks","$target$$115","t1$$6","t2$$6","n1k","n2k","t1$$7","t2$$7","n1k$$1","n2k$$1","n2r","t1$$8","t2$$8","emp","n1k$$2","n1r","n2k$$2","t1$$9","t2$$9","n1k$$3","n1r$$1","n2k$$3","n2r$$1","t1$$10","t2$$10","n1k$$4","t1$$11","n1k$$5","n1l","n1r$$2","t1$$12","n2k$$4","t2$$11","n2k$$5","n2l","n2r$$2","t2$$12","l1","l2","c$$7","SetTreeModule$$$ofSeq","comparer$$20","c$$11","$comparer$$19$$126","$acc$$11$$127","$e$$128","comparer$$19","acc$$11","SetTreeModule$$$mkFromEnumerator","i$$1","SetTreeModule$$$moveNext","FSharpSet","comparer$$22","FSharpSet$$$$002Ector$$2528C5CB","FSharpSet$$get_Comparer","__$$4","FSharpSet$$get_Tree","ofSeq","elements","comparer$$30","fill","target","targetIndex","f$$1","source$$1","cons$$2","len$$1","target$$2","i$$4","count$$8","initializer","cons$$15","result$$7","i$$13","folder$$4","state$$6","array$$76","delegateArg0$$2","delegateArg1$$2","foldBack2","f$$9","array1$$11","array2$$11","state$$17","folder$$12","array1$$10","array2$$10","state$$16","acc$$8","size$$1","i$$44","foldBackIndexed2","x$$21","y$$8","acc$$9","ofList","source$$8","cons$$32","tryLast","$_arg1$$4$$6","_arg1$$4","foldIndexed","state","xs$$7","$f$$12","$i$$13","$acc$$14","$_arg1$$5$$15","_arg1$$5","foldIndexedAux","$f$$2$$19","$state$$1$$20","$xs$$8$$21","f$$2","state$$1","xs$$8","xs$$9","acc$$1","x$$6","xs$$12","fold$$1","acc$$3","x$$9","xs$$27","_arg1$$7","xs$$28","ys$$10","x$$15","f$$16","xs$$31","f$$17","xs$$33","acc$$12","x$$17","f$$24","xs$$46","unitVar0","x$$24","ofArray","xs$$50","res$$1","i$$9","col","tryPickIndexed","f$$29","xs$$52","$f$$28$$120","$i$$10$$121","$_arg1$$9$$122","tryPickIndexedAux","f$$28","_arg1$$9","tryFindIndexed","f$$32","xs$$55","i$$11","x$$31","findIndexed","f$$34","xs$$57","value$$1","xs$$69","_arg1$$13","f$$42","xs$$71","acc$$17","x$$37","map$$1","that$$1","( .ctor )","BigNat","bound","BigNatModule$002EFFT$$$pow32","$x$$1","$n$$2","BigNatModule$002EFFT$$$maxTwoPower","Int32Array","BigNatModule$$$bound","n$$10","BigNatModule$$$coeff","n$$12","i$$5","BigNatModule$$$coeff64","n$$13","i$$6","BigNatModule$$$setCoeff","n$$14","i$$7","v$$4","BigNatModule$$$pow64","$x$$23$$48","$n$$15$$49","x$$23","n$$15","BigNatModule$$$pow32","$x$$24$$50","$n$$16$$51","n$$16","BigNatModule$$$baseBits","BigNatModule$$$baseN","BigNatModule$$$baseNi64","BigNatModule$$$baseMaski64","BigNatModule$$$createN","b$$4","BigNatModule$$$normN","n$$18","bound$$1","$na$$62","$i$$9$$63","na","findLeastBound","BigNatModule$$$boundInt","BigNatModule$$$boundInt64","BigNatModule$$$embed","x$$28","x$$29","r$$3","BigNatModule$$$one","BigNatModule$$$zero","BigNatModule$$$degree","n$$24","BigNatModule$$$isZero","p$$4","BigNatModule$$$equal","p$$7","q$$4","$pa$$96","$qa$$97","$i$$22$$98","pa","qa","i$$22","check","BigNatModule$$$compare","p$$9","q$$6","$pa$$2$$108","$qa$$2$$109","$i$$24$$110","pa$$2","qa$$2","i$$24","check$$2","BigNatModule$$$lt","p$$10","q$$7","BigNatModule$$$mulSchoolBookCarry","$r$$12$$130","$c$$8$$131","$k$$4$$132","r$$12","rak$$1","BigNatModule$$$mulSchoolBookOneSmall","p$$16","q$$12","value$$3","bp","r$$13","q$$13","i$$28","rak$$2","BigNatModule$$$mulSchoolBook","p$$18","q$$15","p$$15","q$$11","r$$11","rak","pSmall","qSmall","p$$17","q$$14","value$$4","r$$14","i$$29","pai$$1","j$$1","qaj","rak$$3","BigNatModule$$$mulSchoolBookNeitherSmall","BigNatModule$002Eencoding","arg4","arg5","arg6","arg7","bigL","twoToBigL","bigK","bigN","splits","BigNatModule$$$mkEncoding","bigK$$2","i$$30","BigNatModule$$$table","i$$32","i$$33","i$$34","BigNatModule$$$mul","p$$20","q$$17","BigNatModule$$$scaleSubInPlace","x$$57","a$$5","n$$30","patternInput$$3","j$$4","z$$7","zLo","value$$5","zHi","BigNatModule$$$scaleAddInPlace","x$$62","f$$3","a$$8","n$$32","patternInput$$4","patternInput$$5","f$$4","j$$5","z$$8","zLo$$1","value$$7","zHi$$1","BigNatModule$$$removeFactor","x$$67","a$$11","n$$34","f$$6","p$$8","pn","q$$5","qn","patternInput$$6","f64","f64$$1","$pa$$1$$103","$qa$$1$$104","$i$$23$$105","pa$$1","qa$$1","i$$23","pai","qai","check$$1","BigNatModule$$$divmod","b$$7","a$$12","x$$68","x$$27","array$$31","d$$6","p$$21","m$$2","n$$35","f$$7","BigNatModule$$$ofInt32","n$$41","BigNatModule$$$ofInt64","n$$42","x$$30","r$$4","BigNatModule$$$embed64","BigNatModule$$$toString","n$$45","degn","kten2ks","$prior$$227","$k$$11$$228","$ten2k$$229","prior","k$$11","ten2k","route","digits$$4","isLeading","n$$46","_arg1$$3","patternInput$$13","digits$$2","n$$47","n$$19","i$$12","BigNatModule$$$eval32","BigNatModule$$$isSmall","n$$48","BigNatModule$$$getSmall","n$$49","BigInteger","signInt","BigInteger$$$$002Ector$$Z2BE94A1","BigInteger$$$nat$$Z67CCE57D","n$$1","BigNatModule$0024$0024$0024isSmall","BigNatModule$0024$0024$0024getSmall","smallLim","smallPosTab","BigInteger$$get_SignInt","BigInteger$$get_V","x$$2","BigInteger$$$op_Equality$$56F059C0","x$$3","BigNatModule$0024$0024$0024equal","BigNatModule$0024$0024$0024isZero","BigInteger$$$op_LessThan$$56F059C0","x$$5","y$$2","BigNatModule$0024$0024$0024lt","BigInteger$$$$002Ector$$Z524259A4","n$$6","BigNatModule$0024$0024$0024ofInt32","BigNatModule$0024$0024$0024ofInt64","BigInteger$$$get_One","BigInteger$$$get_Two","two","BigInteger$$$get_Zero","zero","BigNatModule$0024$0024$0024toString","n$$17","res$$2","BigNatModule$0024$0024$0024hash","obj$$1","n$$5","nn","BigInteger$0024$0024$0024get_Zero","BigInteger$0024$0024$0024get_One","BigInteger$0024$0024$0024get_Two","DateTimeOffset","signedRound","ticks","ms","arguments","ts","days","hours","seconds","milliseconds","lengthLeft","lengthRight","padLeftAndRightWithZeros","firstDot","firstColon","genericMsg","newLine","errorToString","path","error","reason","decoder","datetime","_err","arg0","datetimeOffset","offsetMatch","timespan","decodeMaybeNull","badPathError","currentPath","option","index","requestedIndex","vArray","tokens","arr","succeed","_arg2","andThen","cb","ctor","d1","unwrapWith","errors","fieldName","fieldValue","isUndefined","firstPath","firstValue","tupledArg","curValue","optional","toMap","mixedArray","decoders","arg10","arg30","clo3","extra","isCamelCase","predicate$$13","fi","autoDecoder","autoDecodeRecordsAndUnions","isOptional","decoderRef","decoderInfos","folder$$8","state$$12","reduceRight","delegateArg0$$4","delegateArg1$$4","autoObject","makeAnonRecord","list","keyDecoder","valueDecoder","autoObject2","decoder1","decoder2","( arg10@ )","( arg20@ )","runner","string","int","uint32","float","guid","makeExtra","__","resolver","numberKey","DecimalKeys","HexKeys","BinaryKeys","FormatByBase","mathBase","binPrint","hexDigit","hexPrint","ComputeHints","settings","ComputeProblem","opType","makeProb","lhs","rhs","symbol","mathTypeMappings","patternInput","prob","percentage","coordsFor","mathType","json","generateDecoder","nextProblem","g","review","problem","flattenedCells","allCorrect","pred","newHints","row","cell","nextNumber","cells","onCorrect","onIncorrect","arg00","updateCells","newValue","reviewList'","score","CancellationToken","cancelled","_id","_cancelled","_listeners","listener","$","addListener","removeListener","OperationCanceledError","setPrototypeOf","protectedCont","ctx","cancelToken","isCancelled","onCancel","trampoline","incrementAndCheck","hijack","err","onError","protectedBind","computation","binder","onSuccess","ex","protectedReturn","computation1","computation2","Bind","generator","sequence","body","While","Delay","compensation","catchHandler","ex2","resource","TryFinally","guard","Return","text","dispatch","cmd","cmds","lists","state$$3","xs$$14","acc$$4","x$$10","lst","random","onClick","btn","label","attrs","children","viewOptions","maxSlider","setting","currentValue","options","props","delay1","btnStyle","css","preventDefault","hintTable","arg20","maybeDispatch","keyButton","seq","space","encoder","defThunk","nil","autoEncodeRecordsAndUnions","encoderRef","setters","targetKey","encode","autoEncoder","source","case_","fieldTypes","encoders","Value","valueEncoder","keyType","activePatternResult2639","keyEncoder","activePatternResult2643","sound","ended","play","chooseRandom","cheers","model","inputRecord","currentAnswer","cheer","bomb","showHints","settings'","showOptions","rix'","ix","source$$7","wix'","wix","setState","program","rb","reentered","syncDispatch","nextMsg","subscribe","view","equal","lazyView2With","placeholderId","lastRequest","document","getElementById","nextProps","_nextState","keyCode","ctrlKey","runWith","withReactBatchedUsing"],"mappings":"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","file":"app.63b70b36987f27c56b63.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t0: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([113,1]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","// tslint:disable:ban-types\n// Object.assign flattens getters and setters\n// See https://stackoverflow.com/questions/37054596/js-es5-how-to-assign-objects-with-setters-and-getters\nexport function extend(target, ...sources) {\n    for (const source of sources) {\n        for (const key of Object.keys(source)) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        }\n    }\n    return target;\n}\nexport function isDisposable(x) {\n    return x != null && typeof x.Dispose === \"function\";\n}\nexport class Comparer {\n    constructor(f) {\n        this.Compare = f || compare;\n    }\n}\nexport function comparerFromEqualityComparer(comparer) {\n    // Sometimes IEqualityComparer also implements IComparer\n    if (typeof comparer.Compare === \"function\") {\n        return new Comparer(comparer.Compare);\n    }\n    else {\n        return new Comparer((x, y) => {\n            const xhash = comparer.GetHashCode(x);\n            const yhash = comparer.GetHashCode(y);\n            if (xhash === yhash) {\n                return comparer.Equals(x, y) ? 0 : -1;\n            }\n            else {\n                return xhash < yhash ? -1 : 1;\n            }\n        });\n    }\n}\n// TODO: Move these three methods to Map and Set modules\nexport function containsValue(v, map) {\n    for (const kv of map) {\n        if (equals(v, kv[1])) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function tryGetValue(map, key, defaultValue) {\n    return map.has(key) ? [true, map.get(key)] : [false, defaultValue];\n}\nexport function addToSet(v, set) {\n    if (set.has(v)) {\n        return false;\n    }\n    set.add(v);\n    return true;\n}\nexport function assertEqual(actual, expected, msg) {\n    if (!equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport function assertNotEqual(actual, expected, msg) {\n    if (equals(actual, expected)) {\n        throw Object.assign(new Error(msg || `Expected: ${expected} - Actual: ${actual}`), {\n            actual,\n            expected,\n        });\n    }\n}\nexport class Lazy {\n    constructor(factory) {\n        this.factory = factory;\n        this.isValueCreated = false;\n    }\n    get Value() {\n        if (!this.isValueCreated) {\n            this.createdValue = this.factory();\n            this.isValueCreated = true;\n        }\n        return this.createdValue;\n    }\n    get IsValueCreated() {\n        return this.isValueCreated;\n    }\n}\nexport function lazyFromValue(v) {\n    return new Lazy(() => v);\n}\nexport function padWithZeros(i, length) {\n    let str = i.toString(10);\n    while (str.length < length) {\n        str = \"0\" + str;\n    }\n    return str;\n}\nexport function padLeftAndRightWithZeros(i, lengthLeft, lengthRight) {\n    let str = i.toString(10);\n    while (str.length < lengthLeft) {\n        str = \"0\" + str;\n    }\n    while (str.length < lengthRight) {\n        str = str + \"0\";\n    }\n    return str;\n}\nexport function dateOffset(date) {\n    const date1 = date;\n    return typeof date1.offset === \"number\"\n        ? date1.offset\n        : (date.kind === 1 /* UTC */\n            ? 0 : date.getTimezoneOffset() * -60000);\n}\nexport function int16ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport function int32ToString(i, radix) {\n    i = i < 0 && radix != null && radix !== 10 ? 0xFFFFFFFF + i + 1 : i;\n    return i.toString(radix);\n}\nexport class ObjectRef {\n    static id(o) {\n        if (!ObjectRef.idMap.has(o)) {\n            ObjectRef.idMap.set(o, ++ObjectRef.count);\n        }\n        return ObjectRef.idMap.get(o);\n    }\n}\nObjectRef.idMap = new WeakMap();\nObjectRef.count = 0;\nexport function stringHash(s) {\n    let i = 0;\n    let h = 5381;\n    const len = s.length;\n    while (i < len) {\n        h = (h * 33) ^ s.charCodeAt(i++);\n    }\n    return h;\n}\nexport function numberHash(x) {\n    return x * 2654435761 | 0;\n}\n// From https://stackoverflow.com/a/37449594\nexport function combineHashCodes(hashes) {\n    if (hashes.length === 0) {\n        return 0;\n    }\n    return hashes.reduce((h1, h2) => {\n        return ((h1 << 5) + h1) ^ h2;\n    });\n}\nexport function identityHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default:\n            return numberHash(ObjectRef.id(x));\n    }\n}\nexport function structuralHash(x) {\n    if (x == null) {\n        return 0;\n    }\n    switch (typeof x) {\n        case \"boolean\":\n            return x ? 1 : 0;\n        case \"number\":\n            return numberHash(x);\n        case \"string\":\n            return stringHash(x);\n        default: {\n            if (typeof x.GetHashCode === \"function\") {\n                return x.GetHashCode();\n            }\n            else if (isArray(x)) {\n                const ar = x;\n                const len = ar.length;\n                const hashes = new Array(len);\n                for (let i = 0; i < len; i++) {\n                    hashes[i] = structuralHash(ar[i]);\n                }\n                return combineHashCodes(hashes);\n            }\n            else {\n                return stringHash(String(x));\n            }\n        }\n    }\n}\nexport function isArray(x) {\n    return Array.isArray(x) || ArrayBuffer.isView(x);\n}\nexport function isIterable(x) {\n    return x != null && typeof x === \"object\" && Symbol.iterator in x;\n}\nexport function equalArraysWith(x, y, eq) {\n    if (x == null) {\n        return y == null;\n    }\n    if (y == null) {\n        return false;\n    }\n    if (x.length !== y.length) {\n        return false;\n    }\n    for (let i = 0; i < x.length; i++) {\n        if (!eq(x[i], y[i])) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function equalArrays(x, y) {\n    return equalArraysWith(x, y, equals);\n}\n// export function equalObjects(x: { [k: string]: any }, y: { [k: string]: any }): boolean {\n//   if (x == null) { return y == null; }\n//   if (y == null) { return false; }\n//   const xKeys = Object.keys(x);\n//   const yKeys = Object.keys(y);\n//   if (xKeys.length !== yKeys.length) {\n//     return false;\n//   }\n//   xKeys.sort();\n//   yKeys.sort();\n//   for (let i = 0; i < xKeys.length; i++) {\n//     if (xKeys[i] !== yKeys[i] || !equals(x[xKeys[i]], y[yKeys[i]])) {\n//       return false;\n//     }\n//   }\n//   return true;\n// }\nexport function equals(x, y) {\n    if (x === y) {\n        return true;\n    }\n    else if (x == null) {\n        return y == null;\n    }\n    else if (y == null) {\n        return false;\n    }\n    else if (typeof x !== \"object\") {\n        return false;\n    }\n    else if (typeof x.Equals === \"function\") {\n        return x.Equals(y);\n    }\n    else if (isArray(x)) {\n        return isArray(y) && equalArrays(x, y);\n    }\n    else if (x instanceof Date) {\n        return (y instanceof Date) && compareDates(x, y) === 0;\n    }\n    else {\n        return false;\n    }\n}\nexport function compareDates(x, y) {\n    let xtime;\n    let ytime;\n    // DateTimeOffset and DateTime deals with equality differently.\n    if (\"offset\" in x && \"offset\" in y) {\n        xtime = x.getTime();\n        ytime = y.getTime();\n    }\n    else {\n        xtime = x.getTime() + dateOffset(x);\n        ytime = y.getTime() + dateOffset(y);\n    }\n    return xtime === ytime ? 0 : (xtime < ytime ? -1 : 1);\n}\nexport function comparePrimitives(x, y) {\n    return x === y ? 0 : (x < y ? -1 : 1);\n}\nexport function compareArraysWith(x, y, comp) {\n    if (x == null) {\n        return y == null ? 0 : 1;\n    }\n    if (y == null) {\n        return -1;\n    }\n    if (x.length !== y.length) {\n        return x.length < y.length ? -1 : 1;\n    }\n    for (let i = 0, j = 0; i < x.length; i++) {\n        j = comp(x[i], y[i]);\n        if (j !== 0) {\n            return j;\n        }\n    }\n    return 0;\n}\nexport function compareArrays(x, y) {\n    return compareArraysWith(x, y, compare);\n}\nexport function compareObjects(x, y) {\n    if (x == null) {\n        return y == null ? 0 : 1;\n    }\n    if (y == null) {\n        return -1;\n    }\n    const xKeys = Object.keys(x);\n    const yKeys = Object.keys(y);\n    if (xKeys.length !== yKeys.length) {\n        return xKeys.length < yKeys.length ? -1 : 1;\n    }\n    xKeys.sort();\n    yKeys.sort();\n    for (let i = 0, j = 0; i < xKeys.length; i++) {\n        const key = xKeys[i];\n        if (key !== yKeys[i]) {\n            return key < yKeys[i] ? -1 : 1;\n        }\n        else {\n            j = compare(x[key], y[key]);\n            if (j !== 0) {\n                return j;\n            }\n        }\n    }\n    return 0;\n}\nexport function compare(x, y) {\n    if (x === y) {\n        return 0;\n    }\n    else if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    else if (y == null) {\n        return 1;\n    }\n    else if (typeof x !== \"object\") {\n        return x < y ? -1 : 1;\n    }\n    else if (typeof x.CompareTo === \"function\") {\n        return x.CompareTo(y);\n    }\n    else if (isArray(x)) {\n        return isArray(y) && compareArrays(x, y);\n    }\n    else if (x instanceof Date) {\n        return (y instanceof Date) && compareDates(x, y);\n    }\n    else {\n        return 1;\n    }\n}\nexport function min(comparer, x, y) {\n    return comparer(x, y) < 0 ? x : y;\n}\nexport function max(comparer, x, y) {\n    return comparer(x, y) > 0 ? x : y;\n}\nexport function createAtom(value) {\n    let atom = value;\n    return (value) => {\n        if (value === void 0) {\n            return atom;\n        }\n        else {\n            atom = value;\n            return void 0;\n        }\n    };\n}\nconst CaseRules = {\n    None: 0,\n    LowerFirst: 1,\n};\nfunction changeCase(str, caseRule) {\n    switch (caseRule) {\n        case CaseRules.LowerFirst:\n            return str.charAt(0).toLowerCase() + str.slice(1);\n        case CaseRules.None:\n        default:\n            return str;\n    }\n}\nexport function createObj(fields, caseRule = CaseRules.None) {\n    function fail(kvPair) {\n        throw new Error(\"Cannot infer key and value of \" + String(kvPair));\n    }\n    const o = {};\n    const definedCaseRule = caseRule;\n    for (let kvPair of fields) {\n        let caseRule = CaseRules.None;\n        if (kvPair == null) {\n            fail(kvPair);\n        }\n        // Deflate unions and use the defined case rule\n        if (typeof kvPair.toJSON === \"function\") {\n            kvPair = kvPair.toJSON();\n            caseRule = definedCaseRule;\n        }\n        if (Array.isArray(kvPair)) {\n            switch (kvPair.length) {\n                case 0:\n                    fail(kvPair);\n                    break;\n                case 1:\n                    o[changeCase(kvPair[0], caseRule)] = true;\n                    break;\n                case 2:\n                    const value = kvPair[1];\n                    o[changeCase(kvPair[0], caseRule)] = value;\n                    break;\n                default:\n                    o[changeCase(kvPair[0], caseRule)] = kvPair.slice(1);\n            }\n        }\n        else if (typeof kvPair === \"string\") {\n            o[changeCase(kvPair, caseRule)] = true;\n        }\n        else {\n            fail(kvPair);\n        }\n    }\n    return o;\n}\nexport function jsOptions(mutator) {\n    const opts = {};\n    mutator(opts);\n    return opts;\n}\nexport function round(value, digits = 0) {\n    const m = Math.pow(10, digits);\n    const n = +(digits ? value * m : value).toFixed(8);\n    const i = Math.floor(n);\n    const f = n - i;\n    const e = 1e-8;\n    const r = (f > 0.5 - e && f < 0.5 + e) ? ((i % 2 === 0) ? i : i + 1) : Math.round(n);\n    return digits ? r / m : r;\n}\nexport function sign(x) {\n    return x > 0 ? 1 : x < 0 ? -1 : 0;\n}\nexport function randomNext(min, max) {\n    return Math.floor(Math.random() * (max - min)) + min;\n}\nexport function randomBytes(buffer) {\n    if (buffer == null) {\n        throw new Error(\"Buffer cannot be null\");\n    }\n    for (let i = 0; i < buffer.length; i += 6) {\n        // Pick random 48-bit number. Fill buffer in 2 24-bit chunks to avoid bitwise truncation.\n        let r = Math.floor(Math.random() * 281474976710656); // Low 24 bits = chunk 1.\n        const rhi = Math.floor(r / 16777216); // High 24 bits shifted via division = chunk 2.\n        for (let j = 0; j < 6 && i + j < buffer.length; j++) {\n            if (j === 3) {\n                r = rhi;\n            }\n            buffer[i + j] = r & 255;\n            r >>>= 8;\n        }\n    }\n}\nexport function unescapeDataString(s) {\n    // https://stackoverflow.com/a/4458580/524236\n    return decodeURIComponent((s).replace(/\\+/g, \"%20\"));\n}\nexport function escapeDataString(s) {\n    return encodeURIComponent(s).replace(/!/g, \"%21\")\n        .replace(/'/g, \"%27\")\n        .replace(/\\(/g, \"%28\")\n        .replace(/\\)/g, \"%29\")\n        .replace(/\\*/g, \"%2A\");\n}\nexport function escapeUriString(s) {\n    return encodeURI(s);\n}\n// ICollection.Clear and Count members can be called on Arrays\n// or Dictionaries so we need a runtime check (see #1120)\nexport function count(col) {\n    if (isArray(col)) {\n        return col.length;\n    }\n    else {\n        let count = 0;\n        for (const _ of col) {\n            count++;\n        }\n        return count;\n    }\n}\nexport function clear(col) {\n    if (isArray(col)) {\n        col.splice(0);\n    }\n    else {\n        col.clear();\n    }\n}\nconst CURRIED_KEY = \"__CURRIED__\";\nexport function uncurry(arity, f) {\n    // f may be a function option with None value\n    if (f == null) {\n        return null;\n    }\n    // The function is already uncurried\n    if (f.length > 1) {\n        //   if (CURRIED_KEY in f) { // This doesn't always work\n        return f;\n    }\n    let uncurriedFn;\n    switch (arity) {\n        case 2:\n            uncurriedFn = (a1, a2) => f(a1)(a2);\n            break;\n        case 3:\n            uncurriedFn = (a1, a2, a3) => f(a1)(a2)(a3);\n            break;\n        case 4:\n            uncurriedFn = (a1, a2, a3, a4) => f(a1)(a2)(a3)(a4);\n            break;\n        case 5:\n            uncurriedFn = (a1, a2, a3, a4, a5) => f(a1)(a2)(a3)(a4)(a5);\n            break;\n        case 6:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6) => f(a1)(a2)(a3)(a4)(a5)(a6);\n            break;\n        case 7:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6, a7) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7);\n            break;\n        case 8:\n            uncurriedFn = (a1, a2, a3, a4, a5, a6, a7, a8) => f(a1)(a2)(a3)(a4)(a5)(a6)(a7)(a8);\n            break;\n        default:\n            throw new Error(\"Uncurrying to more than 8-arity is not supported: \" + arity);\n    }\n    uncurriedFn[CURRIED_KEY] = f;\n    return uncurriedFn;\n}\nexport function curry(arity, f) {\n    if (f == null) {\n        return null;\n    }\n    if (CURRIED_KEY in f) {\n        return f[CURRIED_KEY];\n    }\n    switch (arity) {\n        case 2:\n            return (a1) => (a2) => f(a1, a2);\n        case 3:\n            return (a1) => (a2) => (a3) => f(a1, a2, a3);\n        case 4:\n            return (a1) => (a2) => (a3) => (a4) => f(a1, a2, a3, a4);\n        case 5:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => f(a1, a2, a3, a4, a5);\n        case 6:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => f(a1, a2, a3, a4, a5, a6);\n        case 7:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => f(a1, a2, a3, a4, a5, a6, a7);\n        case 8:\n            return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => f(a1, a2, a3, a4, a5, a6, a7, a8);\n        default:\n            throw new Error(\"Currying to more than 8-arity is not supported: \" + arity);\n    }\n}\nexport function partialApply(arity, f, args) {\n    if (f == null) {\n        return null;\n    }\n    else if (CURRIED_KEY in f) {\n        f = f[CURRIED_KEY];\n        for (let i = 0; i < args.length; i++) {\n            f = f(args[i]);\n        }\n        return f;\n    }\n    else {\n        switch (arity) {\n            case 1:\n                // Wrap arguments to make sure .concat doesn't destruct arrays. Example\n                // [1,2].concat([3,4],5)   --> [1,2,3,4,5]    // fails\n                // [1,2].concat([[3,4],5]) --> [1,2,[3,4],5]  // ok\n                return (a1) => f.apply(null, args.concat([a1]));\n            case 2:\n                return (a1) => (a2) => f.apply(null, args.concat([a1, a2]));\n            case 3:\n                return (a1) => (a2) => (a3) => f.apply(null, args.concat([a1, a2, a3]));\n            case 4:\n                return (a1) => (a2) => (a3) => (a4) => f.apply(null, args.concat([a1, a2, a3, a4]));\n            case 5:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => f.apply(null, args.concat([a1, a2, a3, a4, a5]));\n            case 6:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => f.apply(null, args.concat([a1, a2, a3, a4, a5, a6]));\n            case 7:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => f.apply(null, args.concat([a1, a2, a3, a4, a5, a6, a7]));\n            case 8:\n                return (a1) => (a2) => (a3) => (a4) => (a5) => (a6) => (a7) => (a8) => f.apply(null, args.concat([a1, a2, a3, a4, a5, a6, a7, a8]));\n            default:\n                throw new Error(\"Partially applying to more than 8-arity is not supported: \" + arity);\n        }\n    }\n}\nexport function mapCurriedArgs(fn, mappings) {\n    function mapArg(fn, arg, mappings, idx) {\n        const mapping = mappings[idx];\n        if (mapping !== 0) {\n            const expectedArity = mapping[0];\n            const actualArity = mapping[1];\n            if (expectedArity > 1) {\n                arg = curry(expectedArity, arg);\n            }\n            if (actualArity > 1) {\n                arg = uncurry(actualArity, arg);\n            }\n        }\n        const res = fn(arg);\n        if (idx + 1 === mappings.length) {\n            return res;\n        }\n        else {\n            return (arg) => mapArg(res, arg, mappings, idx + 1);\n        }\n    }\n    return (arg) => mapArg(fn, arg, mappings, 0);\n}\nexport function addToDict(dict, k, v) {\n    if (dict.has(k)) {\n        throw new Error(\"An item with the same key has already been added. Key: \" + k);\n    }\n    dict.set(k, v);\n}\nexport function getItemFromDict(map, key) {\n    if (map.has(key)) {\n        return map.get(key);\n    }\n    else {\n        throw new Error(`The given key '${key}' was not present in the dictionary.`);\n    }\n}\n//# sourceMappingURL=Util.js.map","import { combineHashCodes, compare, compareArrays, equalArrays, equals, identityHash, numberHash, structuralHash } from \"./Util\";\nfunction sameType(x, y) {\n    return y != null && Object.getPrototypeOf(x).constructor === Object.getPrototypeOf(y).constructor;\n}\n// Taken from Babel helpers\nfunction inherits(subClass, superClass) {\n    // if (typeof superClass !== \"function\" && superClass !== null) {\n    //   throw new TypeError(\n    //     \"Super expression must either be null or a function, not \" +\n    //       typeof superClass\n    //   );\n    // }\n    subClass.prototype = Object.create(superClass && superClass.prototype, {\n        constructor: {\n            value: subClass,\n            enumerable: false,\n            writable: true,\n            configurable: true,\n        },\n    });\n    // if (superClass)\n    //   Object.setPrototypeOf\n    //     ? Object.setPrototypeOf(subClass, superClass)\n    //     : (subClass.__proto__ = superClass);\n}\nexport function declare(cons, superClass) {\n    inherits(cons, superClass || SystemObject);\n    return cons;\n}\nexport function SystemObject() {\n    return;\n}\nSystemObject.prototype.toString = function () {\n    return \"{\" + Object.keys(this).map((k) => k + \" = \" + String(this[k])).join(\";\\n \") + \"}\";\n};\nSystemObject.prototype.GetHashCode = function () {\n    return identityHash(this);\n};\nSystemObject.prototype.Equals = function (other) {\n    return this === other;\n};\nfunction compareList(self, other) {\n    if (self === other) {\n        return 0;\n    }\n    else {\n        if (other == null) {\n            return -1;\n        }\n        while (self.tail != null) {\n            if (other.tail == null) {\n                return 1;\n            }\n            const res = compare(self.head, other.head);\n            if (res !== 0) {\n                return res;\n            }\n            self = self.tail;\n            other = other.tail;\n        }\n        return other.tail == null ? 0 : -1;\n    }\n}\nexport function List(head, tail) {\n    this.head = head;\n    this.tail = tail;\n}\nList.prototype.toString = function () {\n    return \"[\" + Array.from(this).map((x) => String(x)).join(\"; \") + \"]\";\n};\nList.prototype.toJSON = function () {\n    return Array.from(this);\n};\nList.prototype[Symbol.iterator] = function () {\n    let cur = this;\n    return {\n        next: () => {\n            const tmp = cur;\n            cur = cur.tail;\n            return { done: tmp.tail == null, value: tmp.head };\n        },\n    };\n};\nList.prototype.GetHashCode = function () {\n    const hashes = Array.from(this).map(structuralHash);\n    return combineHashCodes(hashes);\n};\nList.prototype.Equals = function (other) {\n    return compareList(this, other) === 0;\n};\nList.prototype.CompareTo = function (other) {\n    return compareList(this, other);\n};\nexport function Union(tag, name, ...fields) {\n    this.tag = tag | 0;\n    this.name = name;\n    this.fields = fields;\n}\nUnion.prototype.toString = function () {\n    const len = this.fields.length;\n    if (len === 0) {\n        return this.name;\n    }\n    else if (len === 1) {\n        return this.name + \" \" + String(this.fields[0]);\n    }\n    else {\n        return this.name + \" (\" + this.fields.map((x) => String(x)).join(\",\") + \")\";\n    }\n};\nUnion.prototype.toJSON = function () {\n    return this.fields.length === 0\n        ? this.name\n        : [this.name].concat(this.fields);\n};\nUnion.prototype.GetHashCode = function () {\n    const hashes = this.fields.map((x) => structuralHash(x));\n    hashes.splice(0, 0, numberHash(this.tag));\n    return combineHashCodes(hashes);\n};\nUnion.prototype.Equals = function (other) {\n    return this === other\n        || (sameType(this, other)\n            && this.tag === other.tag\n            && equalArrays(this.fields, other.fields));\n};\nUnion.prototype.CompareTo = function (other) {\n    if (this === other) {\n        return 0;\n    }\n    else if (!sameType(this, other)) {\n        return -1;\n    }\n    else if (this.tag === other.tag) {\n        return compareArrays(this.fields, other.fields);\n    }\n    else {\n        return this.tag < other.tag ? -1 : 1;\n    }\n};\nfunction recordToJson(record, getFieldNames) {\n    const o = {};\n    const keys = getFieldNames == null ? Object.keys(record) : getFieldNames(record);\n    for (let i = 0; i < keys.length; i++) {\n        o[keys[i]] = record[keys[i]];\n    }\n    return o;\n}\nfunction recordEquals(self, other, getFieldNames) {\n    if (self === other) {\n        return true;\n    }\n    else if (!sameType(self, other)) {\n        return false;\n    }\n    else {\n        const thisNames = getFieldNames == null ? Object.keys(self) : getFieldNames(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            if (!equals(self[thisNames[i]], other[thisNames[i]])) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\nfunction recordCompare(self, other, getFieldNames) {\n    if (self === other) {\n        return 0;\n    }\n    else if (!sameType(self, other)) {\n        return -1;\n    }\n    else {\n        const thisNames = getFieldNames == null ? Object.keys(self) : getFieldNames(self);\n        for (let i = 0; i < thisNames.length; i++) {\n            const result = compare(self[thisNames[i]], other[thisNames[i]]);\n            if (result !== 0) {\n                return result;\n            }\n        }\n        return 0;\n    }\n}\nexport function Record() {\n    return;\n}\nRecord.prototype.toString = function () {\n    return \"{\" + Object.keys(this).map((k) => k + \" = \" + String(this[k])).join(\";\\n \") + \"}\";\n};\nRecord.prototype.toJSON = function () {\n    return recordToJson(this);\n};\nRecord.prototype.GetHashCode = function () {\n    const hashes = Object.keys(this).map((k) => structuralHash(this[k]));\n    return combineHashCodes(hashes);\n};\nRecord.prototype.Equals = function (other) {\n    return recordEquals(this, other);\n};\nRecord.prototype.CompareTo = function (other) {\n    return recordCompare(this, other);\n};\nexport function anonRecord(o) {\n    return Object.assign(Object.create(Record.prototype), o);\n}\nexport const FSharpRef = declare(function FSharpRef(contents) {\n    this.contents = contents;\n}, Record);\n// EXCEPTIONS\nexport const Exception = declare(function Exception(msg) {\n    this.stack = Error().stack;\n    this.message = msg;\n});\nexport function isException(x) {\n    return x instanceof Error || x instanceof Exception;\n}\nfunction getFSharpExceptionFieldNames(self) {\n    return Object.keys(self).filter((k) => k !== \"message\" && k !== \"stack\");\n}\nexport const FSharpException = declare(function FSharpException() {\n    Exception.call(this);\n}, Exception);\nFSharpException.prototype.toString = function () {\n    const fieldNames = getFSharpExceptionFieldNames(this);\n    const len = fieldNames.length;\n    if (len === 0) {\n        return this.message;\n    }\n    else if (len === 1) {\n        return this.message + \" \" + String(this[fieldNames[0]]);\n    }\n    else {\n        return this.message + \" (\" + fieldNames.map((k) => String(this[k])).join(\",\") + \")\";\n    }\n};\nFSharpException.prototype.toJSON = function () {\n    return recordToJson(this, getFSharpExceptionFieldNames);\n};\nFSharpException.prototype.GetHashCode = function () {\n    const hashes = getFSharpExceptionFieldNames(this).map((k) => structuralHash(this[k]));\n    return combineHashCodes(hashes);\n};\nFSharpException.prototype.Equals = function (other) {\n    return recordEquals(this, other, getFSharpExceptionFieldNames);\n};\nFSharpException.prototype.CompareTo = function (other) {\n    return recordCompare(this, other, getFSharpExceptionFieldNames);\n};\nexport const MatchFailureException = declare(function MatchFailureException(arg1, arg2, arg3) {\n    this.arg1 = arg1;\n    this.arg2 = arg2 | 0;\n    this.arg3 = arg3 | 0;\n    this.message = \"The match cases were incomplete\";\n}, FSharpException);\nexport const Attribute = declare(function Attribute() { return; });\n//# sourceMappingURL=Types.js.map","import { anonRecord as makeAnonRecord, Record, Union } from \"./Types\";\nimport { compareArraysWith, equalArraysWith } from \"./Util\";\nexport class CaseInfo {\n    constructor(declaringType, tag, name, fields) {\n        this.declaringType = declaringType;\n        this.tag = tag;\n        this.name = name;\n        this.fields = fields;\n    }\n}\nexport class TypeInfo {\n    constructor(fullname, generics, constructor, fields, cases) {\n        this.fullname = fullname;\n        this.generics = generics;\n        this.constructor = constructor;\n        this.fields = fields;\n        this.cases = cases;\n    }\n    toString() {\n        return fullName(this);\n    }\n    Equals(other) {\n        return equals(this, other);\n    }\n    CompareTo(other) {\n        return compare(this, other);\n    }\n}\nexport function getGenerics(t) {\n    return t.generics != null ? t.generics : [];\n}\nexport function equals(t1, t2) {\n    if (t1.fullname === \"\") { // Anonymous records\n        return t2.fullname === \"\"\n            && equalArraysWith(getRecordElements(t1), getRecordElements(t2), ([k1, v1], [k2, v2]) => k1 === k2 && equals(v1, v2));\n    }\n    else {\n        return t1.fullname === t2.fullname\n            && equalArraysWith(getGenerics(t1), getGenerics(t2), equals);\n    }\n}\n// System.Type is not comparable in .NET, but let's implement this\n// in case users want to create a dictionary with types as keys\nexport function compare(t1, t2) {\n    if (t1.fullname !== t2.fullname) {\n        return t1.fullname < t2.fullname ? -1 : 1;\n    }\n    else {\n        return compareArraysWith(getGenerics(t1), getGenerics(t2), compare);\n    }\n}\nexport function type(fullname, generics) {\n    return new TypeInfo(fullname, generics);\n}\nexport function record(fullname, generics, constructor, fields) {\n    return new TypeInfo(fullname, generics, constructor, fields);\n}\nexport function anonRecord(...fields) {\n    return new TypeInfo(\"\", null, null, () => fields);\n}\nexport function union(fullname, generics, constructor, cases) {\n    const t = new TypeInfo(fullname, generics, constructor, null, () => cases().map((x, i) => typeof x === \"string\" ? new CaseInfo(t, i, x) : new CaseInfo(t, i, x[0], x[1])));\n    return t;\n}\nexport function tuple(...generics) {\n    return new TypeInfo(\"System.Tuple`\" + generics.length, generics);\n}\nexport function delegate(...generics) {\n    return new TypeInfo(\"System.Func`\" + generics.length, generics);\n}\nexport function lambda(argType, returnType) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpFunc`2\", [argType, returnType]);\n}\nexport function option(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Core.FSharpOption`1\", [generic]);\n}\nexport function list(generic) {\n    return new TypeInfo(\"Microsoft.FSharp.Collections.FSharpList`1\", [generic]);\n}\nexport function array(generic) {\n    return new TypeInfo(generic.fullname + \"[]\", [generic]);\n}\nexport const obj = new TypeInfo(\"System.Object\");\nexport const unit = new TypeInfo(\"Microsoft.FSharp.Core.Unit\");\nexport const char = new TypeInfo(\"System.Char\");\nexport const string = new TypeInfo(\"System.String\");\nexport const bool = new TypeInfo(\"System.Boolean\");\nexport const int8 = new TypeInfo(\"System.SByte\");\nexport const uint8 = new TypeInfo(\"System.Byte\");\nexport const int16 = new TypeInfo(\"System.Int16\");\nexport const uint16 = new TypeInfo(\"System.UInt16\");\nexport const int32 = new TypeInfo(\"System.Int32\");\nexport const uint32 = new TypeInfo(\"System.UInt32\");\nexport const float32 = new TypeInfo(\"System.Single\");\nexport const float64 = new TypeInfo(\"System.Double\");\nexport const decimal = new TypeInfo(\"System.Decimal\");\nexport function name(info) {\n    if (Array.isArray(info)) {\n        return info[0];\n    }\n    else if (info instanceof CaseInfo) {\n        return info.name;\n    }\n    else {\n        const i = info.fullname.lastIndexOf(\".\");\n        return i === -1 ? info.fullname : info.fullname.substr(i + 1);\n    }\n}\nexport function fullName(t) {\n    const gen = t.generics != null && !isArray(t) ? t.generics : [];\n    if (gen.length > 0) {\n        return t.fullname + \"[\" + gen.map((x) => fullName(x)).join(\",\") + \"]\";\n    }\n    else {\n        return t.fullname;\n    }\n}\nexport function namespace(t) {\n    const i = t.fullname.lastIndexOf(\".\");\n    return i === -1 ? \"\" : t.fullname.substr(0, i);\n}\nexport function isArray(t) {\n    return t.fullname.endsWith(\"[]\");\n}\nexport function getElementType(t) {\n    return isArray(t) ? t.generics[0] : null;\n}\nexport function isGenericType(t) {\n    return t.generics != null && t.generics.length > 0;\n}\n/**\n * This doesn't replace types for fields (records) or cases (unions)\n * but it should be enough for type comparison purposes\n */\nexport function getGenericTypeDefinition(t) {\n    return t.generics == null ? t : new TypeInfo(t.fullname, t.generics.map(() => obj));\n}\n// FSharpType\nexport function getUnionCases(t) {\n    if (t.cases != null) {\n        return t.cases();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# union type`);\n    }\n}\nexport function getRecordElements(t) {\n    if (t.fields != null) {\n        return t.fields();\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# record type`);\n    }\n}\nexport function getTupleElements(t) {\n    if (isTuple(t)) {\n        return t.generics;\n    }\n    else {\n        throw new Error(`${t.fullname} is not a tuple type`);\n    }\n}\nexport function getFunctionElements(t) {\n    if (isFunction(t)) {\n        const gen = t.generics;\n        return [gen[0], gen[1]];\n    }\n    else {\n        throw new Error(`${t.fullname} is not an F# function type`);\n    }\n}\nexport function isUnion(t) {\n    return t instanceof TypeInfo ? t.cases != null : t instanceof Union;\n}\nexport function isRecord(t) {\n    return t instanceof TypeInfo ? t.fields != null : t instanceof Record;\n}\nexport function isTuple(t) {\n    return t.fullname.startsWith(\"System.Tuple\");\n}\n// In .NET this is false for delegates\nexport function isFunction(t) {\n    return t.fullname === \"Microsoft.FSharp.Core.FSharpFunc`2\";\n}\n// FSharpValue\nexport function getUnionFields(v, t) {\n    const cases = getUnionCases(t);\n    const case_ = cases[v.tag];\n    if (case_ == null) {\n        throw new Error(`Cannot find case ${v.name} in union type`);\n    }\n    return [case_, v.fields];\n}\nexport function getUnionCaseFields(uci) {\n    return uci.fields == null ? [] : uci.fields.map((t, i) => [\"Data\" + i, t]);\n}\nexport function getRecordFields(v) {\n    return Object.keys(v).map((k) => v[k]);\n}\nexport function getRecordField(v, field) {\n    return v[field[0]];\n}\nexport function getTupleFields(v) {\n    return v;\n}\nexport function getTupleField(v, i) {\n    return v[i];\n}\nexport function makeUnion(uci, values) {\n    const expectedLength = (uci.fields || []).length;\n    if (values.length !== expectedLength) {\n        throw new Error(`Expected an array of length ${expectedLength} but got ${values.length}`);\n    }\n    return new uci.declaringType.constructor(uci.tag, uci.name, ...values);\n}\nexport function makeRecord(t, values) {\n    const fields = getRecordElements(t);\n    if (fields.length !== values.length) {\n        throw new Error(`Expected an array of length ${fields.length} but got ${values.length}`);\n    }\n    return t.constructor != null\n        ? new t.constructor(...values)\n        : makeAnonRecord(fields.reduce((obj, [key, _t], i) => {\n            obj[key] = values[i];\n            return obj;\n        }, {}));\n}\nexport function makeTuple(values, t) {\n    return values;\n}\n// Fable.Core.Reflection\nfunction assertUnion(x) {\n    if (!(x instanceof Union)) {\n        throw new Error(`Value is not an F# union type`);\n    }\n}\nexport function getCaseTag(x) {\n    assertUnion(x);\n    return x.tag;\n}\nexport function getCaseName(x) {\n    assertUnion(x);\n    return x.name;\n}\nexport function getCaseFields(x) {\n    assertUnion(x);\n    return x.fields;\n}\n//# sourceMappingURL=Reflection.js.map","// https://github.com/MikeMcl/big.js/blob/01b3ce3a6b0ba7b42442ea48ec4ffc88d1669ec4/big.mjs\n/* tslint:disable */\nimport { combineHashCodes } from \"../Util\";\n// The shared prototype object.\nvar P = {\n    GetHashCode() { return combineHashCodes([this.s, this.e].concat(this.c)); },\n    Equals(x) { return !this.cmp(x); },\n    CompareTo(x) { return this.cmp(x); },\n};\n/*\n *  big.js v5.2.2\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\n *  Copyright (c) 2018 Michael Mclaughlin <M8ch88l@gmail.com>\n *  https://github.com/MikeMcl/big.js/LICENCE\n */\n/************************************** EDITABLE DEFAULTS *****************************************/\n// The default values below must be integers within the stated ranges.\n/*\n * The maximum number of decimal places (DP) of the results of operations involving division:\n * div and sqrt, and pow with negative exponents.\n */\nvar DP = 28, // 0 to MAX_DP\n/*\n * The rounding mode (RM) used when rounding to the above decimal places.\n *\n *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\n *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\n *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\n *  3  Away from zero.                                  (ROUND_UP)\n */\nRM = 1, // 0, 1, 2 or 3\n// The maximum value of DP and Big.DP.\nMAX_DP = 1E6, // 0 to 1000000\n// The maximum magnitude of the exponent argument to the pow method.\nMAX_POWER = 1E6, // 1 to 1000000\n/*\n * The negative exponent (NE) at and beneath which toString returns exponential notation.\n * (JavaScript numbers: -7)\n * -1000000 is the minimum recommended exponent value of a Big.\n */\nNE = -29, // 0 to -1000000\n/*\n * The positive exponent (PE) at and above which toString returns exponential notation.\n * (JavaScript numbers: 21)\n * 1000000 is the maximum recommended exponent value of a Big.\n * (This limit is not enforced or checked.)\n */\nPE = 29, // 0 to 1000000\n/**************************************************************************************************/\n// Error messages.\nNAME = '[big.js] ', INVALID = NAME + 'Invalid ', INVALID_DP = INVALID + 'decimal places', INVALID_RM = INVALID + 'rounding mode', DIV_BY_ZERO = NAME + 'Division by zero', UNDEFINED = void 0, NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\n/*\n * Create and return a Big constructor.\n *\n */\nfunction _Big_() {\n    /*\n     * The Big constructor and exported function.\n     * Create and return a new instance of a Big number object.\n     *\n     * n {number|string|Big} A numeric value.\n     */\n    function Big(n) {\n        var x = this;\n        // Enable constructor usage without new.\n        if (!(x instanceof Big))\n            return n === UNDEFINED ? _Big_() : new Big(n);\n        // Duplicate.\n        if (n instanceof Big) {\n            x.s = n.s;\n            x.e = n.e;\n            x.c = n.c.slice();\n            normalize(x);\n        }\n        else {\n            parse(x, n);\n        }\n        /*\n         * Retain a reference to this Big constructor, and shadow Big.prototype.constructor which\n         * points to Object.\n         */\n        x.constructor = Big;\n    }\n    Big.prototype = P;\n    Big.DP = DP;\n    Big.RM = RM;\n    Big.NE = NE;\n    Big.PE = PE;\n    Big.version = '5.2.2';\n    return Big;\n}\nfunction normalize(x) {\n    x = round(x, DP, 0);\n    if (x.c.length > 1 && !x.c[0]) {\n        let i = x.c.findIndex(x => x);\n        x.c = x.c.slice(i);\n        x.e = x.e - i;\n    }\n}\n/*\n * Parse the number or string value passed to a Big constructor.\n *\n * x {Big} A Big number instance.\n * n {number|string} A numeric value.\n */\nfunction parse(x, n) {\n    var e, i, nl;\n    // Minus zero?\n    if (n === 0 && 1 / n < 0)\n        n = '-0';\n    else if (!NUMERIC.test(n += ''))\n        throw Error(INVALID + 'number');\n    // Determine sign.\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\n    // Decimal point?\n    if ((e = n.indexOf('.')) > -1)\n        n = n.replace('.', '');\n    // Exponential form?\n    if ((i = n.search(/e/i)) > 0) {\n        // Determine exponent.\n        if (e < 0)\n            e = i;\n        e += +n.slice(i + 1);\n        n = n.substring(0, i);\n    }\n    else if (e < 0) {\n        // Integer.\n        e = n.length;\n    }\n    nl = n.length;\n    // Determine leading zeros before decimal point.\n    for (i = 0; i < e && i < nl && n.charAt(i) == '0';)\n        ++i;\n    // older version (ignores decimal point).\n    // // Determine leading zeros.\n    // for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\n    if (i == nl) {\n        // Zero.\n        x.c = [x.e = 0];\n    }\n    else {\n        x.e = e - i - 1;\n        x.c = [];\n        // Convert string to array of digits without leading zeros\n        for (e = 0; i < nl;)\n            x.c[e++] = +n.charAt(i++);\n        // older version (doesn't keep trailing zeroes).\n        // // Determine trailing zeros.\n        // for (; nl > 0 && n.charAt(--nl) == '0';);\n        // // Convert string to array of digits without leading/trailing zeros.\n        // for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\n    }\n    x = round(x, Big.DP, Big.RM);\n    return x;\n}\n/*\n * Round Big x to a maximum of dp decimal places using rounding mode rm.\n * Called by stringify, P.div, P.round and P.sqrt.\n *\n * x {Big} The Big to round.\n * dp {number} Integer, 0 to MAX_DP inclusive.\n * rm {number} 0, 1, 2 or 3 (DOWN, HALF_UP, HALF_EVEN, UP)\n * [more] {boolean} Whether the result of division was truncated.\n */\nfunction round(x, dp, rm, more) {\n    var xc = x.c, i = x.e + dp + 1;\n    if (i < xc.length) {\n        if (rm === 1) {\n            // xc[i] is the digit after the digit that may be rounded up.\n            more = xc[i] >= 5;\n        }\n        else if (rm === 2) {\n            more = xc[i] > 5 || xc[i] == 5 &&\n                (more || i < 0 || xc[i + 1] !== UNDEFINED || xc[i - 1] & 1);\n        }\n        else if (rm === 3) {\n            more = more || !!xc[0];\n        }\n        else {\n            more = false;\n            if (rm !== 0)\n                throw Error(INVALID_RM);\n        }\n        if (i < 1) {\n            xc.length = 1;\n            if (more) {\n                // 1, 0.1, 0.01, 0.001, 0.0001 etc.\n                x.e = -dp;\n                xc[0] = 1;\n            }\n            else {\n                // Zero.\n                xc[0] = x.e = 0;\n            }\n        }\n        else {\n            // Remove any digits after the required decimal places.\n            xc.length = i--;\n            // Round up?\n            if (more) {\n                // Rounding up may mean the previous digit has to be rounded up.\n                for (; ++xc[i] > 9;) {\n                    xc[i] = 0;\n                    if (!i--) {\n                        ++x.e;\n                        xc.unshift(1);\n                    }\n                }\n            }\n            // Remove trailing zeros.\n            for (i = xc.length; !xc[--i];)\n                xc.pop();\n        }\n    }\n    else if (rm < 0 || rm > 3 || rm !== ~~rm) {\n        throw Error(INVALID_RM);\n    }\n    return x;\n}\n/*\n * Return a string representing the value of Big x in normal or exponential notation.\n * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\n *\n * x {Big}\n * id? {number} Caller id.\n *         1 toExponential\n *         2 toFixed\n *         3 toPrecision\n *         4 valueOf\n * n? {number|undefined} Caller's argument.\n * k? {number|undefined}\n */\nfunction stringify(x, id, n, k) {\n    var e, s, Big = x.constructor, z = !x.c[0];\n    if (n !== UNDEFINED) {\n        if (n !== ~~n || n < (id == 3) || n > MAX_DP) {\n            throw Error(id == 3 ? INVALID + 'precision' : INVALID_DP);\n        }\n        x = new Big(x);\n        // The index of the digit that may be rounded up.\n        n = k - x.e;\n        // Round?\n        if (x.c.length > ++k)\n            round(x, n, Big.RM);\n        // toFixed: recalculate k as x.e may have changed if value rounded up.\n        if (id == 2)\n            k = x.e + n + 1;\n        // Append zeros?\n        for (; x.c.length < k;)\n            x.c.push(0);\n    }\n    e = x.e;\n    s = x.c.join('');\n    n = s.length;\n    // Exponential notation?\n    if (id != 2 && (id == 1 || id == 3 && k <= e || e <= Big.NE || e >= Big.PE)) {\n        s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\n        // Normal notation.\n    }\n    else if (e < 0) {\n        for (; ++e;)\n            s = '0' + s;\n        s = '0.' + s;\n    }\n    else if (e > 0) {\n        if (++e > n)\n            for (e -= n; e--;)\n                s += '0';\n        else if (e < n)\n            s = s.slice(0, e) + '.' + s.slice(e);\n    }\n    else if (n > 1) {\n        s = s.charAt(0) + '.' + s.slice(1);\n    }\n    return x.s < 0 && (!z || id == 4) ? '-' + s : s;\n}\n// Prototype/instance methods\n/*\n * Return a new Big whose value is the absolute value of this Big.\n */\nP.abs = function () {\n    var x = new this.constructor(this);\n    x.s = 1;\n    return x;\n};\n/*\n * Return 1 if the value of this Big is greater than the value of Big y,\n *       -1 if the value of this Big is less than the value of Big y, or\n *        0 if they have the same value.\n*/\nP.cmp = function (y) {\n    var isneg, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, i = x.s, j = y.s, k = x.e, l = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0])\n        return !xc[0] ? !yc[0] ? 0 : -j : i;\n    // Signs differ?\n    if (i != j)\n        return i;\n    isneg = i < 0;\n    // Compare exponents.\n    if (k != l)\n        return k > l ^ isneg ? 1 : -1;\n    // Compare digit by digit.\n    j = Math.max(xc.length, yc.length);\n    for (i = 0; i < j; i++) {\n        k = i < xc.length ? xc[i] : 0;\n        l = i < yc.length ? yc[i] : 0;\n        if (k != l)\n            return k > l ^ isneg ? 1 : -1;\n    }\n    return 0;\n    // old version (doesn't compare well trailing zeroes, e.g. 1.0 with 1.00)\n    // j = (k = xc.length) < (l = yc.length) ? k : l;\n    // // Compare digit by digit.\n    // for (i = -1; ++i < j;) {\n    //   if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\n    // }\n    // // Compare lengths.\n    // return k == l ? 0 : k > l ^ isneg ? 1 : -1;\n};\n/*\n * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\n * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.div = function (y) {\n    var Big = this.constructor, x = new Big(this), y = new Big(y), a = x.c, // dividend\n    b = y.c, // divisor\n    k = x.s == y.s ? 1 : -1, dp = Big.DP;\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP)\n        throw Error(INVALID_DP);\n    // Divisor is zero?\n    if (!b[0])\n        throw Error(DIV_BY_ZERO);\n    // Dividend is 0? Return +-0.\n    if (!a[0])\n        return new Big(k * 0);\n    var bl, bt, n, cmp, ri, bz = b.slice(), ai = bl = b.length, al = a.length, r = a.slice(0, bl), // remainder\n    rl = r.length, q = y, // quotient\n    qc = q.c = [], qi = 0, d = dp + (q.e = x.e - y.e) + 1; // number of digits of the result\n    q.s = k;\n    k = d < 0 ? 0 : d;\n    // Create version of divisor with leading zero.\n    bz.unshift(0);\n    // Add zeros to make remainder as long as divisor.\n    for (; rl++ < bl;)\n        r.push(0);\n    do {\n        // n is how many times the divisor goes into current remainder.\n        for (n = 0; n < 10; n++) {\n            // Compare divisor and remainder.\n            if (bl != (rl = r.length)) {\n                cmp = bl > rl ? 1 : -1;\n            }\n            else {\n                for (ri = -1, cmp = 0; ++ri < bl;) {\n                    if (b[ri] != r[ri]) {\n                        cmp = b[ri] > r[ri] ? 1 : -1;\n                        break;\n                    }\n                }\n            }\n            // If divisor < remainder, subtract divisor from remainder.\n            if (cmp < 0) {\n                // Remainder can't be more than 1 digit longer than divisor.\n                // Equalise lengths using divisor with extra leading zero?\n                for (bt = rl == bl ? b : bz; rl;) {\n                    if (r[--rl] < bt[rl]) {\n                        ri = rl;\n                        for (; ri && !r[--ri];)\n                            r[ri] = 9;\n                        --r[ri];\n                        r[rl] += 10;\n                    }\n                    r[rl] -= bt[rl];\n                }\n                for (; !r[0];)\n                    r.shift();\n            }\n            else {\n                break;\n            }\n        }\n        // Add the digit n to the result array.\n        qc[qi++] = cmp ? n : ++n;\n        // Update the remainder.\n        if (r[0] && cmp)\n            r[rl] = a[ai] || 0;\n        else\n            r = [a[ai]];\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\n    if (!qc[0] && qi != 1) {\n        // There can't be more than one zero.\n        qc.shift();\n        q.e--;\n    }\n    // Round?\n    if (qi > d)\n        round(q, dp, Big.RM, r[0] !== UNDEFINED);\n    return q;\n};\n/*\n * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\n */\nP.eq = function (y) {\n    return !this.cmp(y);\n};\n/*\n * Return true if the value of this Big is greater than the value of Big y, otherwise return\n * false.\n */\nP.gt = function (y) {\n    return this.cmp(y) > 0;\n};\n/*\n * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\n * return false.\n */\nP.gte = function (y) {\n    return this.cmp(y) > -1;\n};\n/*\n * Return true if the value of this Big is less than the value of Big y, otherwise return false.\n */\nP.lt = function (y) {\n    return this.cmp(y) < 0;\n};\n/*\n * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\n * return false.\n */\nP.lte = function (y) {\n    return this.cmp(y) < 1;\n};\n/*\n * Return a new Big whose value is the value of this Big minus the value of Big y.\n */\nP.minus = P.sub = function (y) {\n    var i, j, t, xlty, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    // Signs differ?\n    if (a != b) {\n        y.s = -b;\n        return x.plus(y);\n    }\n    var xc = x.c.slice(), xe = x.e, yc = y.c, ye = y.e;\n    // Either zero?\n    if (!xc[0] || !yc[0]) {\n        // y is non-zero? x is non-zero? Or both are zero.\n        return yc[0] ? (y.s = -b, y) : new Big(xc[0] ? x : 0);\n    }\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\n    if (a = xe - ye) {\n        if (xlty = a < 0) {\n            a = -a;\n            t = xc;\n        }\n        else {\n            ye = xe;\n            t = yc;\n        }\n        t.reverse();\n        for (b = a; b--;)\n            t.push(0);\n        t.reverse();\n    }\n    else {\n        // Exponents equal. Check digit by digit.\n        j = ((xlty = xc.length < yc.length) ? xc : yc).length;\n        for (a = b = 0; b < j; b++) {\n            if (xc[b] != yc[b]) {\n                xlty = xc[b] < yc[b];\n                break;\n            }\n        }\n    }\n    // x < y? Point xc to the array of the bigger number.\n    if (xlty) {\n        t = xc;\n        xc = yc;\n        yc = t;\n        y.s = -y.s;\n    }\n    /*\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\n     * needs to start at yc.length.\n     */\n    if ((b = (j = yc.length) - (i = xc.length)) > 0)\n        for (; b--;)\n            xc[i++] = 0;\n    // Subtract yc from xc.\n    for (b = i; j > a;) {\n        if (xc[--j] < yc[j]) {\n            for (i = j; i && !xc[--i];)\n                xc[i] = 9;\n            --xc[i];\n            xc[j] += 10;\n        }\n        xc[j] -= yc[j];\n    }\n    // Remove trailing zeros.\n    for (; xc[--b] === 0;)\n        xc.pop();\n    // Remove leading zeros and adjust exponent accordingly.\n    for (; xc[0] === 0;) {\n        xc.shift();\n        --ye;\n    }\n    if (!xc[0]) {\n        // n - n = +0\n        y.s = 1;\n        // Result must be zero.\n        xc = [ye = 0];\n    }\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a new Big whose value is the value of this Big modulo the value of Big y.\n */\nP.mod = function (y) {\n    var ygtx, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    if (!y.c[0])\n        throw Error(DIV_BY_ZERO);\n    x.s = y.s = 1;\n    ygtx = y.cmp(x) == 1;\n    x.s = a;\n    y.s = b;\n    if (ygtx)\n        return new Big(x);\n    a = Big.DP;\n    b = Big.RM;\n    Big.DP = Big.RM = 0;\n    x = x.div(y);\n    Big.DP = a;\n    Big.RM = b;\n    return this.minus(x.times(y));\n};\n/*\n * Return a new Big whose value is the value of this Big plus the value of Big y.\n */\nP.plus = P.add = function (y) {\n    var t, Big = this.constructor, x = new Big(this), y = new Big(y), a = x.s, b = y.s;\n    // Signs differ?\n    if (a != b) {\n        y.s = -b;\n        return x.minus(y);\n    }\n    var xe = x.e, xc = x.c, ye = y.e, yc = y.c;\n    // Either zero? y is non-zero? x is non-zero? Or both are zero.\n    if (!xc[0] || !yc[0])\n        return yc[0] ? y : new Big(xc[0] ? x : a * 0);\n    xc = xc.slice();\n    // Prepend zeros to equalise exponents.\n    // Note: reverse faster than unshifts.\n    if (a = xe - ye) {\n        if (a > 0) {\n            ye = xe;\n            t = yc;\n        }\n        else {\n            a = -a;\n            t = xc;\n        }\n        t.reverse();\n        for (; a--;)\n            t.push(0);\n        t.reverse();\n    }\n    // Point xc to the longer array.\n    if (xc.length - yc.length < 0) {\n        t = yc;\n        yc = xc;\n        xc = t;\n    }\n    a = yc.length;\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\n    for (b = 0; a; xc[a] %= 10)\n        b = (xc[--a] = xc[a] + yc[a] + b) / 10 | 0;\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\n    if (b) {\n        xc.unshift(b);\n        ++ye;\n    }\n    // Remove trailing zeros.\n    for (a = xc.length; xc[--a] === 0;)\n        xc.pop();\n    y.c = xc;\n    y.e = ye;\n    return y;\n};\n/*\n * Return a Big whose value is the value of this Big raised to the power n.\n * If n is negative, round to a maximum of Big.DP decimal places using rounding\n * mode Big.RM.\n *\n * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\n */\nP.pow = function (n) {\n    var Big = this.constructor, x = new Big(this), y = new Big(1), one = new Big(1), isneg = n < 0;\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER)\n        throw Error(INVALID + 'exponent');\n    if (isneg)\n        n = -n;\n    for (;;) {\n        if (n & 1)\n            y = y.times(x);\n        n >>= 1;\n        if (!n)\n            break;\n        x = x.times(x);\n    }\n    return isneg ? one.div(y) : y;\n};\n/*\n * Return a new Big whose value is the value of this Big rounded using rounding mode rm\n * to a maximum of dp decimal places, or, if dp is negative, to an integer which is a\n * multiple of 10**-dp.\n * If dp is not specified, round to 0 decimal places.\n * If rm is not specified, use Big.RM.\n *\n * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\n * rm? 0, 1, 2 or 3 (ROUND_DOWN, ROUND_HALF_UP, ROUND_HALF_EVEN, ROUND_UP)\n */\nP.round = function (dp, rm) {\n    var Big = this.constructor;\n    if (dp === UNDEFINED)\n        dp = 0;\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP)\n        throw Error(INVALID_DP);\n    return round(new Big(this), dp, rm === UNDEFINED ? Big.RM : rm);\n};\n/*\n * Return a new Big whose value is the square root of the value of this Big, rounded, if\n * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\n */\nP.sqrt = function () {\n    var r, c, t, Big = this.constructor, x = new Big(this), s = x.s, e = x.e, half = new Big(0.5);\n    // Zero?\n    if (!x.c[0])\n        return new Big(x);\n    // Negative?\n    if (s < 0)\n        throw Error(NAME + 'No square root');\n    // Estimate.\n    s = Math.sqrt(x + '');\n    // Math.sqrt underflow/overflow?\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\n    if (s === 0 || s === 1 / 0) {\n        c = x.c.join('');\n        if (!(c.length + e & 1))\n            c += '0';\n        s = Math.sqrt(c);\n        e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\n        r = new Big((s == 1 / 0 ? '1e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\n    }\n    else {\n        r = new Big(s);\n    }\n    e = r.e + (Big.DP += 4);\n    // Newton-Raphson iteration.\n    do {\n        t = r;\n        r = half.times(t.plus(x.div(t)));\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\n    return round(r, Big.DP -= 4, Big.RM);\n};\n/*\n * Return a new Big whose value is the value of this Big times the value of Big y.\n */\nP.times = P.mul = function (y) {\n    var c, Big = this.constructor, x = new Big(this), y = new Big(y), xc = x.c, yc = y.c, a = xc.length, b = yc.length, i = x.e, j = y.e;\n    // Determine sign of result.\n    y.s = x.s == y.s ? 1 : -1;\n    // Return signed 0 if either 0.\n    if (!xc[0] || !yc[0])\n        return new Big(y.s * 0);\n    // Initialise exponent of result as x.e + y.e.\n    y.e = i + j;\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\n    if (a < b) {\n        c = xc;\n        xc = yc;\n        yc = c;\n        j = a;\n        a = b;\n        b = j;\n    }\n    // Initialise coefficient array of result with zeros.\n    for (c = new Array(j = a + b); j--;)\n        c[j] = 0;\n    // Multiply.\n    // i is initially xc.length.\n    for (i = b; i--;) {\n        b = 0;\n        // a is yc.length.\n        for (j = a + i; j > i;) {\n            // Current sum of products at this digit position, plus carry.\n            b = c[j] + yc[i] * xc[j - i - 1] + b;\n            c[j--] = b % 10;\n            // carry\n            b = b / 10 | 0;\n        }\n        c[j] = (c[j] + b) % 10;\n    }\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\n    if (b)\n        ++y.e;\n    else\n        c.shift();\n    // Remove trailing zeros.\n    for (i = c.length; !c[--i];)\n        c.pop();\n    y.c = c;\n    return y;\n};\n/*\n * Return a string representing the value of this Big in exponential notation to dp fixed decimal\n * places and rounded using Big.RM.\n *\n * dp? {number} Integer, 0 to MAX_DP inclusive.\n */\nP.toExponential = function (dp) {\n    return stringify(this, 1, dp, dp);\n};\n/*\n * Return a string representing the value of this Big in normal notation to dp fixed decimal\n * places and rounded using Big.RM.\n *\n * dp? {number} Integer, 0 to MAX_DP inclusive.\n *\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\n */\nP.toFixed = function (dp) {\n    return stringify(this, 2, dp, this.e + dp);\n};\n/*\n * Return a string representing the value of this Big rounded to sd significant digits using\n * Big.RM. Use exponential notation if sd is less than the number of digits necessary to represent\n * the integer part of the value in normal notation.\n *\n * sd {number} Integer, 1 to MAX_DP inclusive.\n */\nP.toPrecision = function (sd) {\n    return stringify(this, 3, sd, sd - 1);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Omit the sign for negative zero.\n */\nP.toString = function () {\n    return stringify(this);\n};\n/*\n * Return a string representing the value of this Big.\n * Return exponential notation if this Big has a positive exponent equal to or greater than\n * Big.PE, or a negative exponent equal to or less than Big.NE.\n * Include the sign for negative zero.\n */\nP.valueOf = P.toJSON = function () {\n    return stringify(this, 4);\n};\n// Export\nexport var Big = _Big_();\nexport default Big;\n//# sourceMappingURL=big.js.map","import Decimal from \"./lib/big\";\nexport default Decimal;\nexport const get_Zero = new Decimal(0);\nexport const get_One = new Decimal(1);\nexport const get_MinusOne = new Decimal(-1);\nexport const get_MaxValue = new Decimal(\"79228162514264337593543950335\");\nexport const get_MinValue = new Decimal(\"-79228162514264337593543950335\");\nexport function compare(x, y) {\n    return x.cmp(y);\n}\nexport function equals(x, y) {\n    return !x.cmp(y);\n}\nexport function abs(x) {\n    return x.abs();\n}\nexport function round(x, digits = 0) {\n    return x.round(digits, 2 /* ROUND_HALF_EVEN */);\n}\nexport function truncate(x) {\n    return x.round(0, 0 /* ROUND_DOWN */);\n}\nexport function ceiling(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 3 /* ROUND_UP */ : 0 /* ROUND_DOWN */);\n}\nexport function floor(x) {\n    return x.round(0, x.cmp(0) >= 0 ? 0 /* ROUND_DOWN */ : 3 /* ROUND_UP */);\n}\nexport function pow(x, n) {\n    return x.pow(n);\n}\nexport function sqrt(x) {\n    return x.sqrt();\n}\nexport function op_Addition(x, y) {\n    return x.add(y);\n}\nexport function op_Subtraction(x, y) {\n    return x.sub(y);\n}\nexport function op_Multiply(x, y) {\n    return x.mul(y);\n}\nexport function op_Division(x, y) {\n    return x.div(y);\n}\nexport function op_Modulus(x, y) {\n    return x.mod(y);\n}\nexport function op_UnaryNegation(x) {\n    const x2 = new Decimal(x);\n    x2.s = -x2.s || 0;\n    return x2;\n}\nexport const add = op_Addition;\nexport const subtract = op_Subtraction;\nexport const multiply = op_Multiply;\nexport const divide = op_Division;\nexport const remainder = op_Modulus;\nexport const negate = op_UnaryNegation;\nexport function toString(x) {\n    return x.toString();\n}\nexport function tryParse(str) {\n    try {\n        return [true, new Decimal(str.trim())];\n    }\n    catch (_a) {\n        return [false, get_Zero];\n    }\n}\nexport function parse(str) {\n    const [ok, value] = tryParse(str);\n    if (ok) {\n        return value;\n    }\n    else {\n        throw new Error(\"Input string was not in a correct format.\");\n    }\n}\nexport function toNumber(x) {\n    return +x;\n}\nfunction decimalToHex(dec, bitSize) {\n    const hex = new Uint8Array(bitSize / 4 | 0);\n    let hexCount = 1;\n    for (let d = 0; d < dec.length; d++) {\n        let value = dec[d];\n        for (let i = 0; i < hexCount; i++) {\n            const digit = hex[i] * 10 + value | 0;\n            hex[i] = digit & 0xF;\n            value = digit >> 4;\n        }\n        if (value !== 0) {\n            hex[hexCount++] = value;\n        }\n    }\n    return hex.slice(0, hexCount); // digits in reverse order\n}\nfunction hexToDecimal(hex, bitSize) {\n    const dec = new Uint8Array(bitSize * 301 / 1000 + 1 | 0);\n    let decCount = 1;\n    for (let d = hex.length - 1; d >= 0; d--) {\n        let carry = hex[d];\n        for (let i = 0; i < decCount; i++) {\n            const val = dec[i] * 16 + carry | 0;\n            dec[i] = (val % 10) | 0;\n            carry = (val / 10) | 0;\n        }\n        while (carry > 0) {\n            dec[decCount++] = (carry % 10) | 0;\n            carry = (carry / 10) | 0;\n        }\n    }\n    return dec.slice(0, decCount); // digits in reverse order\n}\nfunction setInt32Bits(hexDigits, bits, offset) {\n    for (let i = 0; i < 8; i++) {\n        hexDigits[offset + i] = (bits >> (i * 4)) & 0xF;\n    }\n}\nfunction getInt32Bits(hexDigits, offset) {\n    let bits = 0;\n    for (let i = 0; i < 8; i++) {\n        bits = bits | (hexDigits[offset + i] << (i * 4));\n    }\n    return bits;\n}\nexport function fromIntArray(bits) {\n    return fromInts(bits[0], bits[1], bits[2], bits[3]);\n}\nexport function fromInts(low, mid, high, signExp) {\n    const isNegative = signExp < 0;\n    const scale = (signExp >> 16) & 0x7F;\n    return fromParts(low, mid, high, isNegative, scale);\n}\nexport function fromParts(low, mid, high, isNegative, scale) {\n    const bitSize = 96;\n    const hexDigits = new Uint8Array(bitSize / 4);\n    setInt32Bits(hexDigits, low, 0);\n    setInt32Bits(hexDigits, mid, 8);\n    setInt32Bits(hexDigits, high, 16);\n    const decDigits = hexToDecimal(hexDigits, bitSize);\n    scale = scale & 0x7F;\n    const big = new Decimal(0);\n    big.c = Array.from(decDigits.reverse());\n    big.e = decDigits.length - scale - 1;\n    big.s = isNegative ? -1 : 1;\n    const d = new Decimal(big);\n    return d;\n}\nexport function getBits(d) {\n    const bitSize = 96;\n    const decDigits = Uint8Array.from(d.c);\n    const hexDigits = decimalToHex(decDigits, bitSize);\n    const low = getInt32Bits(hexDigits, 0);\n    const mid = getInt32Bits(hexDigits, 8);\n    const high = getInt32Bits(hexDigits, 16);\n    const decStr = d.toString();\n    const dotPos = decStr.indexOf(\".\");\n    const scale = dotPos < 0 ? 0 : decStr.length - dotPos - 1;\n    const signExp = ((scale & 0x7F) << 16) | (d.s < 0 ? 0x80000000 : 0);\n    return [low, mid, high, signExp];\n}\nexport function makeRangeStepFunction(step, last) {\n    const stepComparedWithZero = step.cmp(get_Zero);\n    if (stepComparedWithZero === 0) {\n        throw new Error(\"The step of a range cannot be zero\");\n    }\n    const stepGreaterThanZero = stepComparedWithZero > 0;\n    return (x) => {\n        const comparedWithLast = x.cmp(last);\n        if ((stepGreaterThanZero && comparedWithLast <= 0)\n            || (!stepGreaterThanZero && comparedWithLast >= 0)) {\n            return [x, op_Addition(x, step)];\n        }\n        else {\n            return null;\n        }\n    };\n}\n//# sourceMappingURL=Decimal.js.map","export var NumberStyles;\n(function (NumberStyles) {\n    // None = 0x00000000,\n    // AllowLeadingWhite = 0x00000001,\n    // AllowTrailingWhite = 0x00000002,\n    // AllowLeadingSign = 0x00000004,\n    // AllowTrailingSign = 0x00000008,\n    // AllowParentheses = 0x00000010,\n    // AllowDecimalPoint = 0x00000020,\n    // AllowThousands = 0x00000040,\n    // AllowExponent = 0x00000080,\n    // AllowCurrencySymbol = 0x00000100,\n    NumberStyles[NumberStyles[\"AllowHexSpecifier\"] = 512] = \"AllowHexSpecifier\";\n    // Integer = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign,\n    // HexNumber = AllowLeadingWhite | AllowTrailingWhite | AllowHexSpecifier,\n    // Number = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //          AllowTrailingSign | AllowDecimalPoint | AllowThousands,\n    // Float = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign |\n    //         AllowDecimalPoint | AllowExponent,\n    // Currency = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //            AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol,\n    // Any = AllowLeadingWhite | AllowTrailingWhite | AllowLeadingSign | AllowTrailingSign |\n    //       AllowParentheses | AllowDecimalPoint | AllowThousands | AllowCurrencySymbol | AllowExponent,\n})(NumberStyles || (NumberStyles = {}));\nfunction validResponse(regexMatch, radix) {\n    const [_all, sign, prefix, digits] = regexMatch;\n    return {\n        sign: sign || \"\",\n        prefix: prefix || \"\",\n        digits,\n        radix,\n    };\n}\nfunction getRange(unsigned, bitsize) {\n    switch (bitsize) {\n        case 8: return unsigned ? [0, 255] : [-128, 127];\n        case 16: return unsigned ? [0, 65535] : [-32768, 32767];\n        case 32: return unsigned ? [0, 4294967295] : [-2147483648, 2147483647];\n        default: throw new Error(\"Invalid bit size.\");\n    }\n}\nfunction getInvalidDigits(radix) {\n    switch (radix) {\n        case 2: return /[^0-1]/;\n        case 8: return /[^0-7]/;\n        case 10: return /[^0-9]/;\n        case 16: return /[^0-9a-fA-F]/;\n        default:\n            throw new Error(\"Invalid Base.\");\n    }\n}\nfunction getRadix(prefix, style) {\n    if (style & NumberStyles.AllowHexSpecifier) {\n        return 16;\n    }\n    else {\n        switch (prefix) {\n            case \"0b\":\n            case \"0B\": return 2;\n            case \"0o\":\n            case \"0O\": return 8;\n            case \"0x\":\n            case \"0X\": return 16;\n            default: return 10;\n        }\n    }\n}\nexport function isValid(str, style, radix) {\n    const integerRegex = /^\\s*([\\+\\-])?(0[xXoObB])?([0-9a-fA-F]+)\\s*$/;\n    const res = integerRegex.exec(str.replace(/_/g, \"\"));\n    if (res != null) {\n        const [_all, sign, prefix, digits] = res;\n        radix = radix || getRadix(prefix, style);\n        const invalidDigits = getInvalidDigits(radix);\n        if (!invalidDigits.test(digits)) {\n            return validResponse(res, radix);\n        }\n    }\n    return null;\n}\nexport function parse(str, style, unsigned, bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        let v = Number.parseInt(res.sign + res.digits, res.radix);\n        if (!Number.isNaN(v)) {\n            const [umin, umax] = getRange(true, bitsize);\n            if (!unsigned && res.radix !== 10 && v >= umin && v <= umax) {\n                v = v << (32 - bitsize) >> (32 - bitsize);\n            }\n            const [min, max] = getRange(unsigned, bitsize);\n            if (v >= min && v <= max) {\n                return v;\n            }\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize) {\n    try {\n        const v = parse(str, style, unsigned, bitsize);\n        return [true, v];\n    }\n    catch (_a) {\n        // supress error\n    }\n    return [false, 0];\n}\nexport function op_UnaryNegation_Int8(x) {\n    return x === -128 ? x : -x;\n}\nexport function op_UnaryNegation_Int16(x) {\n    return x === -32768 ? x : -x;\n}\nexport function op_UnaryNegation_Int32(x) {\n    return x === -2147483648 ? x : -x;\n}\n//# sourceMappingURL=Int32.js.map","// Adapted from: https://github.com/dcodeIO/long.js/blob/master/src/long.js\n// Apache License 2.0: https://github.com/dcodeIO/long.js/blob/master/LICENSE\nexport default Long;\n/**\n * wasm optimizations, to do native i64 multiplication and divide\n */\nvar wasm = null;\ntry {\n    wasm = new WebAssembly.Instance(new WebAssembly.Module(new Uint8Array([\n        0, 97, 115, 109, 1, 0, 0, 0, 1, 13, 2, 96, 0, 1, 127, 96, 4, 127, 127, 127, 127, 1, 127, 3, 7, 6, 0, 1, 1, 1, 1, 1, 6, 6, 1, 127, 1, 65, 0, 11, 7, 50, 6, 3, 109, 117, 108, 0, 1, 5, 100, 105, 118, 95, 115, 0, 2, 5, 100, 105, 118, 95, 117, 0, 3, 5, 114, 101, 109, 95, 115, 0, 4, 5, 114, 101, 109, 95, 117, 0, 5, 8, 103, 101, 116, 95, 104, 105, 103, 104, 0, 0, 10, 191, 1, 6, 4, 0, 35, 0, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 126, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 127, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 128, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 129, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11, 36, 1, 1, 126, 32, 0, 173, 32, 1, 173, 66, 32, 134, 132, 32, 2, 173, 32, 3, 173, 66, 32, 134, 132, 130, 34, 4, 66, 32, 135, 167, 36, 0, 32, 4, 167, 11\n    ])), {}).exports;\n}\ncatch (e) {\n    // no wasm support :(\n}\n/**\n * Constructs a 64 bit two's-complement integer, given its low and high 32 bit values as *signed* integers.\n *  See the from* functions below for more convenient ways of constructing Longs.\n * @exports Long\n * @class A Long class for representing a 64 bit two's-complement integer value.\n * @param {number} low The low (signed) 32 bits of the long\n * @param {number} high The high (signed) 32 bits of the long\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @constructor\n */\nexport function Long(low, high, unsigned) {\n    /**\n     * The low 32 bits as a signed value.\n     * @type {number}\n     */\n    this.low = low | 0;\n    /**\n     * The high 32 bits as a signed value.\n     * @type {number}\n     */\n    this.high = high | 0;\n    /**\n     * Whether unsigned or not.\n     * @type {boolean}\n     */\n    this.unsigned = !!unsigned;\n}\nLong.prototype.GetHashCode = function () {\n    let h1 = this.unsigned ? 1 : 0;\n    h1 = ((h1 << 5) + h1) ^ this.high;\n    h1 = ((h1 << 5) + h1) ^ this.low;\n    return h1;\n};\nLong.prototype.Equals = function (x) { return equals(this, x); };\nLong.prototype.CompareTo = function (x) { return compare(this, x); };\nLong.prototype.toString = function (radix) { return toString(this, radix); };\nLong.prototype.toJSON = function () { return toString(this); };\n// The internal representation of a long is the two given signed, 32-bit values.\n// We use 32-bit pieces because these are the size of integers on which\n// Javascript performs bit-operations.  For operations like addition and\n// multiplication, we split each number into 16 bit pieces, which can easily be\n// multiplied within Javascript's floating-point representation without overflow\n// or change in sign.\n//\n// In the algorithms below, we frequently reduce the negative case to the\n// positive case by negating the input(s) and then post-processing the result.\n// Note that we must ALWAYS check specially whether those values are MIN_VALUE\n// (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as\n// a positive number, it overflows back into a negative).  Not handling this\n// case would often result in infinite recursion.\n//\n// Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the from*\n// methods on which they depend.\n/**\n * An indicator used to reliably determine if an object is a Long or not.\n * @type {boolean}\n * @const\n * @private\n */\nLong.prototype.__isLong__;\nObject.defineProperty(Long.prototype, \"__isLong__\", { value: true });\n/**\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n * @inner\n */\nexport function isLong(obj) {\n    return (obj && obj[\"__isLong__\"]) === true;\n}\n/**\n * Tests if the specified object is a Long.\n * @function\n * @param {*} obj Object\n * @returns {boolean}\n */\n// Long.isLong = isLong;\n/**\n * A cache of the Long representations of small integer values.\n * @type {!Object}\n * @inner\n */\nvar INT_CACHE = {};\n/**\n * A cache of the Long representations of small unsigned integer values.\n * @type {!Object}\n * @inner\n */\nvar UINT_CACHE = {};\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromInt(value, unsigned) {\n    var obj, cachedObj, cache;\n    if (unsigned) {\n        value >>>= 0;\n        if (cache = (0 <= value && value < 256)) {\n            cachedObj = UINT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, (value | 0) < 0 ? -1 : 0, true);\n        if (cache)\n            UINT_CACHE[value] = obj;\n        return obj;\n    }\n    else {\n        value |= 0;\n        if (cache = (-128 <= value && value < 128)) {\n            cachedObj = INT_CACHE[value];\n            if (cachedObj)\n                return cachedObj;\n        }\n        obj = fromBits(value, value < 0 ? -1 : 0, false);\n        if (cache)\n            INT_CACHE[value] = obj;\n        return obj;\n    }\n}\n/**\n * Returns a Long representing the given 32 bit integer value.\n * @function\n * @param {number} value The 32 bit integer in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromInt = fromInt;\n/**\n * @param {number} value\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromNumber(value, unsigned) {\n    if (isNaN(value))\n        return unsigned ? UZERO : ZERO;\n    if (unsigned) {\n        if (value < 0)\n            return UZERO;\n        if (value >= TWO_PWR_64_DBL)\n            return MAX_UNSIGNED_VALUE;\n    }\n    else {\n        if (value <= -TWO_PWR_63_DBL)\n            return MIN_VALUE;\n        if (value + 1 >= TWO_PWR_63_DBL)\n            return MAX_VALUE;\n    }\n    if (value < 0)\n        return negate(fromNumber(-value, unsigned));\n    return fromBits((value % TWO_PWR_32_DBL) | 0, (value / TWO_PWR_32_DBL) | 0, unsigned);\n}\n/**\n * Returns a Long representing the given value, provided that it is a finite number. Otherwise, zero is returned.\n * @function\n * @param {number} value The number in question\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromNumber = fromNumber;\n/**\n * @param {number} lowBits\n * @param {number} highBits\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromBits(lowBits, highBits, unsigned) {\n    return new Long(lowBits, highBits, unsigned);\n}\n/**\n * Returns a Long representing the 64 bit integer that comes by concatenating the given low and high bits. Each is\n *  assumed to use 32 bits.\n * @function\n * @param {number} lowBits The low 32 bits\n * @param {number} highBits The high 32 bits\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromBits = fromBits;\n/**\n * @function\n * @param {number} base\n * @param {number} exponent\n * @returns {number}\n * @inner\n */\nvar pow_dbl = Math.pow; // Used 4 times (4*8 to 15+4)\n/**\n * @param {string} str\n * @param {(boolean|number)=} unsigned\n * @param {number=} radix\n * @returns {!Long}\n * @inner\n */\nexport function fromString(str, unsigned, radix) {\n    if (str.length === 0)\n        throw Error('empty string');\n    if (str === \"NaN\" || str === \"Infinity\" || str === \"+Infinity\" || str === \"-Infinity\")\n        return ZERO;\n    if (typeof unsigned === 'number') {\n        // For goog.math.long compatibility\n        radix = unsigned,\n            unsigned = false;\n    }\n    else {\n        unsigned = !!unsigned;\n    }\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    var p = str.indexOf('-');\n    if (p > 0)\n        throw Error('interior hyphen');\n    else if (p === 0) {\n        return negate(fromString(str.substring(1), unsigned, radix));\n    }\n    // Do several (8) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 8));\n    var result = ZERO;\n    for (var i = 0; i < str.length; i += 8) {\n        var size = Math.min(8, str.length - i), value = parseInt(str.substring(i, i + size), radix);\n        if (size < 8) {\n            var power = fromNumber(pow_dbl(radix, size));\n            result = add(multiply(result, power), fromNumber(value));\n        }\n        else {\n            result = multiply(result, radixToPower);\n            result = add(result, fromNumber(value));\n        }\n    }\n    result.unsigned = unsigned;\n    return result;\n}\n/**\n * Returns a Long representation of the given string, written using the specified radix.\n * @function\n * @param {string} str The textual representation of the Long\n * @param {(boolean|number)=} unsigned Whether unsigned or not, defaults to signed\n * @param {number=} radix The radix in which the text is written (2-36), defaults to 10\n * @returns {!Long} The corresponding Long value\n */\n// Long.fromString = fromString;\n/**\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val\n * @param {boolean=} unsigned\n * @returns {!Long}\n * @inner\n */\nexport function fromValue(val, unsigned) {\n    if (typeof val === 'number')\n        return fromNumber(val, unsigned);\n    if (typeof val === 'string')\n        return fromString(val, unsigned);\n    // Throws for non-objects, converts non-instanceof Long:\n    return fromBits(val.low, val.high, typeof unsigned === 'boolean' ? unsigned : val.unsigned);\n}\n/**\n * Converts the specified value to a Long using the appropriate from* function for its type.\n * @function\n * @param {!Long|number|string|!{low: number, high: number, unsigned: boolean}} val Value\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {!Long}\n */\n// Long.fromValue = fromValue;\n// NOTE: the compiler should inline these constant values below and then remove these variables, so there should be\n// no runtime penalty for these.\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_16_DBL = 1 << 16;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_24_DBL = 1 << 24;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_32_DBL = TWO_PWR_16_DBL * TWO_PWR_16_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_64_DBL = TWO_PWR_32_DBL * TWO_PWR_32_DBL;\n/**\n * @type {number}\n * @const\n * @inner\n */\nvar TWO_PWR_63_DBL = TWO_PWR_64_DBL / 2;\n/**\n * @type {!Long}\n * @const\n * @inner\n */\nvar TWO_PWR_24 = fromInt(TWO_PWR_24_DBL);\n/**\n * @type {!Long}\n * @inner\n */\nexport var ZERO = fromInt(0);\n/**\n * Signed zero.\n * @type {!Long}\n */\n// Long.ZERO = ZERO;\n/**\n * @type {!Long}\n * @inner\n */\nexport var UZERO = fromInt(0, true);\n/**\n * Unsigned zero.\n * @type {!Long}\n */\n// Long.UZERO = UZERO;\n/**\n * @type {!Long}\n * @inner\n */\nexport var ONE = fromInt(1);\n/**\n * Signed one.\n * @type {!Long}\n */\n// Long.ONE = ONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var UONE = fromInt(1, true);\n/**\n * Unsigned one.\n * @type {!Long}\n */\n// Long.UONE = UONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var NEG_ONE = fromInt(-1);\n/**\n * Signed negative one.\n * @type {!Long}\n */\n// Long.NEG_ONE = NEG_ONE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_VALUE = fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0, false);\n/**\n * Maximum signed value.\n * @type {!Long}\n */\n// Long.MAX_VALUE = MAX_VALUE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MAX_UNSIGNED_VALUE = fromBits(0xFFFFFFFF | 0, 0xFFFFFFFF | 0, true);\n/**\n * Maximum unsigned value.\n * @type {!Long}\n */\n// Long.MAX_UNSIGNED_VALUE = MAX_UNSIGNED_VALUE;\n/**\n * @type {!Long}\n * @inner\n */\nexport var MIN_VALUE = fromBits(0, 0x80000000 | 0, false);\n/**\n * Minimum signed value.\n * @type {!Long}\n */\n// Long.MIN_VALUE = MIN_VALUE;\n/**\n * @alias Long.prototype\n * @inner\n */\n// var LongPrototype = Long.prototype;\n/**\n * Converts the Long to a 32 bit integer, assuming it is a 32 bit integer.\n * @this {!Long}\n * @returns {number}\n */\nexport function toInt($this) {\n    return $this.unsigned ? $this.low >>> 0 : $this.low;\n}\n;\n/**\n * Converts the Long to a the nearest floating-point representation of this value (double, 53 bit mantissa).\n * @this {!Long}\n * @returns {number}\n */\nexport function toNumber($this) {\n    if ($this.unsigned)\n        return (($this.high >>> 0) * TWO_PWR_32_DBL) + ($this.low >>> 0);\n    return $this.high * TWO_PWR_32_DBL + ($this.low >>> 0);\n}\n;\n/**\n * Converts the Long to a string written in the specified radix.\n * @this {!Long}\n * @param {number=} radix Radix (2-36), defaults to 10\n * @returns {string}\n * @override\n * @throws {RangeError} If `radix` is out of range\n */\nexport function toString($this, radix) {\n    radix = radix || 10;\n    if (radix < 2 || 36 < radix)\n        throw RangeError('radix');\n    if (isZero($this))\n        return '0';\n    if (isNegative($this)) { // Unsigned Longs are never negative\n        if (equals($this, MIN_VALUE)) {\n            // We need to change the Long value before it can be negated, so we remove\n            // the bottom-most digit in this base and then recurse to do the rest.\n            var radixLong = fromNumber(radix), div = divide($this, radixLong), rem1 = subtract(multiply(div, radixLong), $this);\n            return toString(div, radix) + toInt(rem1).toString(radix);\n        }\n        else\n            return '-' + toString(negate($this), radix);\n    }\n    // Do several (6) digits each time through the loop, so as to\n    // minimize the calls to the very expensive emulated div.\n    var radixToPower = fromNumber(pow_dbl(radix, 6), $this.unsigned), rem = $this;\n    var result = '';\n    while (true) {\n        var remDiv = divide(rem, radixToPower), intval = toInt(subtract(rem, multiply(remDiv, radixToPower))) >>> 0, digits = intval.toString(radix);\n        rem = remDiv;\n        if (isZero(rem))\n            return digits + result;\n        else {\n            while (digits.length < 6)\n                digits = '0' + digits;\n            result = '' + digits + result;\n        }\n    }\n}\n;\n/**\n * Gets the high 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed high bits\n */\nexport function getHighBits($this) {\n    return $this.high;\n}\n;\n/**\n * Gets the high 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned high bits\n */\nexport function getHighBitsUnsigned($this) {\n    return $this.high >>> 0;\n}\n;\n/**\n * Gets the low 32 bits as a signed integer.\n * @this {!Long}\n * @returns {number} Signed low bits\n */\nexport function getLowBits($this) {\n    return $this.low;\n}\n;\n/**\n * Gets the low 32 bits as an unsigned integer.\n * @this {!Long}\n * @returns {number} Unsigned low bits\n */\nexport function getLowBitsUnsigned($this) {\n    return $this.low >>> 0;\n}\n;\n/**\n * Gets the number of bits needed to represent the absolute value of this Long.\n * @this {!Long}\n * @returns {number}\n */\nexport function getNumBitsAbs($this) {\n    if (isNegative($this)) // Unsigned Longs are never negative\n        return equals($this, MIN_VALUE) ? 64 : getNumBitsAbs(negate($this));\n    var val = $this.high != 0 ? $this.high : $this.low;\n    for (var bit = 31; bit > 0; bit--)\n        if ((val & (1 << bit)) != 0)\n            break;\n    return $this.high != 0 ? bit + 33 : bit + 1;\n}\n;\n/**\n * Tests if this Long's value equals zero.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isZero($this) {\n    return $this.high === 0 && $this.low === 0;\n}\n;\n/**\n * Tests if this Long's value equals zero. This is an alias of {@link Long#isZero}.\n * @returns {boolean}\n */\n// LongPrototype.eqz = LongPrototype.isZero;\n/**\n * Tests if this Long's value is negative.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isNegative($this) {\n    return !$this.unsigned && $this.high < 0;\n}\n;\n/**\n * Tests if this Long's value is positive.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isPositive($this) {\n    return $this.unsigned || $this.high >= 0;\n}\n;\n/**\n * Tests if this Long's value is odd.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isOdd($this) {\n    return ($this.low & 1) === 1;\n}\n;\n/**\n * Tests if this Long's value is even.\n * @this {!Long}\n * @returns {boolean}\n */\nexport function isEven($this) {\n    return ($this.low & 1) === 0;\n}\n;\n/**\n * Tests if this Long's value equals the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function equals($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if ($this.unsigned !== other.unsigned && ($this.high >>> 31) === 1 && (other.high >>> 31) === 1)\n        return false;\n    return $this.high === other.high && $this.low === other.low;\n}\n;\n/**\n * Tests if this Long's value equals the specified's. This is an alias of {@link Long#equals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.eq = LongPrototype.equals;\n/**\n * Tests if this Long's value differs from the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function notEquals($this, other) {\n    return !equals($this, /* validates */ other);\n}\n;\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.neq = LongPrototype.notEquals;\n/**\n * Tests if this Long's value differs from the specified's. This is an alias of {@link Long#notEquals}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.ne = LongPrototype.notEquals;\n/**\n * Tests if this Long's value is less than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThan($this, other) {\n    return compare($this, /* validates */ other) < 0;\n}\n;\n/**\n * Tests if this Long's value is less than the specified's. This is an alias of {@link Long#lessThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.lt = LongPrototype.lessThan;\n/**\n * Tests if this Long's value is less than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function lessThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) <= 0;\n}\n;\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.lte = LongPrototype.lessThanOrEqual;\n/**\n * Tests if this Long's value is less than or equal the specified's. This is an alias of {@link Long#lessThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.le = LongPrototype.lessThanOrEqual;\n/**\n * Tests if this Long's value is greater than the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThan($this, other) {\n    return compare($this, /* validates */ other) > 0;\n}\n;\n/**\n * Tests if this Long's value is greater than the specified's. This is an alias of {@link Long#greaterThan}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.gt = LongPrototype.greaterThan;\n/**\n * Tests if this Long's value is greater than or equal the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\nexport function greaterThanOrEqual($this, other) {\n    return compare($this, /* validates */ other) >= 0;\n}\n;\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.gte = LongPrototype.greaterThanOrEqual;\n/**\n * Tests if this Long's value is greater than or equal the specified's. This is an alias of {@link Long#greaterThanOrEqual}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {boolean}\n */\n// LongPrototype.ge = LongPrototype.greaterThanOrEqual;\n/**\n * Compares this Long's value with the specified's.\n * @this {!Long}\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\nexport function compare($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    if (equals($this, other))\n        return 0;\n    var thisNeg = isNegative($this), otherNeg = isNegative(other);\n    if (thisNeg && !otherNeg)\n        return -1;\n    if (!thisNeg && otherNeg)\n        return 1;\n    // At this point the sign bits are the same\n    if (!$this.unsigned)\n        return isNegative(subtract($this, other)) ? -1 : 1;\n    // Both are positive if at least one is unsigned\n    return (other.high >>> 0) > ($this.high >>> 0) || (other.high === $this.high && (other.low >>> 0) > ($this.low >>> 0)) ? -1 : 1;\n}\n;\n/**\n * Compares this Long's value with the specified's. This is an alias of {@link Long#compare}.\n * @function\n * @param {!Long|number|string} other Other value\n * @returns {number} 0 if they are the same, 1 if the this is greater and -1\n *  if the given one is greater\n */\n// LongPrototype.comp = LongPrototype.compare;\n/**\n * Negates this Long's value.\n * @this {!Long}\n * @returns {!Long} Negated Long\n */\nexport function negate($this) {\n    if (!$this.unsigned && equals($this, MIN_VALUE))\n        return MIN_VALUE;\n    return add(not($this), ONE);\n}\n;\n/**\n * Negates this Long's value. This is an alias of {@link Long#negate}.\n * @function\n * @returns {!Long} Negated Long\n */\n// LongPrototype.neg = LongPrototype.negate;\n/**\n * Returns the sum of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} addend Addend\n * @returns {!Long} Sum\n */\nexport function add($this, addend) {\n    if (!isLong(addend))\n        addend = fromValue(addend);\n    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = addend.high >>> 16;\n    var b32 = addend.high & 0xFFFF;\n    var b16 = addend.low >>> 16;\n    var b00 = addend.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 + b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 + b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 + b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 + b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the difference of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\nexport function subtract($this, subtrahend) {\n    if (!isLong(subtrahend))\n        subtrahend = fromValue(subtrahend);\n    return add($this, negate(subtrahend));\n}\n;\n/**\n * Returns the difference of this and the specified Long. This is an alias of {@link Long#subtract}.\n * @function\n * @param {!Long|number|string} subtrahend Subtrahend\n * @returns {!Long} Difference\n */\n// LongPrototype.sub = LongPrototype.subtract;\n/**\n * Returns the product of this and the specified Long.\n * @this {!Long}\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\nexport function multiply($this, multiplier) {\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    if (!isLong(multiplier))\n        multiplier = fromValue(multiplier);\n    // use wasm support if present\n    if (wasm) {\n        var low = wasm.mul($this.low, $this.high, multiplier.low, multiplier.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero(multiplier))\n        return $this.unsigned ? UZERO : ZERO;\n    if (equals($this, MIN_VALUE))\n        return isOdd(multiplier) ? MIN_VALUE : ZERO;\n    if (equals(multiplier, MIN_VALUE))\n        return isOdd($this) ? MIN_VALUE : ZERO;\n    if (isNegative($this)) {\n        if (isNegative(multiplier))\n            return multiply(negate($this), negate(multiplier));\n        else\n            return negate(multiply(negate($this), multiplier));\n    }\n    else if (isNegative(multiplier))\n        return negate(multiply($this, negate(multiplier)));\n    // If both longs are small, use float multiplication\n    if (lessThan($this, TWO_PWR_24) && lessThan(multiplier, TWO_PWR_24))\n        return fromNumber(toNumber($this) * toNumber(multiplier), $this.unsigned);\n    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.\n    // We can skip products that would overflow.\n    var a48 = $this.high >>> 16;\n    var a32 = $this.high & 0xFFFF;\n    var a16 = $this.low >>> 16;\n    var a00 = $this.low & 0xFFFF;\n    var b48 = multiplier.high >>> 16;\n    var b32 = multiplier.high & 0xFFFF;\n    var b16 = multiplier.low >>> 16;\n    var b00 = multiplier.low & 0xFFFF;\n    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;\n    c00 += a00 * b00;\n    c16 += c00 >>> 16;\n    c00 &= 0xFFFF;\n    c16 += a16 * b00;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c16 += a00 * b16;\n    c32 += c16 >>> 16;\n    c16 &= 0xFFFF;\n    c32 += a32 * b00;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a16 * b16;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c32 += a00 * b32;\n    c48 += c32 >>> 16;\n    c32 &= 0xFFFF;\n    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;\n    c48 &= 0xFFFF;\n    return fromBits((c16 << 16) | c00, (c48 << 16) | c32, $this.unsigned);\n}\n;\n/**\n * Returns the product of this and the specified Long. This is an alias of {@link Long#multiply}.\n * @function\n * @param {!Long|number|string} multiplier Multiplier\n * @returns {!Long} Product\n */\n// LongPrototype.mul = LongPrototype.multiply;\n/**\n * Returns this Long divided by the specified. The result is signed if this Long is signed or\n *  unsigned if this Long is unsigned.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\nexport function divide($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    if (isZero(divisor))\n        throw Error('division by zero');\n    // use wasm support if present\n    if (wasm) {\n        // guard against signed division overflow: the largest\n        // negative number / -1 would be 1 larger than the largest\n        // positive number, due to two's complement.\n        if (!$this.unsigned &&\n            $this.high === -0x80000000 &&\n            divisor.low === -1 && divisor.high === -1) {\n            // be consistent with non-wasm code path\n            return $this;\n        }\n        var low = ($this.unsigned ? wasm.div_u : wasm.div_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    if (isZero($this))\n        return $this.unsigned ? UZERO : ZERO;\n    var approx, rem, res;\n    if (!$this.unsigned) {\n        // This section is only relevant for signed longs and is derived from the\n        // closure library as a whole.\n        if (equals($this, MIN_VALUE)) {\n            if (equals(divisor, ONE) || equals(divisor, NEG_ONE))\n                return MIN_VALUE; // recall that -MIN_VALUE == MIN_VALUE\n            else if (equals(divisor, MIN_VALUE))\n                return ONE;\n            else {\n                // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.\n                var halfThis = shiftRight($this, 1);\n                approx = shiftLeft(divide(halfThis, divisor), 1);\n                if (equals(approx, ZERO)) {\n                    return isNegative(divisor) ? ONE : NEG_ONE;\n                }\n                else {\n                    rem = subtract($this, multiply(divisor, approx));\n                    res = add(approx, divide(rem, divisor));\n                    return res;\n                }\n            }\n        }\n        else if (equals(divisor, MIN_VALUE))\n            return $this.unsigned ? UZERO : ZERO;\n        if (isNegative($this)) {\n            if (isNegative(divisor))\n                return divide(negate($this), negate(divisor));\n            return negate(divide(negate($this), divisor));\n        }\n        else if (isNegative(divisor))\n            return negate(divide($this, negate(divisor)));\n        res = ZERO;\n    }\n    else {\n        // The algorithm below has not been made for unsigned longs. It's therefore\n        // required to take special care of the MSB prior to running it.\n        if (!divisor.unsigned)\n            divisor = toUnsigned(divisor);\n        if (greaterThan(divisor, $this))\n            return UZERO;\n        if (greaterThan(divisor, shiftRightUnsigned($this, 1))) // 15 >>> 1 = 7 ; with divisor = 8 ; true\n            return UONE;\n        res = UZERO;\n    }\n    // Repeat the following until the remainder is less than other:  find a\n    // floating-point that approximates remainder / other *from below*, add this\n    // into the result, and subtract it from the remainder.  It is critical that\n    // the approximate value is less than or equal to the real value so that the\n    // remainder never becomes negative.\n    rem = $this;\n    while (greaterThanOrEqual(rem, divisor)) {\n        // Approximate the result of division. This may be a little greater or\n        // smaller than the actual value.\n        approx = Math.max(1, Math.floor(toNumber(rem) / toNumber(divisor)));\n        // We will tweak the approximate result by changing it in the 48-th digit or\n        // the smallest non-fractional digit, whichever is larger.\n        var log2 = Math.ceil(Math.log(approx) / Math.LN2), delta = (log2 <= 48) ? 1 : pow_dbl(2, log2 - 48), \n        // Decrease the approximation until it is smaller than the remainder.  Note\n        // that if it is too large, the product overflows and is negative.\n        approxRes = fromNumber(approx), approxRem = multiply(approxRes, divisor);\n        while (isNegative(approxRem) || greaterThan(approxRem, rem)) {\n            approx -= delta;\n            approxRes = fromNumber(approx, $this.unsigned);\n            approxRem = multiply(approxRes, divisor);\n        }\n        // We know the answer can't be zero... and actually, zero would cause\n        // infinite recursion since we would make no progress.\n        if (isZero(approxRes))\n            approxRes = ONE;\n        res = add(res, approxRes);\n        rem = subtract(rem, approxRem);\n    }\n    return res;\n}\n;\n/**\n * Returns this Long divided by the specified. This is an alias of {@link Long#divide}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Quotient\n */\n// LongPrototype.div = LongPrototype.divide;\n/**\n * Returns this Long modulo the specified.\n * @this {!Long}\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\nexport function modulo($this, divisor) {\n    if (!isLong(divisor))\n        divisor = fromValue(divisor);\n    // use wasm support if present\n    if (wasm) {\n        var low = ($this.unsigned ? wasm.rem_u : wasm.rem_s)($this.low, $this.high, divisor.low, divisor.high);\n        return fromBits(low, wasm.get_high(), $this.unsigned);\n    }\n    return subtract($this, multiply(divide($this, divisor), divisor));\n}\n;\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\n// LongPrototype.mod = LongPrototype.modulo;\n/**\n * Returns this Long modulo the specified. This is an alias of {@link Long#modulo}.\n * @function\n * @param {!Long|number|string} divisor Divisor\n * @returns {!Long} Remainder\n */\n// LongPrototype.rem = LongPrototype.modulo;\n/**\n * Returns the bitwise NOT of this Long.\n * @this {!Long}\n * @returns {!Long}\n */\nexport function not($this) {\n    return fromBits(~$this.low, ~$this.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise AND of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function and($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low & other.low, $this.high & other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise OR of this Long and the specified.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function or($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low | other.low, $this.high | other.high, $this.unsigned);\n}\n;\n/**\n * Returns the bitwise XOR of this Long and the given one.\n * @this {!Long}\n * @param {!Long|number|string} other Other Long\n * @returns {!Long}\n */\nexport function xor($this, other) {\n    if (!isLong(other))\n        other = fromValue(other);\n    return fromBits($this.low ^ other.low, $this.high ^ other.high, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftLeft($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits($this.low << numBits, ($this.high << numBits) | ($this.low >>> (32 - numBits)), $this.unsigned);\n    else\n        return fromBits(0, $this.low << (numBits - 32), $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits shifted to the left by the given amount. This is an alias of {@link Long#shiftLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shl = LongPrototype.shiftLeft;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftRight($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    if ((numBits &= 63) === 0)\n        return $this;\n    else if (numBits < 32)\n        return fromBits(($this.low >>> numBits) | ($this.high << (32 - numBits)), $this.high >> numBits, $this.unsigned);\n    else\n        return fromBits($this.high >> (numBits - 32), $this.high >= 0 ? 0 : -1, $this.unsigned);\n}\n;\n/**\n * Returns this Long with bits arithmetically shifted to the right by the given amount. This is an alias of {@link Long#shiftRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shr = LongPrototype.shiftRight;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\nexport function shiftRightUnsigned($this, numBits) {\n    if (isLong(numBits))\n        numBits = toInt(numBits);\n    numBits &= 63;\n    if (numBits === 0)\n        return $this;\n    else {\n        var high = $this.high;\n        if (numBits < 32) {\n            var low = $this.low;\n            return fromBits((low >>> numBits) | (high << (32 - numBits)), high >>> numBits, $this.unsigned);\n        }\n        else if (numBits === 32)\n            return fromBits(high, 0, $this.unsigned);\n        else\n            return fromBits(high >>> (numBits - 32), 0, $this.unsigned);\n    }\n}\n;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shru = LongPrototype.shiftRightUnsigned;\n/**\n * Returns this Long with bits logically shifted to the right by the given amount. This is an alias of {@link Long#shiftRightUnsigned}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Shifted Long\n */\n// LongPrototype.shr_u = LongPrototype.shiftRightUnsigned;\n/**\n * Returns this Long with bits rotated to the left by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nexport const rotateLeft = function rotateLeft(numBits) {\n    var b;\n    if (isLong(numBits))\n        numBits = numBits.toInt();\n    if ((numBits &= 63) === 0)\n        return this;\n    if (numBits === 32)\n        return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n        b = (32 - numBits);\n        return fromBits(((this.low << numBits) | (this.high >>> b)), ((this.high << numBits) | (this.low >>> b)), this.unsigned);\n    }\n    numBits -= 32;\n    b = (32 - numBits);\n    return fromBits(((this.high << numBits) | (this.low >>> b)), ((this.low << numBits) | (this.high >>> b)), this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the left by the given amount. This is an alias of {@link Long#rotateLeft}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\n// LongPrototype.rotl = LongPrototype.rotateLeft;\n/**\n * Returns this Long with bits rotated to the right by the given amount.\n * @this {!Long}\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\nexport const rotateRight = function rotateRight(numBits) {\n    var b;\n    if (isLong(numBits))\n        numBits = numBits.toInt();\n    if ((numBits &= 63) === 0)\n        return this;\n    if (numBits === 32)\n        return fromBits(this.high, this.low, this.unsigned);\n    if (numBits < 32) {\n        b = (32 - numBits);\n        return fromBits(((this.high << b) | (this.low >>> numBits)), ((this.low << b) | (this.high >>> numBits)), this.unsigned);\n    }\n    numBits -= 32;\n    b = (32 - numBits);\n    return fromBits(((this.low << b) | (this.high >>> numBits)), ((this.high << b) | (this.low >>> numBits)), this.unsigned);\n};\n/**\n * Returns this Long with bits rotated to the right by the given amount. This is an alias of {@link Long#rotateRight}.\n * @function\n * @param {number|!Long} numBits Number of bits\n * @returns {!Long} Rotated Long\n */\n// LongPrototype.rotr = LongPrototype.rotateRight;\n/**\n * Converts this Long to signed.\n * @this {!Long}\n * @returns {!Long} Signed long\n */\nexport function toSigned($this) {\n    if (!$this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, false);\n}\n;\n/**\n * Converts this Long to unsigned.\n * @this {!Long}\n * @returns {!Long} Unsigned long\n */\nexport function toUnsigned($this) {\n    if ($this.unsigned)\n        return $this;\n    return fromBits($this.low, $this.high, true);\n}\n;\n/**\n * Converts this Long to its byte representation.\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @this {!Long}\n * @returns {!Array.<number>} Byte representation\n */\nexport function toBytes($this, le) {\n    return le ? toBytesLE($this) : toBytesBE($this);\n}\n;\n/**\n * Converts this Long to its little endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Little endian byte representation\n */\nexport function toBytesLE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        lo & 0xff,\n        lo >>> 8 & 0xff,\n        lo >>> 16 & 0xff,\n        lo >>> 24,\n        hi & 0xff,\n        hi >>> 8 & 0xff,\n        hi >>> 16 & 0xff,\n        hi >>> 24\n    ];\n}\n;\n/**\n * Converts this Long to its big endian byte representation.\n * @this {!Long}\n * @returns {!Array.<number>} Big endian byte representation\n */\nexport function toBytesBE($this) {\n    var hi = $this.high, lo = $this.low;\n    return [\n        hi >>> 24,\n        hi >>> 16 & 0xff,\n        hi >>> 8 & 0xff,\n        hi & 0xff,\n        lo >>> 24,\n        lo >>> 16 & 0xff,\n        lo >>> 8 & 0xff,\n        lo & 0xff\n    ];\n}\n;\n/**\n * Creates a Long from its byte representation.\n * @param {!Array.<number>} bytes Byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @param {boolean=} le Whether little or big endian, defaults to big endian\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytes(bytes, unsigned, le) {\n    return le ? fromBytesLE(bytes, unsigned) : fromBytesBE(bytes, unsigned);\n}\n;\n/**\n * Creates a Long from its little endian byte representation.\n * @param {!Array.<number>} bytes Little endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesLE(bytes, unsigned) {\n    return new Long(bytes[0] |\n        bytes[1] << 8 |\n        bytes[2] << 16 |\n        bytes[3] << 24, bytes[4] |\n        bytes[5] << 8 |\n        bytes[6] << 16 |\n        bytes[7] << 24, unsigned);\n}\n;\n/**\n * Creates a Long from its big endian byte representation.\n * @param {!Array.<number>} bytes Big endian byte representation\n * @param {boolean=} unsigned Whether unsigned or not, defaults to signed\n * @returns {Long} The corresponding Long value\n */\nexport function fromBytesBE(bytes, unsigned) {\n    return new Long(bytes[4] << 24 |\n        bytes[5] << 16 |\n        bytes[6] << 8 |\n        bytes[7], bytes[0] << 24 |\n        bytes[1] << 16 |\n        bytes[2] << 8 |\n        bytes[3], unsigned);\n}\n;\n//# sourceMappingURL=long.js.map","import { isValid } from \"./Int32\";\nimport * as Long from \"./lib/long\";\nexport default Long.Long;\nexport const get_Zero = Long.ZERO;\nexport const get_One = Long.ONE;\nexport const op_Addition = Long.add;\nexport const op_Subtraction = Long.subtract;\nexport const op_Multiply = Long.multiply;\nexport const op_Division = Long.divide;\nexport const op_Modulus = Long.modulo;\nexport const op_UnaryNegation = Long.negate;\nexport const op_LeftShift = Long.shiftLeft;\nexport const op_RightShift = Long.shiftRight;\nexport const op_RightShiftUnsigned = Long.shiftRightUnsigned;\nexport const op_BitwiseAnd = Long.and;\nexport const op_BitwiseOr = Long.or;\nexport const op_ExclusiveOr = Long.xor;\nexport const op_LogicalNot = Long.not;\nexport const op_LessThan = Long.lessThan;\nexport const op_LessThanOrEqual = Long.lessThanOrEqual;\nexport const op_GreaterThan = Long.greaterThan;\nexport const op_GreaterThanOrEqual = Long.greaterThanOrEqual;\nexport const op_Equality = Long.equals;\nexport const op_Inequality = Long.notEquals;\nexport const equals = Long.equals;\nexport const compare = Long.compare;\nexport const fromInt = Long.fromInt;\nexport const fromBits = Long.fromBits;\nexport const fromBytes = Long.fromBytes;\nexport const fromNumber = Long.fromNumber;\nexport const fromString = Long.fromString;\nexport const fromValue = Long.fromValue;\nexport const toInt = Long.toInt;\nexport const toBytes = Long.toBytes;\nexport const toNumber = Long.toNumber;\nexport const toString = Long.toString;\nexport const getLowBits = Long.getLowBits;\nexport const getHighBits = Long.getHighBits;\nexport const getLowBitsUnsigned = Long.getLowBitsUnsigned;\nexport const getHighBitsUnsigned = Long.getHighBitsUnsigned;\nfunction getMaxValue(unsigned, radix, isNegative) {\n    switch (radix) {\n        case 2: return unsigned ?\n            \"1111111111111111111111111111111111111111111111111111111111111111\" :\n            (isNegative ? \"1000000000000000000000000000000000000000000000000000000000000000\"\n                : \"111111111111111111111111111111111111111111111111111111111111111\");\n        case 8: return unsigned ?\n            \"1777777777777777777777\" :\n            (isNegative ? \"1000000000000000000000\" : \"777777777777777777777\");\n        case 10: return unsigned ?\n            \"18446744073709551615\" :\n            (isNegative ? \"9223372036854775808\" : \"9223372036854775807\");\n        case 16: return unsigned ?\n            \"FFFFFFFFFFFFFFFF\" :\n            (isNegative ? \"8000000000000000\" : \"7FFFFFFFFFFFFFFF\");\n        default: throw new Error(\"Invalid radix.\");\n    }\n}\nexport function abs(x) {\n    if (!x.unsigned && Long.isNegative(x)) {\n        return op_UnaryNegation(x);\n    }\n    else {\n        return x;\n    }\n}\nexport function fromInteger(value, unsigned, kind) {\n    let x = value;\n    let xh = 0;\n    switch (kind) {\n        case 0:\n            x = value << 24 >> 24;\n            xh = x;\n            break;\n        case 4:\n            x = value << 24 >>> 24;\n            break;\n        case 1:\n            x = value << 16 >> 16;\n            xh = x;\n            break;\n        case 5:\n            x = value << 16 >>> 16;\n            break;\n        case 2:\n            x = value >> 0;\n            xh = x;\n            break;\n        case 6:\n            x = value >>> 0;\n            break;\n    }\n    return Long.fromBits(x, xh >> 31, unsigned);\n}\nexport function parse(str, style, unsigned, bitsize, radix) {\n    const res = isValid(str, style, radix);\n    if (res != null) {\n        const lessOrEqual = (x, y) => {\n            const len = Math.max(x.length, y.length);\n            return x.padStart(len, \"0\") <= y.padStart(len, \"0\");\n        };\n        const isNegative = res.sign === \"-\";\n        const maxValue = getMaxValue(unsigned || res.radix !== 10, res.radix, isNegative);\n        if (lessOrEqual(res.digits.toUpperCase(), maxValue)) {\n            str = isNegative ? res.sign + res.digits : res.digits;\n            return Long.fromString(str, unsigned, res.radix);\n        }\n    }\n    throw new Error(\"Input string was not in a correct format.\");\n}\nexport function tryParse(str, style, unsigned, bitsize) {\n    try {\n        const v = parse(str, style, unsigned, bitsize);\n        return [true, v];\n    }\n    catch (_a) {\n        // supress error\n    }\n    return [false, Long.ZERO];\n}\nexport function unixEpochMillisecondsToTicks(ms, offset) {\n    return op_Multiply(op_Addition(op_Addition(Long.fromNumber(ms), 62135596800000), offset), 10000);\n}\nexport function ticksToUnixEpochMilliseconds(ticks) {\n    return Long.toNumber(op_Subtraction(op_Division(ticks, 10000), 62135596800000));\n}\nexport function makeRangeStepFunction(step, last, unsigned) {\n    const stepComparedWithZero = Long.compare(step, unsigned ? Long.UZERO : Long.ZERO);\n    if (stepComparedWithZero === 0) {\n        throw new Error(\"The step of a range cannot be zero\");\n    }\n    const stepGreaterThanZero = stepComparedWithZero > 0;\n    return (x) => {\n        const comparedWithLast = Long.compare(x, last);\n        if ((stepGreaterThanZero && comparedWithLast <= 0)\n            || (!stepGreaterThanZero && comparedWithLast >= 0)) {\n            return [x, op_Addition(x, step)];\n        }\n        else {\n            return null;\n        }\n    };\n}\n//# sourceMappingURL=Long.js.map","import { declare, Union } from \"./Types\";\nimport { compare, equals, structuralHash } from \"./Util\";\n// Using a class here for better compatibility with TS files importing Some\nexport class Some {\n    constructor(value) {\n        this.value = value;\n    }\n    // Don't add \"Some\" for consistency with erased options\n    toString() {\n        return String(this.value);\n    }\n    toJSON() {\n        return this.value;\n    }\n    GetHashCode() {\n        return structuralHash(this.value);\n    }\n    Equals(other) {\n        if (other == null) {\n            return false;\n        }\n        else {\n            return equals(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n    CompareTo(other) {\n        if (other == null) {\n            return 1;\n        }\n        else {\n            return compare(this.value, other instanceof Some ? other.value : other);\n        }\n    }\n}\nexport function some(x) {\n    x = (x === undefined) ? null : x;\n    return x == null || x instanceof Some ? new Some(x) : x;\n}\nexport function value(x, acceptNull) {\n    if (x == null) {\n        if (!acceptNull) {\n            throw new Error(\"Option has no value\");\n        }\n        return null;\n    }\n    else {\n        return x instanceof Some ? x.value : x;\n    }\n}\nexport function defaultArg(arg, defaultValue, f) {\n    return arg == null ? defaultValue : (f != null ? f(value(arg)) : value(arg));\n}\nexport function defaultArgWith(arg, defThunk) {\n    return arg == null ? defThunk() : value(arg);\n}\nexport function filter(predicate, arg) {\n    return arg != null ? (!predicate(value(arg)) ? null : arg) : arg;\n}\nexport function map(predicate, ...args) {\n    return args.every((x) => x != null) ? predicate.apply(null, args) : null;\n}\n// CHOICE\nexport const Choice = declare(function Choice(tag, name, field) {\n    Union.call(this, tag, name, field);\n}, Union);\nexport function choice1(x) {\n    return new Choice(0, \"Choice1Of2\", x);\n}\nexport function choice2(x) {\n    return new Choice(1, \"Choice2Of2\", x);\n}\nexport function tryValueIfChoice1(x) {\n    return x.tag === 0 ? some(x.fields[0]) : null;\n}\nexport function tryValueIfChoice2(x) {\n    return x.tag === 1 ? some(x.fields[0]) : null;\n}\n// RESULT\nexport const Result = declare(function Result(tag, name, field) {\n    Union.call(this, tag, name, field);\n}, Union);\nexport function ok(x) {\n    return new Result(0, \"Ok\", x);\n}\nexport function error(x) {\n    return new Result(1, \"Error\", x);\n}\nexport function mapOk(f, result) {\n    return result.tag === 0 ? ok(f(result.fields[0])) : result;\n}\nexport function mapError(f, result) {\n    return result.tag === 1 ? error(f(result.fields[0])) : result;\n}\nexport function bindOk(f, result) {\n    return result.tag === 0 ? f(result.fields[0]) : result;\n}\n//# sourceMappingURL=Option.js.map","import { makeRangeStepFunction as makeDecimalRangeStepFunction } from \"./Decimal\";\nimport { makeRangeStepFunction as makeLongRangeStepFunction } from \"./Long\";\nimport { some, value } from \"./Option\";\nimport { compare, equals } from \"./Util\";\nexport class Enumerator {\n    constructor(iter) {\n        this.iter = iter;\n    }\n    MoveNext() {\n        const cur = this.iter.next();\n        this.current = cur.value;\n        return !cur.done;\n    }\n    get Current() {\n        return this.current;\n    }\n    Reset() {\n        throw new Error(\"JS iterators cannot be reset\");\n    }\n    Dispose() {\n        return;\n    }\n}\nexport function getEnumerator(o) {\n    return new Enumerator(o[Symbol.iterator]());\n}\nexport function toIterator(en) {\n    return {\n        next() {\n            return en.MoveNext()\n                ? { done: false, value: en.Current }\n                : { done: true, value: null };\n        },\n    };\n}\n// export function toIterable<T>(en: IEnumerable<T>): Iterable<T> {\n//   return {\n//     [Symbol.iterator]() {\n//       return toIterator(en.GetEnumerator());\n//     },\n//   };\n// }\nfunction __failIfNone(res) {\n    if (res == null) {\n        throw new Error(\"Seq did not contain any matching element\");\n    }\n    return value(res);\n}\nexport function ofArray(xs) {\n    return delay(() => unfold((i) => i < xs.length ? [xs[i], i + 1] : null, 0));\n}\nexport function allPairs(xs, ys) {\n    let firstEl = true;\n    const ysCache = [];\n    return collect((x) => {\n        if (firstEl) {\n            firstEl = false;\n            return map((y) => {\n                ysCache.push(y);\n                return [x, y];\n            }, ys);\n        }\n        else {\n            return ysCache.map((y) => [x, y]);\n            // return map(function (i) {\n            //     return [x, ysCache[i]];\n            // }, rangeNumber(0, 1, ysCache.length - 1));\n        }\n    }, xs);\n}\nexport function append(xs, ys) {\n    return delay(() => {\n        let firstDone = false;\n        const i = xs[Symbol.iterator]();\n        let iters = [i, null];\n        return unfold(() => {\n            let cur;\n            if (!firstDone) {\n                cur = iters[0].next();\n                if (!cur.done) {\n                    return [cur.value, iters];\n                }\n                else {\n                    firstDone = true;\n                    iters = [null, ys[Symbol.iterator]()];\n                }\n            }\n            cur = iters[1].next();\n            return !cur.done ? [cur.value, iters] : null;\n        }, iters);\n    });\n}\nexport function average(xs, averager) {\n    let count = 0;\n    const total = fold((acc, x) => {\n        count++;\n        return averager.Add(acc, x);\n    }, averager.GetZero(), xs);\n    return averager.DivideByInt(total, count);\n}\nexport function averageBy(f, xs, averager) {\n    let count = 0;\n    const total = fold((acc, x) => {\n        count++;\n        return averager.Add(acc, f(x));\n    }, averager.GetZero(), xs);\n    return averager.DivideByInt(total, count);\n}\nexport function concat(xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        let output = { value: null };\n        return unfold((innerIter) => {\n            let hasFinished = false;\n            while (!hasFinished) {\n                if (innerIter == null) {\n                    const cur = iter.next();\n                    if (!cur.done) {\n                        innerIter = cur.value[Symbol.iterator]();\n                    }\n                    else {\n                        hasFinished = true;\n                    }\n                }\n                else {\n                    const cur = innerIter.next();\n                    if (!cur.done) {\n                        output = { value: cur.value };\n                        hasFinished = true;\n                    }\n                    else {\n                        innerIter = null;\n                    }\n                }\n            }\n            return innerIter != null && output != null ? [output.value, innerIter] : null;\n        }, null);\n    });\n}\nexport function collect(f, xs) {\n    return concat(map(f, xs));\n}\nexport function choose(f, xs) {\n    return delay(() => unfold((iter) => {\n        let cur = iter.next();\n        while (!cur.done) {\n            const y = f(cur.value);\n            if (y != null) {\n                return [value(y), iter];\n            }\n            cur = iter.next();\n        }\n        return null;\n    }, xs[Symbol.iterator]()));\n}\nexport function compareWith(f, xs, ys) {\n    const nonZero = tryFind((i) => i !== 0, map2((x, y) => f(x, y), xs, ys));\n    return nonZero != null ? value(nonZero) : length(xs) - length(ys);\n}\nexport function delay(f) {\n    return {\n        [Symbol.iterator]: () => f()[Symbol.iterator](),\n    };\n}\nexport function empty() {\n    return unfold(() => void 0);\n}\nexport function enumerateFromFunctions(factory, moveNext, current) {\n    return delay(() => unfold((e) => moveNext(e) ? [current(e), e] : null, factory()));\n}\nexport function enumerateWhile(cond, xs) {\n    return concat(unfold(() => cond() ? [xs, true] : null));\n}\nexport function enumerateThenFinally(xs, finalFn) {\n    return delay(() => {\n        let iter;\n        try {\n            iter = xs[Symbol.iterator]();\n        }\n        catch (err) {\n            return void 0;\n        }\n        finally {\n            finalFn();\n        }\n        return unfold((it) => {\n            try {\n                const cur = it.next();\n                return !cur.done ? [cur.value, it] : null;\n            }\n            catch (err) {\n                return void 0;\n            }\n            finally {\n                finalFn();\n            }\n        }, iter);\n    });\n}\nexport function enumerateUsing(disp, work) {\n    let isDisposed = false;\n    const disposeOnce = () => {\n        if (!isDisposed) {\n            isDisposed = true;\n            disp.Dispose();\n        }\n    };\n    try {\n        return enumerateThenFinally(work(disp), disposeOnce);\n    }\n    catch (err) {\n        return void 0;\n    }\n    finally {\n        disposeOnce();\n    }\n}\nexport function exactlyOne(xs) {\n    const iter = xs[Symbol.iterator]();\n    const fst = iter.next();\n    if (fst.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    const snd = iter.next();\n    if (!snd.done) {\n        throw new Error(\"Seq had multiple items\");\n    }\n    return fst.value;\n}\nexport function except(itemsToExclude, source) {\n    const exclusionItems = Array.from(itemsToExclude);\n    const testIsNotInExclusionItems = (element) => !exclusionItems.some((excludedItem) => equals(excludedItem, element));\n    return filter(testIsNotInExclusionItems, source);\n}\nexport function exists(f, xs) {\n    let cur;\n    for (const iter = xs[Symbol.iterator]();;) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function exists2(f, xs, ys) {\n    let cur1;\n    let cur2;\n    for (const iter1 = xs[Symbol.iterator](), iter2 = ys[Symbol.iterator]();;) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        if (f(cur1.value, cur2.value)) {\n            return true;\n        }\n    }\n    return false;\n}\nexport function forAll(f, xs) {\n    return !exists((x) => !f(x), xs);\n}\nexport function forAll2(f, xs, ys) {\n    return !exists2((x, y) => !f(x, y), xs, ys);\n}\nexport function contains(i, xs) {\n    return exists((x) => equals(x, i), xs);\n}\nexport function filter(f, xs) {\n    return delay(() => unfold((iter) => {\n        let cur = iter.next();\n        while (!cur.done) {\n            if (f(cur.value)) {\n                return [cur.value, iter];\n            }\n            cur = iter.next();\n        }\n        return null;\n    }, xs[Symbol.iterator]()));\n}\nexport function where(f, xs) {\n    return filter(f, xs);\n}\nexport function fold(f, acc, xs) {\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs)) {\n        return xs.reduce(f, acc);\n    }\n    else {\n        let cur;\n        for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n            cur = iter.next();\n            if (cur.done) {\n                break;\n            }\n            acc = f(acc, cur.value, i);\n        }\n        return acc;\n    }\n}\nexport function foldBack(f, xs, acc) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    for (let i = arr.length - 1; i >= 0; i--) {\n        acc = f(arr[i], acc, i);\n    }\n    return acc;\n}\nexport function fold2(f, acc, xs, ys) {\n    const iter1 = xs[Symbol.iterator]();\n    const iter2 = ys[Symbol.iterator]();\n    let cur1;\n    let cur2;\n    for (let i = 0;; i++) {\n        cur1 = iter1.next();\n        cur2 = iter2.next();\n        if (cur1.done || cur2.done) {\n            break;\n        }\n        acc = f(acc, cur1.value, cur2.value, i);\n    }\n    return acc;\n}\nexport function foldBack2(f, xs, ys, acc) {\n    const ar1 = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    const ar2 = Array.isArray(ys) || ArrayBuffer.isView(ys) ? ys : Array.from(ys);\n    for (let i = ar1.length - 1; i >= 0; i--) {\n        acc = f(ar1[i], ar2[i], acc, i);\n    }\n    return acc;\n}\nexport function tryHead(xs) {\n    const iter = xs[Symbol.iterator]();\n    const cur = iter.next();\n    return cur.done ? null : some(cur.value);\n}\nexport function head(xs) {\n    return __failIfNone(tryHead(xs));\n}\nexport function initialize(n, f) {\n    return delay(() => unfold((i) => i < n ? [f(i), i + 1] : null, 0));\n}\nexport function initializeInfinite(f) {\n    return delay(() => unfold((i) => [f(i), i + 1], 0));\n}\nexport function tryItem(i, xs) {\n    if (i < 0) {\n        return null;\n    }\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs)) {\n        return i < xs.length ? some(xs[i]) : null;\n    }\n    for (let j = 0, iter = xs[Symbol.iterator]();; j++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (j === i) {\n            return some(cur.value);\n        }\n    }\n    return null;\n}\nexport function item(i, xs) {\n    return __failIfNone(tryItem(i, xs));\n}\nexport function iterate(f, xs) {\n    fold((_, x) => f(x), null, xs);\n}\nexport function iterate2(f, xs, ys) {\n    fold2((_, x, y) => f(x, y), null, xs, ys);\n}\nexport function iterateIndexed(f, xs) {\n    fold((_, x, i) => f(i, x), null, xs);\n}\nexport function iterateIndexed2(f, xs, ys) {\n    fold2((_, x, y, i) => f(i, x, y), null, xs, ys);\n}\nexport function isEmpty(xs) {\n    const i = xs[Symbol.iterator]();\n    return i.next().done;\n}\nexport function tryLast(xs) {\n    return isEmpty(xs) ? null : some(reduce((_, x) => x, xs));\n}\nexport function last(xs) {\n    return __failIfNone(tryLast(xs));\n}\nexport function length(xs) {\n    return Array.isArray(xs) || ArrayBuffer.isView(xs)\n        ? xs.length\n        : fold((acc, x) => acc + 1, 0, xs);\n}\nexport function map(f, xs) {\n    return delay(() => unfold((iter) => {\n        const cur = iter.next();\n        return !cur.done ? [f(cur.value), iter] : null;\n    }, xs[Symbol.iterator]()));\n}\nexport function mapIndexed(f, xs) {\n    return delay(() => {\n        let i = 0;\n        return unfold((iter) => {\n            const cur = iter.next();\n            return !cur.done ? [f(i++, cur.value), iter] : null;\n        }, xs[Symbol.iterator]());\n    });\n}\nexport function indexed(xs) {\n    return mapIndexed((i, x) => [i, x], xs);\n}\nexport function map2(f, xs, ys) {\n    return delay(() => {\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            return !cur1.done && !cur2.done ? [f(cur1.value, cur2.value), null] : null;\n        });\n    });\n}\nexport function mapIndexed2(f, xs, ys) {\n    return delay(() => {\n        let i = 0;\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            return !cur1.done && !cur2.done ? [f(i++, cur1.value, cur2.value), null] : null;\n        });\n    });\n}\nexport function map3(f, xs, ys, zs) {\n    return delay(() => {\n        const iter1 = xs[Symbol.iterator]();\n        const iter2 = ys[Symbol.iterator]();\n        const iter3 = zs[Symbol.iterator]();\n        return unfold(() => {\n            const cur1 = iter1.next();\n            const cur2 = iter2.next();\n            const cur3 = iter3.next();\n            return !cur1.done && !cur2.done && !cur3.done ? [f(cur1.value, cur2.value, cur3.value), null] : null;\n        });\n    });\n}\nexport function mapFold(f, acc, xs, transform) {\n    const result = [];\n    let r;\n    let cur;\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        [r, acc] = f(acc, cur.value);\n        result.push(r);\n    }\n    return transform !== void 0 ? [transform(result), acc] : [result, acc];\n}\nexport function mapFoldBack(f, xs, acc, transform) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    const result = [];\n    let r;\n    for (let i = arr.length - 1; i >= 0; i--) {\n        [r, acc] = f(arr[i], acc);\n        result.push(r);\n    }\n    return transform !== void 0 ? [transform(result), acc] : [result, acc];\n}\nexport function max(xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(acc, x) === 1 ? acc : x, xs);\n}\nexport function maxBy(f, xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(f(acc), f(x)) === 1 ? acc : x, xs);\n}\nexport function min(xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(acc, x) === -1 ? acc : x, xs);\n}\nexport function minBy(f, xs, comparer) {\n    const compareFn = comparer != null ? comparer.Compare : compare;\n    return reduce((acc, x) => compareFn(f(acc), f(x)) === -1 ? acc : x, xs);\n}\nexport function pairwise(xs) {\n    return skip(2, scan((last, next) => [last[1], next], [0, 0], xs));\n}\nexport function rangeChar(first, last) {\n    return delay(() => unfold((x) => x <= last ? [x, String.fromCharCode(x.charCodeAt(0) + 1)] : null, first));\n}\nexport function rangeLong(first, step, last, unsigned) {\n    const stepFn = makeLongRangeStepFunction(step, last, unsigned);\n    return delay(() => unfold(stepFn, first));\n}\nexport function rangeDecimal(first, step, last) {\n    const stepFn = makeDecimalRangeStepFunction(step, last);\n    return delay(() => unfold(stepFn, first));\n}\nexport function rangeNumber(first, step, last) {\n    if (step === 0) {\n        throw new Error(\"Step cannot be 0\");\n    }\n    return delay(() => unfold((x) => step > 0 && x <= last || step < 0 && x >= last ? [x, x + step] : null, first));\n}\nexport function readOnly(xs) {\n    return map((x) => x, xs);\n}\nexport function reduce(f, xs) {\n    if (Array.isArray(xs) || ArrayBuffer.isView(xs)) {\n        return xs.reduce(f);\n    }\n    const iter = xs[Symbol.iterator]();\n    let cur = iter.next();\n    if (cur.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    let acc = cur.value;\n    while (true) {\n        cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        acc = f(acc, cur.value);\n    }\n    return acc;\n}\nexport function reduceBack(f, xs) {\n    const ar = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs : Array.from(xs);\n    if (ar.length === 0) {\n        throw new Error(\"Seq was empty\");\n    }\n    let acc = ar[ar.length - 1];\n    for (let i = ar.length - 2; i >= 0; i--) {\n        acc = f(ar[i], acc, i);\n    }\n    return acc;\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function reverse(xs) {\n    const ar = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs.slice(0) : Array.from(xs);\n    return ofArray(ar.reverse());\n}\nexport function scan(f, seed, xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((acc) => {\n            if (acc == null) {\n                return [seed, seed];\n            }\n            const cur = iter.next();\n            if (!cur.done) {\n                acc = f(acc, cur.value);\n                return [acc, acc];\n            }\n            return void 0;\n        }, null);\n    });\n}\nexport function scanBack(f, xs, seed) {\n    return reverse(scan((acc, x) => f(x, acc), seed, reverse(xs)));\n}\nexport function singleton(y) {\n    return [y];\n}\nexport function skip(n, xs) {\n    return {\n        [Symbol.iterator]: () => {\n            const iter = xs[Symbol.iterator]();\n            for (let i = 1; i <= n; i++) {\n                if (iter.next().done) {\n                    throw new Error(\"Seq has not enough elements\");\n                }\n            }\n            return iter;\n        },\n    };\n}\nexport function skipWhile(f, xs) {\n    return delay(() => {\n        let hasPassed = false;\n        return filter((x) => hasPassed || (hasPassed = !f(x)), xs);\n    });\n}\nexport function sortWith(f, xs) {\n    const ys = Array.from(xs);\n    return ofArray(ys.sort(f));\n}\nexport function sum(xs, adder) {\n    return fold((acc, x) => adder.Add(acc, x), adder.GetZero(), xs);\n}\nexport function sumBy(f, xs, adder) {\n    return fold((acc, x) => adder.Add(acc, f(x)), adder.GetZero(), xs);\n}\nexport function tail(xs) {\n    const iter = xs[Symbol.iterator]();\n    const cur = iter.next();\n    if (cur.done) {\n        throw new Error(\"Seq was empty\");\n    }\n    return {\n        [Symbol.iterator]: () => iter,\n    };\n}\nexport function take(n, xs, truncate = false) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((i) => {\n            if (i < n) {\n                const cur = iter.next();\n                if (!cur.done) {\n                    return [cur.value, i + 1];\n                }\n                if (!truncate) {\n                    throw new Error(\"Seq has not enough elements\");\n                }\n            }\n            return void 0;\n        }, 0);\n    });\n}\nexport function truncate(n, xs) {\n    return take(n, xs, true);\n}\nexport function takeWhile(f, xs) {\n    return delay(() => {\n        const iter = xs[Symbol.iterator]();\n        return unfold((i) => {\n            const cur = iter.next();\n            if (!cur.done && f(cur.value)) {\n                return [cur.value, null];\n            }\n            return void 0;\n        }, 0);\n    });\n}\nexport function tryFind(f, xs, defaultValue) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value, i)) {\n            return some(cur.value);\n        }\n    }\n    return defaultValue === void 0 ? null : some(defaultValue);\n}\nexport function find(f, xs) {\n    return __failIfNone(tryFind(f, xs));\n}\nexport function tryFindBack(f, xs, defaultValue) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs.slice(0) : Array.from(xs);\n    return tryFind(f, arr.reverse(), defaultValue);\n}\nexport function findBack(f, xs) {\n    return __failIfNone(tryFindBack(f, xs));\n}\nexport function tryFindIndex(f, xs) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        if (f(cur.value, i)) {\n            return i;\n        }\n    }\n    return null;\n}\nexport function findIndex(f, xs) {\n    return __failIfNone(tryFindIndex(f, xs));\n}\nexport function tryFindIndexBack(f, xs) {\n    const arr = Array.isArray(xs) || ArrayBuffer.isView(xs) ? xs.slice(0) : Array.from(xs);\n    for (let i = arr.length - 1; i >= 0; i--) {\n        if (f(arr[i], i)) {\n            return i;\n        }\n    }\n    return null;\n}\nexport function findIndexBack(f, xs) {\n    return __failIfNone(tryFindIndexBack(f, xs));\n}\nexport function tryPick(f, xs) {\n    for (let i = 0, iter = xs[Symbol.iterator]();; i++) {\n        const cur = iter.next();\n        if (cur.done) {\n            break;\n        }\n        const y = f(cur.value, i);\n        if (y != null) {\n            return y;\n        }\n    }\n    return null;\n}\nexport function pick(f, xs) {\n    return __failIfNone(tryPick(f, xs));\n}\nexport function unfold(f, fst) {\n    return {\n        [Symbol.iterator]: () => {\n            // Capture a copy of the first value in the closure\n            // so the sequence is restarted every time, see #1230\n            let acc = fst;\n            return {\n                next: () => {\n                    const res = f(acc);\n                    if (res != null) {\n                        acc = res[1];\n                        return { done: false, value: res[0] };\n                    }\n                    return { done: true };\n                },\n            };\n        },\n    };\n}\nexport function zip(xs, ys) {\n    return map2((x, y) => [x, y], xs, ys);\n}\nexport function zip3(xs, ys, zs) {\n    return map3((x, y, z) => [x, y, z], xs, ys, zs);\n}\nexport function windowed(windowSize, source) {\n    if (windowSize <= 0) {\n        throw new Error(\"windowSize must be positive\");\n    }\n    return {\n        [Symbol.iterator]: () => {\n            let window = [];\n            const iter = source[Symbol.iterator]();\n            return {\n                next: () => {\n                    let cur;\n                    while (window.length < windowSize) {\n                        if ((cur = iter.next()).done) {\n                            return { done: true };\n                        }\n                        window.push(cur.value);\n                    }\n                    const value = window;\n                    window = window.slice(1);\n                    return { done: false, value };\n                },\n            };\n        },\n    };\n}\n//# sourceMappingURL=Seq.js.map","/**\n * DateTimeOffset functions.\n *\n * Note: Date instances are always DateObjects in local\n * timezone (because JS dates are all kinds of messed up).\n * A local date returns UTC epoc when `.getTime()` is called.\n *\n * Basically; invariant: date.getTime() always return UTC time.\n */\nimport { fromValue, ticksToUnixEpochMilliseconds, unixEpochMillisecondsToTicks } from \"./Long\";\nimport { compareDates, dateOffset, padWithZeros } from \"./Util\";\nexport const offsetRegex = /(?:Z|[+-](\\d+):?([0-5]?\\d)?)\\s*$/;\nexport function dateOffsetToString(offset) {\n    const isMinus = offset < 0;\n    offset = Math.abs(offset);\n    const hours = ~~(offset / 3600000);\n    const minutes = (offset % 3600000) / 60000;\n    return (isMinus ? \"-\" : \"+\") +\n        padWithZeros(hours, 2) + \":\" +\n        padWithZeros(minutes, 2);\n}\nexport function dateToHalfUTCString(date, half) {\n    const str = date.toISOString();\n    return half === \"first\"\n        ? str.substring(0, str.indexOf(\"T\"))\n        : str.substring(str.indexOf(\"T\") + 1, str.length - 1);\n}\nfunction dateToISOString(d, utc) {\n    if (utc) {\n        return d.toISOString();\n    }\n    else {\n        // JS Date is always local\n        const printOffset = d.kind == null ? true : d.kind === 2 /* Local */;\n        return padWithZeros(d.getFullYear(), 4) + \"-\" +\n            padWithZeros(d.getMonth() + 1, 2) + \"-\" +\n            padWithZeros(d.getDate(), 2) + \"T\" +\n            padWithZeros(d.getHours(), 2) + \":\" +\n            padWithZeros(d.getMinutes(), 2) + \":\" +\n            padWithZeros(d.getSeconds(), 2) + \".\" +\n            padWithZeros(d.getMilliseconds(), 3) +\n            (printOffset ? dateOffsetToString(d.getTimezoneOffset() * -60000) : \"\");\n    }\n}\nfunction dateToISOStringWithOffset(dateWithOffset, offset) {\n    const str = dateWithOffset.toISOString();\n    return str.substring(0, str.length - 1) + dateOffsetToString(offset);\n}\nfunction dateToStringWithCustomFormat(date, format, utc) {\n    return format.replace(/(\\w)\\1*/g, (match) => {\n        let rep = Number.NaN;\n        switch (match.substring(0, 1)) {\n            case \"y\":\n                const y = utc ? date.getUTCFullYear() : date.getFullYear();\n                rep = match.length < 4 ? y % 100 : y;\n                break;\n            case \"M\":\n                rep = (utc ? date.getUTCMonth() : date.getMonth()) + 1;\n                break;\n            case \"d\":\n                rep = utc ? date.getUTCDate() : date.getDate();\n                break;\n            case \"H\":\n                rep = utc ? date.getUTCHours() : date.getHours();\n                break;\n            case \"h\":\n                const h = utc ? date.getUTCHours() : date.getHours();\n                rep = h > 12 ? h % 12 : h;\n                break;\n            case \"m\":\n                rep = utc ? date.getUTCMinutes() : date.getMinutes();\n                break;\n            case \"s\":\n                rep = utc ? date.getUTCSeconds() : date.getSeconds();\n                break;\n            case \"f\":\n                rep = utc ? date.getUTCMilliseconds() : date.getMilliseconds();\n                break;\n        }\n        if (Number.isNaN(rep)) {\n            return match;\n        }\n        else {\n            return (rep < 10 && match.length > 1) ? \"0\" + rep : \"\" + rep;\n        }\n    });\n}\nfunction dateToStringWithOffset(date, format) {\n    const d = new Date(date.getTime() + date.offset);\n    if (typeof format !== \"string\") {\n        return d.toISOString().replace(/\\.\\d+/, \"\").replace(/[A-Z]|\\.\\d+/g, \" \") + dateOffsetToString(date.offset);\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\": return dateToHalfUTCString(d, \"first\");\n            case \"T\":\n            case \"t\": return dateToHalfUTCString(d, \"second\");\n            case \"O\":\n            case \"o\": return dateToISOStringWithOffset(d, date.offset);\n            default: throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(d, format, true);\n    }\n}\nfunction dateToStringWithKind(date, format) {\n    const utc = date.kind === 1 /* UTC */;\n    if (typeof format !== \"string\") {\n        return utc ? date.toUTCString() : date.toLocaleString();\n    }\n    else if (format.length === 1) {\n        switch (format) {\n            case \"D\":\n            case \"d\":\n                return utc ? dateToHalfUTCString(date, \"first\") : date.toLocaleDateString();\n            case \"T\":\n            case \"t\":\n                return utc ? dateToHalfUTCString(date, \"second\") : date.toLocaleTimeString();\n            case \"O\":\n            case \"o\":\n                return dateToISOString(date, utc);\n            default:\n                throw new Error(\"Unrecognized Date print format\");\n        }\n    }\n    else {\n        return dateToStringWithCustomFormat(date, format, utc);\n    }\n}\nexport function toString(date, format) {\n    return date.offset != null\n        ? dateToStringWithOffset(date, format)\n        : dateToStringWithKind(date, format);\n}\nexport default function DateTime(value, kind) {\n    const d = new Date(value);\n    d.kind = (kind == null ? 0 /* Unspecified */ : kind) | 0;\n    return d;\n}\nexport function fromTicks(ticks, kind) {\n    ticks = fromValue(ticks);\n    kind = kind != null ? kind : 0 /* Unspecified */;\n    let date = DateTime(ticksToUnixEpochMilliseconds(ticks), kind);\n    // Ticks are local to offset (in this case, either UTC or Local/Unknown).\n    // If kind is anything but UTC, that means that the tick number was not\n    // in utc, thus getTime() cannot return UTC, and needs to be shifted.\n    if (kind !== 1 /* UTC */) {\n        date = DateTime(date.getTime() - dateOffset(date), kind);\n    }\n    return date;\n}\nexport function fromDateTimeOffset(date, kind) {\n    switch (kind) {\n        case 1 /* UTC */: return DateTime(date.getTime(), 1 /* UTC */);\n        case 2 /* Local */: return DateTime(date.getTime(), 2 /* Local */);\n        default:\n            const d = DateTime(date.getTime() + date.offset, kind);\n            return DateTime(d.getTime() - dateOffset(d), kind);\n    }\n}\nexport function getTicks(date) {\n    return unixEpochMillisecondsToTicks(date.getTime(), dateOffset(date));\n}\nexport function minValue() {\n    // This is \"0001-01-01T00:00:00.000Z\", actual JS min value is -8640000000000000\n    return DateTime(-62135596800000, 0 /* Unspecified */);\n}\nexport function maxValue() {\n    // This is \"9999-12-31T23:59:59.999Z\", actual JS max value is 8640000000000000\n    return DateTime(253402300799999, 0 /* Unspecified */);\n}\nexport function parseRaw(str) {\n    let date = new Date(str);\n    if (isNaN(date.getTime())) {\n        // Try to check strings JS Date cannot parse (see #1045, #1422)\n        // tslint:disable-next-line:max-line-length\n        const m = /^\\s*(\\d+[^\\w\\s:]\\d+[^\\w\\s:]\\d+)?\\s*(\\d+:\\d+(?::\\d+(?:\\.\\d+)?)?)?\\s*([AaPp][Mm])?\\s*([+-]\\d+(?::\\d+)?)?\\s*$/.exec(str);\n        if (m != null) {\n            let baseDate = null;\n            let timeInSeconds = 0;\n            if (m[2] != null) {\n                const timeParts = m[2].split(\":\");\n                timeInSeconds = parseInt(timeParts[0], 10) * 3600 +\n                    parseInt(timeParts[1] || \"0\", 10) * 60 +\n                    parseFloat(timeParts[2] || \"0\");\n                if (m[3] != null && m[3].toUpperCase() === \"PM\") {\n                    timeInSeconds += 720;\n                }\n            }\n            if (m[4] != null) { // There's an offset, parse as UTC\n                if (m[1] != null) {\n                    baseDate = new Date(m[1] + \" UTC\");\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getUTCFullYear() + \"/\" + (d.getUTCMonth() + 1) + \"/\" + d.getUTCDate());\n                }\n                const offsetParts = m[4].substr(1).split(\":\");\n                let offsetInMinutes = parseInt(offsetParts[0], 10) * 60 + parseInt(offsetParts[1] || \"0\", 10);\n                if (m[4][0] === \"+\") {\n                    offsetInMinutes *= -1;\n                }\n                timeInSeconds += offsetInMinutes * 60;\n            }\n            else {\n                if (m[1] != null) {\n                    baseDate = new Date(m[1]);\n                }\n                else {\n                    const d = new Date();\n                    baseDate = new Date(d.getFullYear() + \"/\" + (d.getMonth() + 1) + \"/\" + d.getDate());\n                }\n            }\n            date = new Date(baseDate.getTime() + timeInSeconds * 1000);\n            // correct for daylight savings time\n            date = new Date(date.getTime() + (date.getTimezoneOffset() - baseDate.getTimezoneOffset()) * 60000);\n        }\n        else {\n            throw new Error(\"The string is not a valid Date.\");\n        }\n    }\n    return date;\n}\nexport function parse(str, detectUTC = false) {\n    const date = parseRaw(str);\n    const offset = offsetRegex.exec(str);\n    // .NET always parses DateTime as Local if there's offset info (even \"Z\")\n    // Newtonsoft.Json uses UTC if the offset is \"Z\"\n    const kind = offset != null\n        ? (detectUTC && offset[0] === \"Z\" ? 1 /* UTC */ : 2 /* Local */)\n        : 0 /* Unspecified */;\n    return DateTime(date.getTime(), kind);\n}\nexport function tryParse(v) {\n    try {\n        // if value is null or whitespace, parsing fails\n        if (v == null || v.trim() === \"\") {\n            return [false, minValue()];\n        }\n        return [true, parse(v)];\n    }\n    catch (_err) {\n        return [false, minValue()];\n    }\n}\nexport function create(year, month, day, h = 0, m = 0, s = 0, ms = 0, kind) {\n    const dateValue = kind === 1 /* UTC */\n        ? Date.UTC(year, month - 1, day, h, m, s, ms)\n        : new Date(year, month - 1, day, h, m, s, ms).getTime();\n    if (isNaN(dateValue)) {\n        throw new Error(\"The parameters describe an unrepresentable Date.\");\n    }\n    const date = DateTime(dateValue, kind);\n    if (year <= 99) {\n        date.setFullYear(year, month - 1, day);\n    }\n    return date;\n}\nexport function now() {\n    return DateTime(Date.now(), 2 /* Local */);\n}\nexport function utcNow() {\n    return DateTime(Date.now(), 1 /* UTC */);\n}\nexport function today() {\n    return date(now());\n}\nexport function isLeapYear(year) {\n    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;\n}\nexport function daysInMonth(year, month) {\n    return month === 2\n        ? (isLeapYear(year) ? 29 : 28)\n        : (month >= 8 ? (month % 2 === 0 ? 31 : 30) : (month % 2 === 0 ? 30 : 31));\n}\nexport function toUniversalTime(date) {\n    return date.kind === 1 /* UTC */ ? date : DateTime(date.getTime(), 1 /* UTC */);\n}\nexport function toLocalTime(date) {\n    return date.kind === 2 /* Local */ ? date : DateTime(date.getTime(), 2 /* Local */);\n}\nexport function specifyKind(d, kind) {\n    return create(year(d), month(d), day(d), hour(d), minute(d), second(d), millisecond(d), kind);\n}\nexport function timeOfDay(d) {\n    return hour(d) * 3600000\n        + minute(d) * 60000\n        + second(d) * 1000\n        + millisecond(d);\n}\nexport function date(d) {\n    return create(year(d), month(d), day(d), 0, 0, 0, 0, d.kind);\n}\nexport function day(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDate() : d.getDate();\n}\nexport function hour(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCHours() : d.getHours();\n}\nexport function millisecond(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMilliseconds() : d.getMilliseconds();\n}\nexport function minute(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCMinutes() : d.getMinutes();\n}\nexport function month(d) {\n    return (d.kind === 1 /* UTC */ ? d.getUTCMonth() : d.getMonth()) + 1;\n}\nexport function second(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCSeconds() : d.getSeconds();\n}\nexport function year(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCFullYear() : d.getFullYear();\n}\nexport function dayOfWeek(d) {\n    return d.kind === 1 /* UTC */ ? d.getUTCDay() : d.getDay();\n}\nexport function dayOfYear(d) {\n    const _year = year(d);\n    const _month = month(d);\n    let _day = day(d);\n    for (let i = 1; i < _month; i++) {\n        _day += daysInMonth(_year, i);\n    }\n    return _day;\n}\nexport function add(d, ts) {\n    return DateTime(d.getTime() + ts, d.kind);\n}\nexport function addDays(d, v) {\n    return DateTime(d.getTime() + v * 86400000, d.kind);\n}\nexport function addHours(d, v) {\n    return DateTime(d.getTime() + v * 3600000, d.kind);\n}\nexport function addMinutes(d, v) {\n    return DateTime(d.getTime() + v * 60000, d.kind);\n}\nexport function addSeconds(d, v) {\n    return DateTime(d.getTime() + v * 1000, d.kind);\n}\nexport function addMilliseconds(d, v) {\n    return DateTime(d.getTime() + v, d.kind);\n}\nexport function addYears(d, v) {\n    const newMonth = month(d);\n    const newYear = year(d) + v;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function addMonths(d, v) {\n    let newMonth = month(d) + v;\n    let newMonth_ = 0;\n    let yearOffset = 0;\n    if (newMonth > 12) {\n        newMonth_ = newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12);\n        newMonth = newMonth_;\n    }\n    else if (newMonth < 1) {\n        newMonth_ = 12 + newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12) + (newMonth_ === 12 ? -1 : 0);\n        newMonth = newMonth_;\n    }\n    const newYear = year(d) + yearOffset;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, day(d));\n    return create(newYear, newMonth, newDay, hour(d), minute(d), second(d), millisecond(d), d.kind);\n}\nexport function subtract(d, that) {\n    return typeof that === \"number\"\n        ? DateTime(d.getTime() - that, d.kind)\n        : d.getTime() - that.getTime();\n}\nexport function toLongDateString(d) {\n    return d.toDateString();\n}\nexport function toShortDateString(d) {\n    return d.toLocaleDateString();\n}\nexport function toLongTimeString(d) {\n    return d.toLocaleTimeString();\n}\nexport function toShortTimeString(d) {\n    return d.toLocaleTimeString().replace(/:\\d\\d(?!:)/, \"\");\n}\nexport function equals(d1, d2) {\n    return d1.getTime() === d2.getTime();\n}\nexport const compare = compareDates;\nexport const compareTo = compareDates;\nexport function op_Addition(x, y) {\n    return add(x, y);\n}\nexport function op_Subtraction(x, y) {\n    return subtract(x, y);\n}\nexport function isDaylightSavingTime(x) {\n    const jan = new Date(x.getFullYear(), 0, 1);\n    const jul = new Date(x.getFullYear(), 6, 1);\n    return isDST(jan.getTimezoneOffset(), jul.getTimezoneOffset(), x.getTimezoneOffset());\n}\nfunction isDST(janOffset, julOffset, tOffset) {\n    return Math.min(janOffset, julOffset) === tOffset;\n}\n//# sourceMappingURL=Date.js.map","export function create(pattern, options) {\n    // Supported RegexOptions\n    // * IgnoreCase:  0x0001\n    // * Multiline:   0x0002\n    // * Singleline:  0x0010\n    // * ECMAScript:  0x0100 (ignored)\n    if ((options & ~(1 ^ 2 ^ 16 ^ 256)) !== 0) {\n        throw new Error(\"RegexOptions only supports: IgnoreCase, Multiline, Singleline and ECMAScript\");\n    }\n    let flags = \"g\";\n    flags += options & 1 ? \"i\" : \"\"; // 0x0001 RegexOptions.IgnoreCase\n    flags += options & 2 ? \"m\" : \"\";\n    flags += options & 16 ? \"s\" : \"\";\n    return new RegExp(pattern, flags);\n}\n// From http://stackoverflow.com/questions/3446170/escape-string-for-use-in-javascript-regex\nexport function escape(str) {\n    return str.replace(/[\\-\\[\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, \"\\\\$&\");\n}\nexport function unescape(str) {\n    return str.replace(/\\\\([\\-\\[\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|])/g, \"$1\");\n}\nexport function isMatch(str, pattern, options = 0) {\n    let reg;\n    reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    return reg.test(str);\n}\nexport function match(str, pattern, options = 0) {\n    let reg;\n    reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    return reg.exec(str);\n}\nexport function matches(str, pattern, options = 0) {\n    let reg;\n    reg = str instanceof RegExp\n        ? (reg = str, str = pattern, reg.lastIndex = options, reg)\n        : reg = create(pattern, options);\n    if (!reg.global) {\n        throw new Error(\"Non-global RegExp\"); // Prevent infinite loop\n    }\n    let m = reg.exec(str);\n    const matches = [];\n    while (m !== null) {\n        matches.push(m);\n        m = reg.exec(str);\n    }\n    return matches;\n}\nexport function options(reg) {\n    let options = 256; // ECMAScript\n    options |= reg.ignoreCase ? 1 : 0;\n    options |= reg.multiline ? 2 : 0;\n    return options;\n}\nexport function replace(reg, input, replacement, limit, offset = 0) {\n    function replacer() {\n        let res = arguments[0];\n        if (limit !== 0) {\n            limit--;\n            const match = [];\n            const len = arguments.length;\n            for (let i = 0; i < len - 2; i++) {\n                match.push(arguments[i]);\n            }\n            match.index = arguments[len - 2];\n            match.input = arguments[len - 1];\n            res = replacement(match);\n        }\n        return res;\n    }\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit);\n        input = tmp;\n        limit = undefined;\n    }\n    if (typeof replacement === \"function\") {\n        limit = limit == null ? -1 : limit;\n        return input.substring(0, offset) + input.substring(offset).replace(reg, replacer);\n    }\n    else {\n        // $0 doesn't work with JS regex, see #1155\n        replacement = replacement.replace(/\\$0/g, (s) => \"$&\");\n        if (limit != null) {\n            let m;\n            const sub1 = input.substring(offset);\n            const _matches = matches(reg, sub1);\n            const sub2 = matches.length > limit ? (m = _matches[limit - 1], sub1.substring(0, m.index + m[0].length)) : sub1;\n            return input.substring(0, offset) + sub2.replace(reg, replacement)\n                + input.substring(offset + sub2.length);\n        }\n        else {\n            return input.replace(reg, replacement);\n        }\n    }\n}\nexport function split(reg, input, limit, offset = 0) {\n    if (typeof reg === \"string\") {\n        const tmp = reg;\n        reg = create(input, limit);\n        input = tmp;\n        limit = undefined;\n    }\n    input = input.substring(offset);\n    return input.split(reg, limit);\n}\n//# sourceMappingURL=RegExp.js.map","import { toString as dateToString } from \"./Date\";\nimport Long, { fromBytes as longFromBytes, toBytes as longToBytes, toString as longToString } from \"./Long\";\nimport { escape } from \"./RegExp\";\nconst fsFormatRegExp = /(^|[^%])%([0+ ]*)(-?\\d+)?(?:\\.(\\d+))?(\\w)/;\nconst formatRegExp = /\\{(\\d+)(,-?\\d+)?(?:\\:([a-zA-Z])(\\d{0,2})|\\:(.+?))?\\}/g;\n// RFC 4122 compliant. From https://stackoverflow.com/a/13653180/3922220\n// const guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/;\n// Relax GUID parsing, see #1637\nconst guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;\nfunction cmp(x, y, ic) {\n    function isIgnoreCase(i) {\n        return i === true ||\n            i === 1 /* CurrentCultureIgnoreCase */ ||\n            i === 3 /* InvariantCultureIgnoreCase */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    function isOrdinal(i) {\n        return i === 4 /* Ordinal */ ||\n            i === 5 /* OrdinalIgnoreCase */;\n    }\n    if (x == null) {\n        return y == null ? 0 : -1;\n    }\n    if (y == null) {\n        return 1;\n    } // everything is bigger than null\n    if (isOrdinal(ic)) {\n        if (isIgnoreCase(ic)) {\n            x = x.toLowerCase();\n            y = y.toLowerCase();\n        }\n        return (x === y) ? 0 : (x < y ? -1 : 1);\n    }\n    else {\n        if (isIgnoreCase(ic)) {\n            x = x.toLocaleLowerCase();\n            y = y.toLocaleLowerCase();\n        }\n        return x.localeCompare(y);\n    }\n}\nexport function compare(...args) {\n    switch (args.length) {\n        case 2: return cmp(args[0], args[1], false);\n        case 3: return cmp(args[0], args[1], args[2]);\n        case 4: return cmp(args[0], args[1], args[2] === true);\n        case 5: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), false);\n        case 6: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5]);\n        case 7: return cmp(args[0].substr(args[1], args[4]), args[2].substr(args[3], args[4]), args[5] === true);\n        default: throw new Error(\"String.compare: Unsupported number of parameters\");\n    }\n}\nexport function compareOrdinal(x, y) {\n    return cmp(x, y, 4 /* Ordinal */);\n}\nexport function compareTo(x, y) {\n    return cmp(x, y, 0 /* CurrentCulture */);\n}\nexport function startsWith(str, pattern, ic) {\n    if (str.length >= pattern.length) {\n        return cmp(str.substr(0, pattern.length), pattern, ic) === 0;\n    }\n    return false;\n}\nexport function indexOfAny(str, anyOf, ...args) {\n    if (str == null || str === \"\") {\n        return -1;\n    }\n    const startIndex = (args.length > 0) ? args[0] : 0;\n    if (startIndex < 0) {\n        throw new Error(\"Start index cannot be negative\");\n    }\n    const length = (args.length > 1) ? args[1] : str.length - startIndex;\n    if (length < 0) {\n        throw new Error(\"Length cannot be negative\");\n    }\n    if (length > str.length - startIndex) {\n        throw new Error(\"Invalid startIndex and length\");\n    }\n    str = str.substr(startIndex, length);\n    for (const c of anyOf) {\n        const index = str.indexOf(c);\n        if (index > -1) {\n            return index + startIndex;\n        }\n    }\n    return -1;\n}\nfunction toHex(x) {\n    if (x instanceof Long) {\n        return longToString(x.unsigned ? x : longFromBytes(longToBytes(x), true), 16);\n    }\n    else {\n        return (Number(x) >>> 0).toString(16);\n    }\n}\nexport function printf(input) {\n    return {\n        input,\n        cont: fsFormat(input),\n    };\n}\nexport function toConsole(arg) {\n    // Don't remove the lambda here, see #1357\n    return arg.cont((x) => { console.log(x); });\n}\nexport function toConsoleError(arg) {\n    return arg.cont((x) => { console.error(x); });\n}\nexport function toText(arg) {\n    return arg.cont((x) => x);\n}\nexport function toFail(arg) {\n    return arg.cont((x) => { throw new Error(x); });\n}\nfunction formatOnce(str2, rep) {\n    return str2.replace(fsFormatRegExp, (_, prefix, flags, pad, precision, format) => {\n        switch (format) {\n            case \"f\":\n            case \"F\":\n                rep = Number(rep).toFixed(precision || 6);\n                break;\n            case \"g\":\n            case \"G\":\n                rep = Number(rep).toPrecision(precision);\n                break;\n            case \"e\":\n            case \"E\":\n                rep = Number(rep).toExponential(precision);\n                break;\n            case \"O\":\n            case \"A\":\n                rep = String(rep);\n                break;\n            case \"x\":\n                rep = toHex(rep);\n                break;\n            case \"X\":\n                rep = toHex(rep).toUpperCase();\n                break;\n        }\n        const plusPrefix = flags.indexOf(\"+\") >= 0 && parseInt(rep, 10) >= 0;\n        pad = parseInt(pad, 10);\n        if (!isNaN(pad)) {\n            const ch = pad >= 0 && flags.indexOf(\"0\") >= 0 ? \"0\" : \" \";\n            rep = padLeft(String(rep), Math.abs(pad) - (plusPrefix ? 1 : 0), ch, pad < 0);\n        }\n        const once = prefix + (plusPrefix ? \"+\" + rep : rep);\n        return once.replace(/%/g, \"%%\");\n    });\n}\nfunction createPrinter(str, cont) {\n    return (...args) => {\n        // Make a copy as the function may be used several times\n        let strCopy = str;\n        for (const arg of args) {\n            strCopy = formatOnce(strCopy, arg);\n        }\n        return fsFormatRegExp.test(strCopy)\n            ? createPrinter(strCopy, cont)\n            : cont(strCopy.replace(/%%/g, \"%\"));\n    };\n}\nexport function fsFormat(str) {\n    return (cont) => {\n        return fsFormatRegExp.test(str)\n            ? createPrinter(str, cont)\n            : cont(str);\n    };\n}\nexport function format(str, ...args) {\n    if (typeof str === \"object\" && args.length > 0) {\n        // Called with culture info\n        str = args[0];\n        args.shift();\n    }\n    return str.replace(formatRegExp, (match, idx, pad, format, precision, pattern) => {\n        let rep = args[idx];\n        let padSymbol = \" \";\n        const isNumericType = (typeof rep === \"number\") || (rep instanceof Long);\n        // TODO: || (rep instanceof Decimal) || (rep instanceof BigInt);\n        if (isNumericType) {\n            switch (format) {\n                case \"f\":\n                case \"F\":\n                    rep = precision ? rep.toFixed(precision) : rep.toFixed(2);\n                    break;\n                case \"g\":\n                case \"G\":\n                    rep = precision ? rep.toPrecision(precision) : rep.toPrecision();\n                    break;\n                case \"e\":\n                case \"E\":\n                    rep = precision ? rep.toExponential(precision) : rep.toExponential();\n                    break;\n                case \"p\":\n                case \"P\":\n                    rep = (precision ? (rep * 100).toFixed(precision) : (rep * 100).toFixed(2)) + \" %\";\n                    break;\n                case \"d\":\n                case \"D\":\n                    rep = precision ? padLeft(rep.toString(), precision, \"0\") : rep.toString();\n                    break;\n                case \"x\":\n                case \"X\":\n                    rep = precision ? padLeft(toHex(rep), precision, \"0\") : toHex(rep);\n                    if (format === \"X\") {\n                        rep = rep.toUpperCase();\n                    }\n                    break;\n                default:\n                    const m = /^(0+)(\\.0+)?$/.exec(pattern);\n                    if (m != null) {\n                        let decs = 0;\n                        if (m[2] != null) {\n                            rep = rep.toFixed(decs = m[2].length - 1);\n                        }\n                        pad = \",\" + (m[1].length + (decs ? decs + 1 : 0)).toString();\n                        padSymbol = \"0\";\n                    }\n                    else if (pattern) {\n                        rep = pattern;\n                    }\n            }\n        }\n        else if (rep instanceof Date) {\n            rep = dateToString(rep, pattern || format);\n        }\n        pad = parseInt((pad || \"\").substring(1), 10);\n        if (!isNaN(pad)) {\n            rep = padLeft(String(rep), Math.abs(pad), padSymbol, pad < 0);\n        }\n        return rep;\n    });\n}\nexport function endsWith(str, search) {\n    const idx = str.lastIndexOf(search);\n    return idx >= 0 && idx === str.length - search.length;\n}\nexport function initialize(n, f) {\n    if (n < 0) {\n        throw new Error(\"String length must be non-negative\");\n    }\n    const xs = new Array(n);\n    for (let i = 0; i < n; i++) {\n        xs[i] = f(i);\n    }\n    return xs.join(\"\");\n}\nexport function insert(str, startIndex, value) {\n    if (startIndex < 0 || startIndex > str.length) {\n        throw new Error(\"startIndex is negative or greater than the length of this instance.\");\n    }\n    return str.substring(0, startIndex) + value + str.substring(startIndex);\n}\nexport function isNullOrEmpty(str) {\n    return typeof str !== \"string\" || str.length === 0;\n}\nexport function isNullOrWhiteSpace(str) {\n    return typeof str !== \"string\" || /^\\s*$/.test(str);\n}\nexport function concat(...xs) {\n    return xs.map((x) => String(x)).join(\"\");\n}\nexport function join(delimiter, xs) {\n    if (Array.isArray(xs)) {\n        return xs.join(delimiter);\n    }\n    else {\n        return Array.from(xs).join(delimiter);\n    }\n}\nexport function joinWithIndices(delimiter, xs, startIndex, count) {\n    const endIndexPlusOne = startIndex + count;\n    if (endIndexPlusOne > xs.length) {\n        throw new Error(\"Index and count must refer to a location within the buffer.\");\n    }\n    return xs.slice(startIndex, endIndexPlusOne).join(delimiter);\n}\n/** Validates UUID as specified in RFC4122 (versions 1-5). Trims braces. */\nexport function validateGuid(str, doNotThrow) {\n    const trimmedAndLowered = trim(str, \"{\", \"}\").toLowerCase();\n    if (guidRegex.test(trimmedAndLowered)) {\n        return doNotThrow ? [true, trimmedAndLowered] : trimmedAndLowered;\n    }\n    else if (doNotThrow) {\n        return [false, \"00000000-0000-0000-0000-000000000000\"];\n    }\n    throw new Error(\"Guid should contain 32 digits with 4 dashes: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\");\n}\n// From https://gist.github.com/LeverOne/1308368\nexport function newGuid() {\n    let b = \"\";\n    for (let a = 0; a++ < 36;) {\n        b += a * 51 & 52\n            ? (a ^ 15 ? 8 ^ Math.random() * (a ^ 20 ? 16 : 4) : 4).toString(16)\n            : \"-\";\n    }\n    return b;\n}\n// Maps for number <-> hex string conversion\nlet _convertMapsInitialized = false;\nlet _byteToHex;\nlet _hexToByte;\nfunction initConvertMaps() {\n    _byteToHex = new Array(256);\n    _hexToByte = {};\n    for (let i = 0; i < 256; i++) {\n        _byteToHex[i] = (i + 0x100).toString(16).substr(1);\n        _hexToByte[_byteToHex[i]] = i;\n    }\n    _convertMapsInitialized = true;\n}\n/** Parse a UUID into it's component bytes */\n// Adapted from https://github.com/zefferus/uuid-parse\nexport function guidToArray(s) {\n    if (!_convertMapsInitialized) {\n        initConvertMaps();\n    }\n    let i = 0;\n    const buf = new Uint8Array(16);\n    s.toLowerCase().replace(/[0-9a-f]{2}/g, ((oct) => {\n        switch (i) {\n            // .NET saves first three byte groups with different endianness\n            // See https://stackoverflow.com/a/16722909/3922220\n            case 0:\n            case 1:\n            case 2:\n            case 3:\n                buf[3 - i++] = _hexToByte[oct];\n                break;\n            case 4:\n            case 5:\n                buf[9 - i++] = _hexToByte[oct];\n                break;\n            case 6:\n            case 7:\n                buf[13 - i++] = _hexToByte[oct];\n                break;\n            case 8:\n            case 9:\n            case 10:\n            case 11:\n            case 12:\n            case 13:\n            case 14:\n            case 15:\n                buf[i++] = _hexToByte[oct];\n                break;\n        }\n    }));\n    // Zero out remaining bytes if string was short\n    while (i < 16) {\n        buf[i++] = 0;\n    }\n    return buf;\n}\n/** Convert UUID byte array into a string */\nexport function arrayToGuid(buf) {\n    if (buf.length !== 16) {\n        throw new Error(\"Byte array for GUID must be exactly 16 bytes long\");\n    }\n    if (!_convertMapsInitialized) {\n        initConvertMaps();\n    }\n    return _byteToHex[buf[3]] + _byteToHex[buf[2]] +\n        _byteToHex[buf[1]] + _byteToHex[buf[0]] + \"-\" +\n        _byteToHex[buf[5]] + _byteToHex[buf[4]] + \"-\" +\n        _byteToHex[buf[7]] + _byteToHex[buf[6]] + \"-\" +\n        _byteToHex[buf[8]] + _byteToHex[buf[9]] + \"-\" +\n        _byteToHex[buf[10]] + _byteToHex[buf[11]] +\n        _byteToHex[buf[12]] + _byteToHex[buf[13]] +\n        _byteToHex[buf[14]] + _byteToHex[buf[15]];\n}\nfunction notSupported(name) {\n    throw new Error(\"The environment doesn't support '\" + name + \"', please use a polyfill.\");\n}\nexport function toBase64String(inArray) {\n    let str = \"\";\n    for (let i = 0; i < inArray.length; i++) {\n        str += String.fromCharCode(inArray[i]);\n    }\n    return typeof btoa === \"function\" ? btoa(str) : notSupported(\"btoa\");\n}\nexport function fromBase64String(b64Encoded) {\n    const binary = typeof atob === \"function\" ? atob(b64Encoded) : notSupported(\"atob\");\n    const bytes = new Uint8Array(binary.length);\n    for (let i = 0; i < binary.length; i++) {\n        bytes[i] = binary.charCodeAt(i);\n    }\n    return bytes;\n}\nexport function padLeft(str, len, ch, isRight) {\n    ch = ch || \" \";\n    len = len - str.length;\n    for (let i = 0; i < len; i++) {\n        str = isRight ? str + ch : ch + str;\n    }\n    return str;\n}\nexport function padRight(str, len, ch) {\n    return padLeft(str, len, ch, true);\n}\nexport function remove(str, startIndex, count) {\n    if (startIndex >= str.length) {\n        throw new Error(\"startIndex must be less than length of string\");\n    }\n    if (typeof count === \"number\" && (startIndex + count) > str.length) {\n        throw new Error(\"Index and count must refer to a location within the string.\");\n    }\n    return str.slice(0, startIndex) + (typeof count === \"number\" ? str.substr(startIndex + count) : \"\");\n}\nexport function replace(str, search, replace) {\n    return str.replace(new RegExp(escape(search), \"g\"), replace);\n}\nexport function replicate(n, x) {\n    return initialize(n, () => x);\n}\nexport function getCharAtIndex(input, index) {\n    if (index < 0 || index >= input.length) {\n        throw new Error(\"Index was outside the bounds of the array.\");\n    }\n    return input[index];\n}\nexport function split(str, splitters, count, removeEmpty) {\n    count = typeof count === \"number\" ? count : null;\n    removeEmpty = typeof removeEmpty === \"number\" ? removeEmpty : null;\n    if (count < 0) {\n        throw new Error(\"Count cannot be less than zero\");\n    }\n    if (count === 0) {\n        return [];\n    }\n    if (!Array.isArray(splitters)) {\n        if (removeEmpty === 0) {\n            return str.split(splitters, count);\n        }\n        const len = arguments.length;\n        splitters = Array(len - 1);\n        for (let key = 1; key < len; key++) {\n            splitters[key - 1] = arguments[key];\n        }\n    }\n    splitters = splitters.map((x) => escape(x));\n    splitters = splitters.length > 0 ? splitters : [\" \"];\n    let i = 0;\n    const splits = [];\n    const reg = new RegExp(splitters.join(\"|\"), \"g\");\n    while (count == null || count > 1) {\n        const m = reg.exec(str);\n        if (m === null) {\n            break;\n        }\n        if (!removeEmpty || (m.index - i) > 0) {\n            count = count != null ? count - 1 : count;\n            splits.push(str.substring(i, m.index));\n        }\n        i = reg.lastIndex;\n    }\n    if (!removeEmpty || (str.length - i) > 0) {\n        splits.push(str.substring(i));\n    }\n    return splits;\n}\nexport function trim(str, ...chars) {\n    if (chars.length === 0) {\n        return str.trim();\n    }\n    const pattern = \"[\" + escape(chars.join(\"\")) + \"]+\";\n    return str.replace(new RegExp(\"^\" + pattern), \"\").replace(new RegExp(pattern + \"$\"), \"\");\n}\nexport function trimStart(str, ...chars) {\n    return chars.length === 0\n        ? str.trimStart()\n        : str.replace(new RegExp(\"^[\" + escape(chars.join(\"\")) + \"]+\"), \"\");\n}\nexport function trimEnd(str, ...chars) {\n    return chars.length === 0\n        ? str.trimEnd()\n        : str.replace(new RegExp(\"[\" + escape(chars.join(\"\")) + \"]+$\"), \"\");\n}\nexport function filter(pred, x) {\n    return x.split(\"\").filter((c) => pred(c)).join(\"\");\n}\n//# sourceMappingURL=String.js.map","import { declare, FSharpRef } from \"./Types.js\";\nimport { iterateIndexed, toIterator, getEnumerator, delay, collect, map, sumBy, iterate } from \"./Seq.js\";\nimport { type } from \"./Reflection.js\";\nimport { equals, getItemFromDict, tryGetValue } from \"./Util.js\";\nimport { toText, printf } from \"./String.js\";\nexport const MutableMap$00602 = declare(function Fable_Collections_MutableMap(pairs, comparer) {\n  const $this$$1 = this;\n  const this$ = new FSharpRef(null);\n  $this$$1.comparer = comparer;\n  this$.contents = $this$$1;\n  $this$$1[\"entries@23\"] = new Map([]);\n  $this$$1[\"init@20-1\"] = 1;\n  iterate(function (pair) {\n    MutableMap$00602$$Add$$5BDDA1(this$.contents, pair[0], pair[1]);\n  }, pairs);\n});\nexport function MutableMap$00602$reflection($gen$$4, $gen$$5) {\n  return type(\"Fable.Collections.MutableMap`2\", [$gen$$4, $gen$$5]);\n}\nexport function MutableMap$00602$$$$002Ector$$6623D9B3(pairs, comparer) {\n  return this instanceof MutableMap$00602 ? MutableMap$00602.call(this, pairs, comparer) : new MutableMap$00602(pairs, comparer);\n}\n\nfunction MutableMap$00602$$TryFindIndex$$2B595(this$$$1, k) {\n  const h = this$$$1.comparer.GetHashCode(k) | 0;\n  const matchValue = tryGetValue(this$$$1[\"entries@23\"], h, null);\n\n  if (matchValue[0]) {\n    return [true, h, matchValue[1].findIndex(function (pair$$1) {\n      return this$$$1.comparer.Equals(k, pair$$1[0]);\n    })];\n  } else {\n    return [false, h, -1];\n  }\n}\n\nexport function MutableMap$00602$$TryFind$$2B595(this$$$2, k$$1) {\n  const matchValue$$1 = MutableMap$00602$$TryFindIndex$$2B595(this$$$2, k$$1);\n  var $target$$10;\n\n  if (matchValue$$1[0]) {\n    if (matchValue$$1[2] > -1) {\n      $target$$10 = 0;\n    } else {\n      $target$$10 = 1;\n    }\n  } else {\n    $target$$10 = 1;\n  }\n\n  switch ($target$$10) {\n    case 0:\n      {\n        return getItemFromDict(this$$$2[\"entries@23\"], matchValue$$1[1])[matchValue$$1[2]];\n      }\n\n    case 1:\n      {\n        return null;\n      }\n  }\n}\nexport function MutableMap$00602$$get_Comparer(this$$$3) {\n  return this$$$3.comparer;\n}\nexport function MutableMap$00602$$Clear(this$$$4) {\n  this$$$4[\"entries@23\"].clear();\n}\nexport function MutableMap$00602$$get_Count(this$$$5) {\n  const source = this$$$5[\"entries@23\"].values();\n  return sumBy(function projection(pairs$$2) {\n    return pairs$$2.length;\n  }, source, {\n    GetZero() {\n      return 0;\n    },\n\n    Add($x$$2, $y$$3) {\n      return $x$$2 + $y$$3;\n    }\n\n  }) | 0;\n}\nexport function MutableMap$00602$$get_Item$$2B595(this$$$6, k$$2) {\n  const matchValue$$2 = MutableMap$00602$$TryFind$$2B595(this$$$6, k$$2);\n\n  if (matchValue$$2 != null) {\n    const pair$$2 = matchValue$$2;\n    return pair$$2[1];\n  } else {\n    throw new Error(\"The item was not found in collection\");\n  }\n}\nexport function MutableMap$00602$$set_Item$$5BDDA1(this$$$7, k$$3, v) {\n  const matchValue$$3 = MutableMap$00602$$TryFindIndex$$2B595(this$$$7, k$$3);\n  var $target$$20;\n\n  if (matchValue$$3[0]) {\n    if (matchValue$$3[2] > -1) {\n      $target$$20 = 0;\n    } else {\n      $target$$20 = 1;\n    }\n  } else {\n    $target$$20 = 1;\n  }\n\n  switch ($target$$20) {\n    case 0:\n      {\n        getItemFromDict(this$$$7[\"entries@23\"], matchValue$$3[1])[matchValue$$3[2]] = [k$$3, v];\n        break;\n      }\n\n    case 1:\n      {\n        if (matchValue$$3[0]) {\n          const value = getItemFromDict(this$$$7[\"entries@23\"], matchValue$$3[1]).push([k$$3, v]);\n          null, null;\n        } else {\n          this$$$7[\"entries@23\"].set(matchValue$$3[1], [[k$$3, v]]);\n        }\n\n        break;\n      }\n  }\n}\nexport function MutableMap$00602$$Add$$5BDDA1(this$$$8, k$$4, v$$1) {\n  const matchValue$$4 = MutableMap$00602$$TryFindIndex$$2B595(this$$$8, k$$4);\n  var $target$$24;\n\n  if (matchValue$$4[0]) {\n    if (matchValue$$4[2] > -1) {\n      $target$$24 = 0;\n    } else {\n      $target$$24 = 1;\n    }\n  } else {\n    $target$$24 = 1;\n  }\n\n  switch ($target$$24) {\n    case 0:\n      {\n        let msg;\n        const clo1 = toText(printf(\"An item with the same key has already been added. Key: %A\"));\n        msg = clo1(k$$4);\n        throw new Error(msg);\n        break;\n      }\n\n    case 1:\n      {\n        if (matchValue$$4[0]) {\n          const value$$1 = getItemFromDict(this$$$8[\"entries@23\"], matchValue$$4[1]).push([k$$4, v$$1]);\n          null, null;\n        } else {\n          this$$$8[\"entries@23\"].set(matchValue$$4[1], [[k$$4, v$$1]]);\n        }\n\n        break;\n      }\n  }\n}\nexport function MutableMap$00602$$ContainsKey$$2B595(this$$$9, k$$5) {\n  const matchValue$$5 = MutableMap$00602$$TryFindIndex$$2B595(this$$$9, k$$5);\n  var $target$$27;\n\n  if (matchValue$$5[0]) {\n    if (matchValue$$5[2] > -1) {\n      $target$$27 = 0;\n    } else {\n      $target$$27 = 1;\n    }\n  } else {\n    $target$$27 = 1;\n  }\n\n  switch ($target$$27) {\n    case 0:\n      {\n        return true;\n      }\n\n    case 1:\n      {\n        return false;\n      }\n  }\n}\nexport function MutableMap$00602$$Remove$$2B595(this$$$10, k$$6) {\n  const matchValue$$6 = MutableMap$00602$$TryFindIndex$$2B595(this$$$10, k$$6);\n  var $target$$30;\n\n  if (matchValue$$6[0]) {\n    if (matchValue$$6[2] > -1) {\n      $target$$30 = 0;\n    } else {\n      $target$$30 = 1;\n    }\n  } else {\n    $target$$30 = 1;\n  }\n\n  switch ($target$$30) {\n    case 0:\n      {\n        getItemFromDict(this$$$10[\"entries@23\"], matchValue$$6[1]).splice(matchValue$$6[2], 1);\n        return true;\n      }\n\n    case 1:\n      {\n        return false;\n      }\n  }\n}\n\nMutableMap$00602.prototype[Symbol.iterator] = function () {\n  var elems;\n  const this$$$11 = this;\n  return toIterator((elems = delay(function () {\n    return collect(function (pairs$$3) {\n      return map(function (pair$$3) {\n        return pair$$3;\n      }, pairs$$3);\n    }, this$$$11[\"entries@23\"].values());\n  }), getEnumerator(elems)));\n};\n\nMutableMap$00602.prototype.Add = function (item) {\n  const this$$$12 = this;\n  MutableMap$00602$$Add$$5BDDA1(this$$$12, item[0], item[1]);\n};\n\nMutableMap$00602.prototype.Clear = function () {\n  const this$$$13 = this;\n  MutableMap$00602$$Clear(this$$$13);\n};\n\nMutableMap$00602.prototype.Contains = function (item$$1) {\n  var p;\n  const this$$$14 = this;\n  const matchValue$$7 = MutableMap$00602$$TryFind$$2B595(this$$$14, item$$1[0]);\n  var $target$$31;\n\n  if (matchValue$$7 != null) {\n    if (p = matchValue$$7, equals(p[1], item$$1[1])) {\n      $target$$31 = 0;\n    } else {\n      $target$$31 = 1;\n    }\n  } else {\n    $target$$31 = 1;\n  }\n\n  switch ($target$$31) {\n    case 0:\n      {\n        return true;\n      }\n\n    case 1:\n      {\n        return false;\n      }\n  }\n};\n\nMutableMap$00602.prototype.CopyTo = function (array, arrayIndex) {\n  const this$$$15 = this;\n  iterateIndexed(function action(i$$10, e) {\n    array[arrayIndex + i$$10] = e;\n  }, this$$$15);\n};\n\nObject.defineProperty(MutableMap$00602.prototype, \"Count\", {\n  \"get\": function () {\n    const this$$$16 = this;\n    return MutableMap$00602$$get_Count(this$$$16) | 0;\n  }\n});\nObject.defineProperty(MutableMap$00602.prototype, \"IsReadOnly\", {\n  \"get\": function () {\n    return false;\n  }\n});\n\nMutableMap$00602.prototype.Remove = function (item$$2) {\n  const this$$$18 = this;\n  const matchValue$$8 = MutableMap$00602$$TryFind$$2B595(this$$$18, item$$2[0]);\n\n  if (matchValue$$8 != null) {\n    const pair$$4 = matchValue$$8;\n\n    if (equals(pair$$4[1], item$$2[1])) {\n      const value$$2 = MutableMap$00602$$Remove$$2B595(this$$$18, item$$2[0]);\n      value$$2, null;\n    }\n\n    return true;\n  } else {\n    return false;\n  }\n};\n\nObject.defineProperty(MutableMap$00602.prototype, \"size\", {\n  \"get\": function () {\n    const this$$$19 = this;\n    return MutableMap$00602$$get_Count(this$$$19) | 0;\n  }\n});\n\nMutableMap$00602.prototype.clear = function () {\n  const this$$$20 = this;\n  MutableMap$00602$$Clear(this$$$20);\n};\n\nMutableMap$00602.prototype.delete = function (k$$7) {\n  const this$$$21 = this;\n  return MutableMap$00602$$Remove$$2B595(this$$$21, k$$7);\n};\n\nMutableMap$00602.prototype.entries = function () {\n  const this$$$22 = this;\n  return map(function mapping(x) {\n    return x;\n  }, this$$$22);\n};\n\nMutableMap$00602.prototype.get = function (k$$8) {\n  const this$$$23 = this;\n  return MutableMap$00602$$get_Item$$2B595(this$$$23, k$$8);\n};\n\nMutableMap$00602.prototype.has = function (k$$9) {\n  const this$$$24 = this;\n  return MutableMap$00602$$ContainsKey$$2B595(this$$$24, k$$9);\n};\n\nMutableMap$00602.prototype.keys = function () {\n  const this$$$25 = this;\n  return map(function mapping$$1(pair$$5) {\n    return pair$$5[0];\n  }, this$$$25);\n};\n\nMutableMap$00602.prototype.set = function (k$$10, v$$2) {\n  const this$$$26 = this;\n  MutableMap$00602$$set_Item$$5BDDA1(this$$$26, k$$10, v$$2);\n  return this$$$26;\n};\n\nMutableMap$00602.prototype.values = function () {\n  const this$$$27 = this;\n  return map(function mapping$$2(pair$$6) {\n    return pair$$6[1];\n  }, this$$$27);\n};","import { Record, List, declare, Union } from \"./Types.js\";\nimport { type, record, bool, list, union, int32 } from \"./Reflection.js\";\nimport { value as value$$3, some } from \"./Option.js\";\nimport { iterate as iterate$$1, empty as empty$$1, toIterator, map as map$$2, unfold, getEnumerator, fold as fold$$1 } from \"./Seq.js\";\nimport { compare, structuralHash, isDisposable } from \"./Util.js\";\nimport { join, toText, printf } from \"./String.js\";\nimport { MutableMap$00602$$$$002Ector$$6623D9B3 as MutableMap$002400602$0024$0024$0024$0024002Ector$0024$00246623D9B3 } from \"./MutableMap\";\nexport const MapTree$00602 = declare(function Map_MapTree(tag, name, ...fields) {\n  Union.call(this, tag, name, ...fields);\n}, Union);\nexport function MapTree$00602$reflection($gen$$3, $gen$$4) {\n  return union(\"Map.MapTree`2\", [$gen$$3, $gen$$4], MapTree$00602, () => [\"MapEmpty\", [\"MapOne\", [$gen$$3, $gen$$4]], [\"MapNode\", [$gen$$3, $gen$$4, MapTree$00602$reflection($gen$$3, $gen$$4), MapTree$00602$reflection($gen$$3, $gen$$4), int32]]]);\n}\nexport function MapTreeModule$$$sizeAux($acc$$5, $m$$6) {\n  MapTreeModule$$$sizeAux: while (true) {\n    const acc = $acc$$5,\n          m = $m$$6;\n\n    switch (m.tag) {\n      case 1:\n        {\n          return acc + 1 | 0;\n        }\n\n      case 2:\n        {\n          $acc$$5 = MapTreeModule$$$sizeAux(acc + 1, m.fields[2]);\n          $m$$6 = m.fields[3];\n          continue MapTreeModule$$$sizeAux;\n        }\n\n      default:\n        {\n          return acc | 0;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$size(x) {\n  return MapTreeModule$$$sizeAux(0, x);\n}\nexport function MapTreeModule$$$empty() {\n  return new MapTree$00602(0, \"MapEmpty\");\n}\nexport function MapTreeModule$$$height(_arg1) {\n  switch (_arg1.tag) {\n    case 1:\n      {\n        return 1;\n      }\n\n    case 2:\n      {\n        return _arg1.fields[4] | 0;\n      }\n\n    default:\n      {\n        return 0;\n      }\n  }\n}\nexport function MapTreeModule$$$isEmpty(m$$1) {\n  if (m$$1.tag === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function MapTreeModule$$$mk(l$$1, k, v, r$$1) {\n  var $target$$14;\n\n  if (l$$1.tag === 0) {\n    if (r$$1.tag === 0) {\n      $target$$14 = 0;\n    } else {\n      $target$$14 = 1;\n    }\n  } else {\n    $target$$14 = 1;\n  }\n\n  switch ($target$$14) {\n    case 0:\n      {\n        return new MapTree$00602(1, \"MapOne\", k, v);\n      }\n\n    case 1:\n      {\n        const hl = MapTreeModule$$$height(l$$1) | 0;\n        const hr = MapTreeModule$$$height(r$$1) | 0;\n        const m$$2 = (hl < hr ? hr : hl) | 0;\n        return new MapTree$00602(2, \"MapNode\", k, v, l$$1, r$$1, m$$2 + 1);\n      }\n  }\n}\nexport function MapTreeModule$$$rebalance(t1, k$$1, v$$1, t2) {\n  const t1h = MapTreeModule$$$height(t1) | 0;\n  const t2h = MapTreeModule$$$height(t2) | 0;\n\n  if (t2h > t1h + 2) {\n    if (t2.tag === 2) {\n      if (MapTreeModule$$$height(t2.fields[2]) > t1h + 1) {\n        if (t2.fields[2].tag === 2) {\n          return MapTreeModule$$$mk(MapTreeModule$$$mk(t1, k$$1, v$$1, t2.fields[2].fields[2]), t2.fields[2].fields[0], t2.fields[2].fields[1], MapTreeModule$$$mk(t2.fields[2].fields[3], t2.fields[0], t2.fields[1], t2.fields[3]));\n        } else {\n          throw new Error(\"rebalance\");\n        }\n      } else {\n        return MapTreeModule$$$mk(MapTreeModule$$$mk(t1, k$$1, v$$1, t2.fields[2]), t2.fields[0], t2.fields[1], t2.fields[3]);\n      }\n    } else {\n      throw new Error(\"rebalance\");\n    }\n  } else if (t1h > t2h + 2) {\n    if (t1.tag === 2) {\n      if (MapTreeModule$$$height(t1.fields[3]) > t2h + 1) {\n        if (t1.fields[3].tag === 2) {\n          return MapTreeModule$$$mk(MapTreeModule$$$mk(t1.fields[2], t1.fields[0], t1.fields[1], t1.fields[3].fields[2]), t1.fields[3].fields[0], t1.fields[3].fields[1], MapTreeModule$$$mk(t1.fields[3].fields[3], k$$1, v$$1, t2));\n        } else {\n          throw new Error(\"re  balance\");\n        }\n      } else {\n        return MapTreeModule$$$mk(t1.fields[2], t1.fields[0], t1.fields[1], MapTreeModule$$$mk(t1.fields[3], k$$1, v$$1, t2));\n      }\n    } else {\n      throw new Error(\"rebalance\");\n    }\n  } else {\n    return MapTreeModule$$$mk(t1, k$$1, v$$1, t2);\n  }\n}\nexport function MapTreeModule$$$add(comparer, k$$2, v$$2, m$$3) {\n  switch (m$$3.tag) {\n    case 1:\n      {\n        const c = comparer.Compare(k$$2, m$$3.fields[0]) | 0;\n\n        if (c < 0) {\n          return new MapTree$00602(2, \"MapNode\", k$$2, v$$2, new MapTree$00602(0, \"MapEmpty\"), m$$3, 2);\n        } else if (c === 0) {\n          return new MapTree$00602(1, \"MapOne\", k$$2, v$$2);\n        } else {\n          return new MapTree$00602(2, \"MapNode\", k$$2, v$$2, m$$3, new MapTree$00602(0, \"MapEmpty\"), 2);\n        }\n      }\n\n    case 2:\n      {\n        const c$$1 = comparer.Compare(k$$2, m$$3.fields[0]) | 0;\n\n        if (c$$1 < 0) {\n          return MapTreeModule$$$rebalance(MapTreeModule$$$add(comparer, k$$2, v$$2, m$$3.fields[2]), m$$3.fields[0], m$$3.fields[1], m$$3.fields[3]);\n        } else if (c$$1 === 0) {\n          return new MapTree$00602(2, \"MapNode\", k$$2, v$$2, m$$3.fields[2], m$$3.fields[3], m$$3.fields[4]);\n        } else {\n          return MapTreeModule$$$rebalance(m$$3.fields[2], m$$3.fields[0], m$$3.fields[1], MapTreeModule$$$add(comparer, k$$2, v$$2, m$$3.fields[3]));\n        }\n      }\n\n    default:\n      {\n        return new MapTree$00602(1, \"MapOne\", k$$2, v$$2);\n      }\n  }\n}\nexport function MapTreeModule$$$find($comparer$$1$$23, $k$$3$$24, $m$$4$$25) {\n  MapTreeModule$$$find: while (true) {\n    const comparer$$1 = $comparer$$1$$23,\n          k$$3 = $k$$3$$24,\n          m$$4 = $m$$4$$25;\n\n    switch (m$$4.tag) {\n      case 1:\n        {\n          const c$$2 = comparer$$1.Compare(k$$3, m$$4.fields[0]) | 0;\n\n          if (c$$2 === 0) {\n            return m$$4.fields[1];\n          } else {\n            throw new Error(\"key not found\");\n          }\n        }\n\n      case 2:\n        {\n          const c$$3 = comparer$$1.Compare(k$$3, m$$4.fields[0]) | 0;\n\n          if (c$$3 < 0) {\n            $comparer$$1$$23 = comparer$$1;\n            $k$$3$$24 = k$$3;\n            $m$$4$$25 = m$$4.fields[2];\n            continue MapTreeModule$$$find;\n          } else if (c$$3 === 0) {\n            return m$$4.fields[1];\n          } else {\n            $comparer$$1$$23 = comparer$$1;\n            $k$$3$$24 = k$$3;\n            $m$$4$$25 = m$$4.fields[3];\n            continue MapTreeModule$$$find;\n          }\n        }\n\n      default:\n        {\n          throw new Error(\"key not found\");\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$tryFind($comparer$$2$$26, $k$$4$$27, $m$$5$$28) {\n  MapTreeModule$$$tryFind: while (true) {\n    const comparer$$2 = $comparer$$2$$26,\n          k$$4 = $k$$4$$27,\n          m$$5 = $m$$5$$28;\n\n    switch (m$$5.tag) {\n      case 1:\n        {\n          const c$$4 = comparer$$2.Compare(k$$4, m$$5.fields[0]) | 0;\n\n          if (c$$4 === 0) {\n            return some(m$$5.fields[1]);\n          } else {\n            return null;\n          }\n        }\n\n      case 2:\n        {\n          const c$$5 = comparer$$2.Compare(k$$4, m$$5.fields[0]) | 0;\n\n          if (c$$5 < 0) {\n            $comparer$$2$$26 = comparer$$2;\n            $k$$4$$27 = k$$4;\n            $m$$5$$28 = m$$5.fields[2];\n            continue MapTreeModule$$$tryFind;\n          } else if (c$$5 === 0) {\n            return some(m$$5.fields[1]);\n          } else {\n            $comparer$$2$$26 = comparer$$2;\n            $k$$4$$27 = k$$4;\n            $m$$5$$28 = m$$5.fields[3];\n            continue MapTreeModule$$$tryFind;\n          }\n        }\n\n      default:\n        {\n          return null;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$partition1(comparer$$3, f, k$$5, v$$3, acc1, acc2) {\n  if (f(k$$5, v$$3)) {\n    return [MapTreeModule$$$add(comparer$$3, k$$5, v$$3, acc1), acc2];\n  } else {\n    return [acc1, MapTreeModule$$$add(comparer$$3, k$$5, v$$3, acc2)];\n  }\n}\nexport function MapTreeModule$$$partitionAux($comparer$$4$$35, $f$$1$$36, $s$$37, $acc_0$$38, $acc_1$$39) {\n  MapTreeModule$$$partitionAux: while (true) {\n    const comparer$$4 = $comparer$$4$$35,\n          f$$1 = $f$$1$$36,\n          s = $s$$37,\n          acc_0 = $acc_0$$38,\n          acc_1 = $acc_1$$39;\n\n    switch (s.tag) {\n      case 1:\n        {\n          return MapTreeModule$$$partition1(comparer$$4, f$$1, s.fields[0], s.fields[1], acc_0, acc_1);\n        }\n\n      case 2:\n        {\n          const acc$$2 = MapTreeModule$$$partitionAux(comparer$$4, f$$1, s.fields[3], acc_0, acc_1);\n          const acc$$3 = MapTreeModule$$$partition1(comparer$$4, f$$1, s.fields[0], s.fields[1], acc$$2[0], acc$$2[1]);\n          $comparer$$4$$35 = comparer$$4;\n          $f$$1$$36 = f$$1;\n          $s$$37 = s.fields[2];\n          $acc_0$$38 = acc$$3[0];\n          $acc_1$$39 = acc$$3[1];\n          continue MapTreeModule$$$partitionAux;\n        }\n\n      default:\n        {\n          return [acc_0, acc_1];\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$partition(comparer$$5, f$$2, s$$1) {\n  return MapTreeModule$$$partitionAux(comparer$$5, f$$2, s$$1, MapTreeModule$$$empty(), MapTreeModule$$$empty());\n}\nexport function MapTreeModule$$$filter1(comparer$$6, f$$3, k$$8, v$$6, acc$$4) {\n  if (f$$3(k$$8, v$$6)) {\n    return MapTreeModule$$$add(comparer$$6, k$$8, v$$6, acc$$4);\n  } else {\n    return acc$$4;\n  }\n}\nexport function MapTreeModule$$$filterAux($comparer$$7$$48, $f$$4$$49, $s$$2$$50, $acc$$5$$51) {\n  MapTreeModule$$$filterAux: while (true) {\n    const comparer$$7 = $comparer$$7$$48,\n          f$$4 = $f$$4$$49,\n          s$$2 = $s$$2$$50,\n          acc$$5 = $acc$$5$$51;\n\n    switch (s$$2.tag) {\n      case 1:\n        {\n          return MapTreeModule$$$filter1(comparer$$7, f$$4, s$$2.fields[0], s$$2.fields[1], acc$$5);\n        }\n\n      case 2:\n        {\n          const acc$$6 = MapTreeModule$$$filterAux(comparer$$7, f$$4, s$$2.fields[2], acc$$5);\n          const acc$$7 = MapTreeModule$$$filter1(comparer$$7, f$$4, s$$2.fields[0], s$$2.fields[1], acc$$6);\n          $comparer$$7$$48 = comparer$$7;\n          $f$$4$$49 = f$$4;\n          $s$$2$$50 = s$$2.fields[3];\n          $acc$$5$$51 = acc$$7;\n          continue MapTreeModule$$$filterAux;\n        }\n\n      default:\n        {\n          return acc$$5;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$filter(comparer$$8, f$$5, s$$3) {\n  return MapTreeModule$$$filterAux(comparer$$8, f$$5, s$$3, MapTreeModule$$$empty());\n}\nexport function MapTreeModule$$$spliceOutSuccessor(m$$6) {\n  switch (m$$6.tag) {\n    case 1:\n      {\n        return [m$$6.fields[0], m$$6.fields[1], new MapTree$00602(0, \"MapEmpty\")];\n      }\n\n    case 2:\n      {\n        if (m$$6.fields[2].tag === 0) {\n          return [m$$6.fields[0], m$$6.fields[1], m$$6.fields[3]];\n        } else {\n          const patternInput = MapTreeModule$$$spliceOutSuccessor(m$$6.fields[2]);\n          return [patternInput[0], patternInput[1], MapTreeModule$$$mk(patternInput[2], m$$6.fields[0], m$$6.fields[1], m$$6.fields[3])];\n        }\n      }\n\n    default:\n      {\n        throw new Error(\"internal error: Map.spliceOutSuccessor\");\n      }\n  }\n}\nexport function MapTreeModule$$$remove(comparer$$9, k$$11, m$$7) {\n  switch (m$$7.tag) {\n    case 1:\n      {\n        const c$$6 = comparer$$9.Compare(k$$11, m$$7.fields[0]) | 0;\n\n        if (c$$6 === 0) {\n          return new MapTree$00602(0, \"MapEmpty\");\n        } else {\n          return m$$7;\n        }\n      }\n\n    case 2:\n      {\n        const c$$7 = comparer$$9.Compare(k$$11, m$$7.fields[0]) | 0;\n\n        if (c$$7 < 0) {\n          return MapTreeModule$$$rebalance(MapTreeModule$$$remove(comparer$$9, k$$11, m$$7.fields[2]), m$$7.fields[0], m$$7.fields[1], m$$7.fields[3]);\n        } else if (c$$7 === 0) {\n          if (m$$7.fields[2].tag === 0) {\n            return m$$7.fields[3];\n          } else if (m$$7.fields[3].tag === 0) {\n            return m$$7.fields[2];\n          } else {\n            const patternInput$$1 = MapTreeModule$$$spliceOutSuccessor(m$$7.fields[3]);\n            return MapTreeModule$$$mk(m$$7.fields[2], patternInput$$1[0], patternInput$$1[1], patternInput$$1[2]);\n          }\n        } else {\n          return MapTreeModule$$$rebalance(m$$7.fields[2], m$$7.fields[0], m$$7.fields[1], MapTreeModule$$$remove(comparer$$9, k$$11, m$$7.fields[3]));\n        }\n      }\n\n    default:\n      {\n        return MapTreeModule$$$empty();\n      }\n  }\n}\nexport function MapTreeModule$$$mem($comparer$$10$$59, $k$$12$$60, $m$$8$$61) {\n  MapTreeModule$$$mem: while (true) {\n    const comparer$$10 = $comparer$$10$$59,\n          k$$12 = $k$$12$$60,\n          m$$8 = $m$$8$$61;\n\n    switch (m$$8.tag) {\n      case 1:\n        {\n          return comparer$$10.Compare(k$$12, m$$8.fields[0]) === 0;\n        }\n\n      case 2:\n        {\n          const c$$8 = comparer$$10.Compare(k$$12, m$$8.fields[0]) | 0;\n\n          if (c$$8 < 0) {\n            $comparer$$10$$59 = comparer$$10;\n            $k$$12$$60 = k$$12;\n            $m$$8$$61 = m$$8.fields[2];\n            continue MapTreeModule$$$mem;\n          } else if (c$$8 === 0) {\n            return true;\n          } else {\n            $comparer$$10$$59 = comparer$$10;\n            $k$$12$$60 = k$$12;\n            $m$$8$$61 = m$$8.fields[3];\n            continue MapTreeModule$$$mem;\n          }\n        }\n\n      default:\n        {\n          return false;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$iter($f$$6$$62, $m$$9$$63) {\n  MapTreeModule$$$iter: while (true) {\n    const f$$6 = $f$$6$$62,\n          m$$9 = $m$$9$$63;\n\n    switch (m$$9.tag) {\n      case 1:\n        {\n          f$$6(m$$9.fields[0], m$$9.fields[1]);\n          break;\n        }\n\n      case 2:\n        {\n          MapTreeModule$$$iter(f$$6, m$$9.fields[2]);\n          f$$6(m$$9.fields[0], m$$9.fields[1]);\n          $f$$6$$62 = f$$6;\n          $m$$9$$63 = m$$9.fields[3];\n          continue MapTreeModule$$$iter;\n          break;\n        }\n\n      default:\n        {}\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$tryPick($f$$7$$64, $m$$10$$65) {\n  MapTreeModule$$$tryPick: while (true) {\n    const f$$7 = $f$$7$$64,\n          m$$10 = $m$$10$$65;\n\n    switch (m$$10.tag) {\n      case 1:\n        {\n          return f$$7(m$$10.fields[0], m$$10.fields[1]);\n        }\n\n      case 2:\n        {\n          const matchValue$$2 = MapTreeModule$$$tryPick(f$$7, m$$10.fields[2]);\n\n          if (matchValue$$2 == null) {\n            const matchValue$$3 = f$$7(m$$10.fields[0], m$$10.fields[1]);\n\n            if (matchValue$$3 == null) {\n              $f$$7$$64 = f$$7;\n              $m$$10$$65 = m$$10.fields[3];\n              continue MapTreeModule$$$tryPick;\n            } else {\n              return matchValue$$3;\n            }\n          } else {\n            return matchValue$$2;\n          }\n        }\n\n      default:\n        {\n          return null;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$exists($f$$8$$66, $m$$11$$67) {\n  MapTreeModule$$$exists: while (true) {\n    const f$$8 = $f$$8$$66,\n          m$$11 = $m$$11$$67;\n\n    switch (m$$11.tag) {\n      case 1:\n        {\n          return f$$8(m$$11.fields[0], m$$11.fields[1]);\n        }\n\n      case 2:\n        {\n          if (MapTreeModule$$$exists(f$$8, m$$11.fields[2]) ? true : f$$8(m$$11.fields[0], m$$11.fields[1])) {\n            return true;\n          } else {\n            $f$$8$$66 = f$$8;\n            $m$$11$$67 = m$$11.fields[3];\n            continue MapTreeModule$$$exists;\n          }\n        }\n\n      default:\n        {\n          return false;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$forall($f$$9$$68, $m$$12$$69) {\n  MapTreeModule$$$forall: while (true) {\n    const f$$9 = $f$$9$$68,\n          m$$12 = $m$$12$$69;\n\n    switch (m$$12.tag) {\n      case 1:\n        {\n          return f$$9(m$$12.fields[0], m$$12.fields[1]);\n        }\n\n      case 2:\n        {\n          if (MapTreeModule$$$forall(f$$9, m$$12.fields[2]) ? f$$9(m$$12.fields[0], m$$12.fields[1]) : false) {\n            $f$$9$$68 = f$$9;\n            $m$$12$$69 = m$$12.fields[3];\n            continue MapTreeModule$$$forall;\n          } else {\n            return false;\n          }\n        }\n\n      default:\n        {\n          return true;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$map(f$$10, m$$13) {\n  switch (m$$13.tag) {\n    case 1:\n      {\n        return new MapTree$00602(1, \"MapOne\", m$$13.fields[0], f$$10(m$$13.fields[1]));\n      }\n\n    case 2:\n      {\n        const l2 = MapTreeModule$$$map(f$$10, m$$13.fields[2]);\n        const v2$$16 = f$$10(m$$13.fields[1]);\n        const r2 = MapTreeModule$$$map(f$$10, m$$13.fields[3]);\n        return new MapTree$00602(2, \"MapNode\", m$$13.fields[0], v2$$16, l2, r2, m$$13.fields[4]);\n      }\n\n    default:\n      {\n        return MapTreeModule$$$empty();\n      }\n  }\n}\nexport function MapTreeModule$$$mapi(f$$11, m$$14) {\n  switch (m$$14.tag) {\n    case 1:\n      {\n        return new MapTree$00602(1, \"MapOne\", m$$14.fields[0], f$$11(m$$14.fields[0], m$$14.fields[1]));\n      }\n\n    case 2:\n      {\n        const l2$$1 = MapTreeModule$$$mapi(f$$11, m$$14.fields[2]);\n        const v2$$17 = f$$11(m$$14.fields[0], m$$14.fields[1]);\n        const r2$$1 = MapTreeModule$$$mapi(f$$11, m$$14.fields[3]);\n        return new MapTree$00602(2, \"MapNode\", m$$14.fields[0], v2$$17, l2$$1, r2$$1, m$$14.fields[4]);\n      }\n\n    default:\n      {\n        return MapTreeModule$$$empty();\n      }\n  }\n}\nexport function MapTreeModule$$$foldBack($f$$12$$74, $m$$15$$75, $x$$1$$76) {\n  MapTreeModule$$$foldBack: while (true) {\n    const f$$12 = $f$$12$$74,\n          m$$15 = $m$$15$$75,\n          x$$1 = $x$$1$$76;\n\n    switch (m$$15.tag) {\n      case 1:\n        {\n          return f$$12(m$$15.fields[0], m$$15.fields[1], x$$1);\n        }\n\n      case 2:\n        {\n          const x$$2 = MapTreeModule$$$foldBack(f$$12, m$$15.fields[3], x$$1);\n          const x$$3 = f$$12(m$$15.fields[0], m$$15.fields[1], x$$2);\n          $f$$12$$74 = f$$12;\n          $m$$15$$75 = m$$15.fields[2];\n          $x$$1$$76 = x$$3;\n          continue MapTreeModule$$$foldBack;\n        }\n\n      default:\n        {\n          return x$$1;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$fold($f$$13$$77, $x$$4$$78, $m$$16$$79) {\n  MapTreeModule$$$fold: while (true) {\n    const f$$13 = $f$$13$$77,\n          x$$4 = $x$$4$$78,\n          m$$16 = $m$$16$$79;\n\n    switch (m$$16.tag) {\n      case 1:\n        {\n          return f$$13(x$$4, m$$16.fields[0], m$$16.fields[1]);\n        }\n\n      case 2:\n        {\n          const x$$5 = MapTreeModule$$$fold(f$$13, x$$4, m$$16.fields[2]);\n          const x$$6 = f$$13(x$$5, m$$16.fields[0], m$$16.fields[1]);\n          $f$$13$$77 = f$$13;\n          $x$$4$$78 = x$$6;\n          $m$$16$$79 = m$$16.fields[3];\n          continue MapTreeModule$$$fold;\n        }\n\n      default:\n        {\n          return x$$4;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$foldFromTo(comparer$$11, lo, hi, f$$14, m$$17, x$$7) {\n  switch (m$$17.tag) {\n    case 1:\n      {\n        const cLoKey = comparer$$11.Compare(lo, m$$17.fields[0]) | 0;\n        const cKeyHi = comparer$$11.Compare(m$$17.fields[0], hi) | 0;\n        const x$$8 = (cLoKey <= 0 ? cKeyHi <= 0 : false) ? f$$14(m$$17.fields[0], m$$17.fields[1], x$$7) : x$$7;\n        return x$$8;\n      }\n\n    case 2:\n      {\n        const cLoKey$$1 = comparer$$11.Compare(lo, m$$17.fields[0]) | 0;\n        const cKeyHi$$1 = comparer$$11.Compare(m$$17.fields[0], hi) | 0;\n        const x$$9 = cLoKey$$1 < 0 ? MapTreeModule$$$foldFromTo(comparer$$11, lo, hi, f$$14, m$$17.fields[2], x$$7) : x$$7;\n        const x$$10 = (cLoKey$$1 <= 0 ? cKeyHi$$1 <= 0 : false) ? f$$14(m$$17.fields[0], m$$17.fields[1], x$$9) : x$$9;\n        const x$$11 = cKeyHi$$1 < 0 ? MapTreeModule$$$foldFromTo(comparer$$11, lo, hi, f$$14, m$$17.fields[3], x$$10) : x$$10;\n        return x$$11;\n      }\n\n    default:\n      {\n        return x$$7;\n      }\n  }\n}\nexport function MapTreeModule$$$foldSection(comparer$$12, lo$$1, hi$$1, f$$15, m$$18, x$$12) {\n  if (comparer$$12.Compare(lo$$1, hi$$1) === 1) {\n    return x$$12;\n  } else {\n    return MapTreeModule$$$foldFromTo(comparer$$12, lo$$1, hi$$1, f$$15, m$$18, x$$12);\n  }\n}\nexport function MapTreeModule$$$loop($m$$19$$92, $acc$$8$$93) {\n  MapTreeModule$$$loop: while (true) {\n    const m$$19 = $m$$19$$92,\n          acc$$8 = $acc$$8$$93;\n\n    switch (m$$19.tag) {\n      case 1:\n        {\n          return new List([m$$19.fields[0], m$$19.fields[1]], acc$$8);\n        }\n\n      case 2:\n        {\n          $m$$19$$92 = m$$19.fields[2];\n          $acc$$8$$93 = new List([m$$19.fields[0], m$$19.fields[1]], MapTreeModule$$$loop(m$$19.fields[3], acc$$8));\n          continue MapTreeModule$$$loop;\n        }\n\n      default:\n        {\n          return acc$$8;\n        }\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$toList(m$$20) {\n  return MapTreeModule$$$loop(m$$20, new List());\n}\nexport function MapTreeModule$$$ofList(comparer$$13, l$$20) {\n  return fold$$1(function (acc$$9, tupledArg) {\n    return MapTreeModule$$$add(comparer$$13, tupledArg[0], tupledArg[1], acc$$9);\n  }, MapTreeModule$$$empty(), l$$20);\n}\nexport function MapTreeModule$$$mkFromEnumerator($comparer$$14$$97, $acc$$10$$98, $e$$99) {\n  MapTreeModule$$$mkFromEnumerator: while (true) {\n    const comparer$$14 = $comparer$$14$$97,\n          acc$$10 = $acc$$10$$98,\n          e = $e$$99;\n\n    if (e.MoveNext()) {\n      const patternInput$$2 = e.Current;\n      $comparer$$14$$97 = comparer$$14;\n      $acc$$10$$98 = MapTreeModule$$$add(comparer$$14, patternInput$$2[0], patternInput$$2[1], acc$$10);\n      $e$$99 = e;\n      continue MapTreeModule$$$mkFromEnumerator;\n    } else {\n      return acc$$10;\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$ofArray(comparer$$15, arr) {\n  let res$$2 = MapTreeModule$$$empty();\n\n  for (let i = 0; i <= arr.length - 1; i++) {\n    const patternInput$$3 = arr[i];\n    res$$2 = MapTreeModule$$$add(comparer$$15, patternInput$$3[0], patternInput$$3[1], res$$2);\n  }\n\n  return res$$2;\n}\nexport function MapTreeModule$$$ofSeq(comparer$$16, c$$9) {\n  const ie = getEnumerator(c$$9);\n\n  try {\n    return MapTreeModule$$$mkFromEnumerator(comparer$$16, MapTreeModule$$$empty(), ie);\n  } finally {\n    if (isDisposable(ie)) {\n      ie.Dispose();\n    }\n  }\n}\nexport function MapTreeModule$$$copyToArray(s$$4, arr$$1, i$$1) {\n  let j = i$$1 | 0;\n  MapTreeModule$$$iter(function f$$16(x$$15, y$$2) {\n    arr$$1[j] = [x$$15, y$$2];\n    j = j + 1;\n  }, s$$4);\n}\nexport const MapTreeModule$002EMapIterator$00602 = declare(function Map_MapTreeModule_MapIterator(arg1, arg2) {\n  this.stack = arg1;\n  this.started = arg2;\n}, Record);\nexport function MapTreeModule$002EMapIterator$00602$reflection($gen$$109, $gen$$110) {\n  return record(\"Map.MapTreeModule.MapIterator`2\", [$gen$$109, $gen$$110], MapTreeModule$002EMapIterator$00602, () => [[\"stack\", list(MapTree$00602$reflection($gen$$109, $gen$$110))], [\"started\", bool]]);\n}\nexport function MapTreeModule$$$collapseLHS($stack$$111) {\n  MapTreeModule$$$collapseLHS: while (true) {\n    const stack = $stack$$111;\n\n    if (stack.tail != null) {\n      if (stack.head.tag === 1) {\n        return stack;\n      } else if (stack.head.tag === 2) {\n        $stack$$111 = new List(stack.head.fields[2], new List(new MapTree$00602(1, \"MapOne\", stack.head.fields[0], stack.head.fields[1]), new List(stack.head.fields[3], stack.tail)));\n        continue MapTreeModule$$$collapseLHS;\n      } else {\n        $stack$$111 = stack.tail;\n        continue MapTreeModule$$$collapseLHS;\n      }\n    } else {\n      return new List();\n    }\n\n    break;\n  }\n}\nexport function MapTreeModule$$$mkIterator(s$$5) {\n  return new MapTreeModule$002EMapIterator$00602(MapTreeModule$$$collapseLHS(new List(s$$5, new List())), false);\n}\nexport function MapTreeModule$$$notStarted() {\n  throw new Error(\"enumeration not started\");\n}\nexport function MapTreeModule$$$alreadyFinished() {\n  throw new Error(\"enumeration already finished\");\n}\nexport function MapTreeModule$$$current(i$$2) {\n  if (i$$2.started) {\n    const matchValue$$4 = i$$2.stack;\n\n    if (matchValue$$4.tail == null) {\n      return MapTreeModule$$$alreadyFinished();\n    } else if (matchValue$$4.head.tag === 1) {\n      return [matchValue$$4.head.fields[0], matchValue$$4.head.fields[1]];\n    } else {\n      throw new Error(\"Please report error: Map iterator, unexpected stack for current\");\n    }\n  } else {\n    return MapTreeModule$$$notStarted();\n  }\n}\nexport function MapTreeModule$$$moveNext(i$$3) {\n  if (i$$3.started) {\n    const matchValue$$5 = i$$3.stack;\n\n    if (matchValue$$5.tail == null) {\n      return false;\n    } else if (matchValue$$5.head.tag === 1) {\n      i$$3.stack = MapTreeModule$$$collapseLHS(matchValue$$5.tail);\n      return !(i$$3.stack.tail == null);\n    } else {\n      throw new Error(\"Please report error: Map iterator, unexpected stack for moveNext\");\n    }\n  } else {\n    i$$3.started = true;\n    return !(i$$3.stack.tail == null);\n  }\n}\nexport const MapTreeModule$002EmkIEnumerator$0027$00602 = declare(function Map_MapTreeModule_mkIEnumerator_(s$$6) {\n  const $this$$1 = this;\n  $this$$1.s = s$$6;\n  $this$$1.i = MapTreeModule$$$mkIterator($this$$1.s);\n});\nexport function MapTreeModule$002EmkIEnumerator$0027$00602$reflection($gen$$115, $gen$$116) {\n  return type(\"Map.MapTreeModule.mkIEnumerator'`2\", [$gen$$115, $gen$$116]);\n}\nexport function MapTreeModule$002EmkIEnumerator$0027$00602$$$$002Ector$$Z26BC498C(s$$6) {\n  return this instanceof MapTreeModule$002EmkIEnumerator$0027$00602 ? MapTreeModule$002EmkIEnumerator$0027$00602.call(this, s$$6) : new MapTreeModule$002EmkIEnumerator$0027$00602(s$$6);\n}\nObject.defineProperty(MapTreeModule$002EmkIEnumerator$0027$00602.prototype, \"Current\", {\n  \"get\": function () {\n    const __ = this;\n    return MapTreeModule$$$current(__.i);\n  }\n});\n\nMapTreeModule$002EmkIEnumerator$0027$00602.prototype.MoveNext = function () {\n  const __$$1 = this;\n  return MapTreeModule$$$moveNext(__$$1.i);\n};\n\nMapTreeModule$002EmkIEnumerator$0027$00602.prototype.Reset = function () {\n  const __$$2 = this;\n  __$$2.i = MapTreeModule$$$mkIterator(__$$2.s);\n};\n\nMapTreeModule$002EmkIEnumerator$0027$00602.prototype.Dispose = function () {};\n\nexport function MapTreeModule$$$mkIEnumerator(s$$7) {\n  return MapTreeModule$002EmkIEnumerator$0027$00602$$$$002Ector$$Z26BC498C(s$$7);\n}\nexport function MapTreeModule$$$toSeq(s$$8) {\n  const en = MapTreeModule$$$mkIEnumerator(s$$8);\n  return unfold(function generator(en$$1) {\n    if (en$$1.MoveNext()) {\n      return [en$$1.Current, en$$1];\n    } else {\n      return null;\n    }\n  }, en);\n}\nexport const FSharpMap = declare(function Map_Map(comparer$$17, tree) {\n  const $this$$2 = this;\n  $this$$2.comparer = comparer$$17;\n  $this$$2.tree = tree;\n});\nexport function FSharpMap$reflection($gen$$120, $gen$$121) {\n  return type(\"Map.FSharpMap\", [$gen$$120, $gen$$121]);\n}\nexport function FSharpMap$$$$002Ector$$58ADD115(comparer$$17, tree) {\n  return this instanceof FSharpMap ? FSharpMap.call(this, comparer$$17, tree) : new FSharpMap(comparer$$17, tree);\n}\nexport function FSharpMap$$get_Comparer(__$$4) {\n  return __$$4.comparer;\n}\nexport function FSharpMap$$get_Tree(__$$5) {\n  return __$$5.tree;\n}\nexport function FSharpMap$$Add$$5BDDA1(__$$6, k$$28, v$$24) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$6.comparer, MapTreeModule$$$add(__$$6.comparer, k$$28, v$$24, __$$6.tree));\n}\nexport function FSharpMap$$get_IsEmpty(__$$7) {\n  return MapTreeModule$$$isEmpty(__$$7.tree);\n}\nexport function FSharpMap$$get_Item$$2B595(__$$8, k$$29) {\n  return MapTreeModule$$$find(__$$8.comparer, k$$29, __$$8.tree);\n}\nexport function FSharpMap$$TryGetValue$$5BDDA1(__$$9, k$$30, defValue) {\n  const matchValue$$6 = MapTreeModule$$$tryFind(__$$9.comparer, k$$30, __$$9.tree);\n\n  if (matchValue$$6 == null) {\n    return [false, defValue];\n  } else {\n    const v$$25 = value$$3(matchValue$$6);\n    return [true, v$$25];\n  }\n}\nexport function FSharpMap$$TryPick$$72321DD7(__$$10, f$$17) {\n  return MapTreeModule$$$tryPick(f$$17, __$$10.tree);\n}\nexport function FSharpMap$$Exists$$Z395DDC35(__$$11, f$$18) {\n  return MapTreeModule$$$exists(f$$18, __$$11.tree);\n}\nexport function FSharpMap$$Filter$$Z395DDC35(__$$12, f$$19) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$12.comparer, MapTreeModule$$$filter(__$$12.comparer, f$$19, __$$12.tree));\n}\nexport function FSharpMap$$ForAll$$Z395DDC35(__$$13, f$$20) {\n  return MapTreeModule$$$forall(f$$20, __$$13.tree);\n}\nexport function FSharpMap$$Fold(__$$14, f$$21, acc$$11) {\n  return MapTreeModule$$$foldBack(f$$21, __$$14.tree, acc$$11);\n}\nexport function FSharpMap$$FoldSection(__$$15, lo$$2, hi$$2, f$$22, acc$$12) {\n  return MapTreeModule$$$foldSection(__$$15.comparer, lo$$2, hi$$2, f$$22, __$$15.tree, acc$$12);\n}\nexport function FSharpMap$$Iterate$$1DCFB91D(__$$16, f$$23) {\n  MapTreeModule$$$iter(f$$23, __$$16.tree);\n}\nexport function FSharpMap$$MapRange$$6DC7247(__$$17, f$$24) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$17.comparer, MapTreeModule$$$map(f$$24, __$$17.tree));\n}\nexport function FSharpMap$$Map$$Z6F6B671C(__$$18, f$$25) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$18.comparer, MapTreeModule$$$mapi(f$$25, __$$18.tree));\n}\nexport function FSharpMap$$Partition$$Z395DDC35(__$$19, f$$26) {\n  const patternInput$$4 = MapTreeModule$$$partition(__$$19.comparer, f$$26, __$$19.tree);\n  return [FSharpMap$$$$002Ector$$58ADD115(__$$19.comparer, patternInput$$4[0]), FSharpMap$$$$002Ector$$58ADD115(__$$19.comparer, patternInput$$4[1])];\n}\nexport function FSharpMap$$get_Count(__$$20) {\n  return MapTreeModule$$$size(__$$20.tree);\n}\nexport function FSharpMap$$ContainsKey$$2B595(__$$21, k$$31) {\n  return MapTreeModule$$$mem(__$$21.comparer, k$$31, __$$21.tree);\n}\nexport function FSharpMap$$Remove$$2B595(__$$22, k$$32) {\n  return FSharpMap$$$$002Ector$$58ADD115(__$$22.comparer, MapTreeModule$$$remove(__$$22.comparer, k$$32, __$$22.tree));\n}\nexport function FSharpMap$$TryFind$$2B595(__$$23, k$$33) {\n  return MapTreeModule$$$tryFind(__$$23.comparer, k$$33, __$$23.tree);\n}\nexport function FSharpMap$$ToList(__$$24) {\n  return MapTreeModule$$$toList(__$$24.tree);\n}\n\nFSharpMap.prototype.toString = function () {\n  var strings;\n  const this$ = this;\n  return \"map [\" + (strings = (map$$2(function mapping(kv) {\n    const clo1 = toText(printf(\"(%A, %A)\"));\n    const clo2 = clo1(kv[0]);\n    return clo2(kv[1]);\n  }, this$)), (join(\"; \", strings))) + \"]\";\n};\n\nFSharpMap.prototype.GetHashCode = function () {\n  const this$$$1 = this;\n\n  const combineHash = function combineHash(x$$16, y$$3) {\n    return (x$$16 << 1) + y$$3 + 631;\n  };\n\n  let res$$3 = 0;\n  const e$$1 = MapTreeModule$$$mkIEnumerator(FSharpMap$$get_Tree(this$$$1));\n\n  while (e$$1.MoveNext()) {\n    const patternInput$$5 = e$$1.Current;\n    const activePatternResult3676 = patternInput$$5;\n    res$$3 = combineHash(res$$3, structuralHash(activePatternResult3676[0]));\n    res$$3 = combineHash(res$$3, structuralHash(activePatternResult3676[1]));\n  }\n\n  return Math.abs(res$$3) | 0;\n};\n\nFSharpMap.prototype.Equals = function (that) {\n  const this$$$2 = this;\n  return this$$$2.CompareTo(that) === 0;\n};\n\nFSharpMap.prototype[Symbol.iterator] = function () {\n  const __$$25 = this;\n  return toIterator(MapTreeModule$$$mkIEnumerator(__$$25.tree));\n};\n\nFSharpMap.prototype.CompareTo = function (obj) {\n  const m$$22 = this;\n  let res$$4 = 0;\n  let finished = false;\n  const e1 = MapTreeModule$$$mkIEnumerator(FSharpMap$$get_Tree(m$$22));\n\n  try {\n    const e2 = MapTreeModule$$$mkIEnumerator(FSharpMap$$get_Tree(obj));\n\n    try {\n      while (!finished ? res$$4 === 0 : false) {\n        const matchValue$$7 = [e1.MoveNext(), e2.MoveNext()];\n\n        if (matchValue$$7[0]) {\n          if (matchValue$$7[1]) {\n            const kvp1 = e1.Current;\n            const kvp2 = e2.Current;\n            const c$$10 = m$$22.comparer.Compare(kvp1[0], kvp2[0]) | 0;\n            res$$4 = c$$10 !== 0 ? c$$10 : compare(kvp1[1], kvp2[1]);\n          } else {\n            res$$4 = 1;\n          }\n        } else if (matchValue$$7[1]) {\n          res$$4 = -1;\n        } else {\n          finished = true;\n        }\n      }\n\n      return res$$4 | 0;\n    } finally {\n      if (isDisposable(e2)) {\n        e2.Dispose();\n      }\n    }\n  } finally {\n    if (isDisposable(e1)) {\n      e1.Dispose();\n    }\n  }\n};\n\nObject.defineProperty(FSharpMap.prototype, \"size\", {\n  \"get\": function () {\n    const this$$$3 = this;\n    return FSharpMap$$get_Count(this$$$3) | 0;\n  }\n});\n\nFSharpMap.prototype.clear = function () {\n  throw new Error(\"Map cannot be mutated\");\n};\n\nFSharpMap.prototype.delete = function (_arg1$$1) {\n  throw new Error(\"Map cannot be mutated\");\n};\n\nFSharpMap.prototype.entries = function () {\n  const this$$$4 = this;\n  return MapTreeModule$$$toSeq(FSharpMap$$get_Tree(this$$$4));\n};\n\nFSharpMap.prototype.get = function (k$$34) {\n  const this$$$5 = this;\n  return FSharpMap$$get_Item$$2B595(this$$$5, k$$34);\n};\n\nFSharpMap.prototype.has = function (k$$35) {\n  const this$$$6 = this;\n  return FSharpMap$$ContainsKey$$2B595(this$$$6, k$$35);\n};\n\nFSharpMap.prototype.keys = function () {\n  const this$$$7 = this;\n  const source$$1 = MapTreeModule$$$toSeq(FSharpMap$$get_Tree(this$$$7));\n  return map$$2(function mapping$$1(kv$$1) {\n    return kv$$1[0];\n  }, source$$1);\n};\n\nFSharpMap.prototype.set = function (k$$36, v$$26) {\n  throw new Error(\"Map cannot be mutated\");\n};\n\nFSharpMap.prototype.values = function () {\n  const this$$$8 = this;\n  const source$$2 = MapTreeModule$$$toSeq(FSharpMap$$get_Tree(this$$$8));\n  return map$$2(function mapping$$2(kv$$2) {\n    return kv$$2[1];\n  }, source$$2);\n};\n\nexport function isEmpty(m$$23) {\n  return FSharpMap$$get_IsEmpty(m$$23);\n}\nexport function add(k$$37, v$$27, m$$24) {\n  return FSharpMap$$Add$$5BDDA1(m$$24, k$$37, v$$27);\n}\nexport function find(k$$38, m$$25) {\n  return FSharpMap$$get_Item$$2B595(m$$25, k$$38);\n}\nexport function tryFind(k$$39, m$$26) {\n  return FSharpMap$$TryFind$$2B595(m$$26, k$$39);\n}\nexport function remove(k$$40, m$$27) {\n  return FSharpMap$$Remove$$2B595(m$$27, k$$40);\n}\nexport function containsKey(k$$41, m$$28) {\n  return FSharpMap$$ContainsKey$$2B595(m$$28, k$$41);\n}\nexport function iterate(f$$27, m$$29) {\n  FSharpMap$$Iterate$$1DCFB91D(m$$29, f$$27);\n}\nexport function tryPick(f$$28, m$$30) {\n  return FSharpMap$$TryPick$$72321DD7(m$$30, f$$28);\n}\nexport function pick(f$$29, m$$31) {\n  const matchValue$$8 = tryPick(f$$29, m$$31);\n\n  if (matchValue$$8 != null) {\n    const res$$5 = value$$3(matchValue$$8);\n    return res$$5;\n  } else {\n    throw new Error(\"key not found\");\n  }\n}\nexport function exists(f$$30, m$$32) {\n  return FSharpMap$$Exists$$Z395DDC35(m$$32, f$$30);\n}\nexport function filter(f$$31, m$$33) {\n  return FSharpMap$$Filter$$Z395DDC35(m$$33, f$$31);\n}\nexport function partition(f$$32, m$$34) {\n  return FSharpMap$$Partition$$Z395DDC35(m$$34, f$$32);\n}\nexport function forAll(f$$33, m$$35) {\n  return FSharpMap$$ForAll$$Z395DDC35(m$$35, f$$33);\n}\nexport function mapRange(f$$34, m$$36) {\n  return FSharpMap$$MapRange$$6DC7247(m$$36, f$$34);\n}\nexport function map(f$$35, m$$37) {\n  return FSharpMap$$Map$$Z6F6B671C(m$$37, f$$35);\n}\nexport function fold(f$$36, z, m$$38) {\n  return MapTreeModule$$$fold(f$$36, z, FSharpMap$$get_Tree(m$$38));\n}\nexport function foldBack(f$$37, m$$39, z$$1) {\n  return MapTreeModule$$$foldBack(f$$37, FSharpMap$$get_Tree(m$$39), z$$1);\n}\nexport function toSeq(m$$40) {\n  return MapTreeModule$$$toSeq(FSharpMap$$get_Tree(m$$40));\n}\nexport function findKey(f$$38, m$$41) {\n  let _arg1$$2;\n\n  const m$$42 = FSharpMap$$get_Tree(m$$41);\n  _arg1$$2 = MapTreeModule$$$tryPick(function f$$39(k$$42, v$$28) {\n    if (f$$38(k$$42, v$$28)) {\n      return some(k$$42);\n    } else {\n      return null;\n    }\n  }, m$$42);\n\n  if (_arg1$$2 == null) {\n    throw new Error(\"Key not found\");\n  } else {\n    const k$$43 = value$$3(_arg1$$2);\n    return k$$43;\n  }\n}\nexport function tryFindKey(f$$40, m$$43) {\n  const m$$44 = FSharpMap$$get_Tree(m$$43);\n  return MapTreeModule$$$tryPick(function f$$41(k$$44, v$$29) {\n    if (f$$40(k$$44, v$$29)) {\n      return some(k$$44);\n    } else {\n      return null;\n    }\n  }, m$$44);\n}\nexport function ofList(l$$22, comparer$$18) {\n  return FSharpMap$$$$002Ector$$58ADD115(comparer$$18, MapTreeModule$$$ofList(comparer$$18, l$$22));\n}\nexport function ofSeq(l$$23, comparer$$19) {\n  return FSharpMap$$$$002Ector$$58ADD115(comparer$$19, MapTreeModule$$$ofSeq(comparer$$19, l$$23));\n}\nexport function ofArray(array, comparer$$20) {\n  return FSharpMap$$$$002Ector$$58ADD115(comparer$$20, MapTreeModule$$$ofArray(comparer$$20, array));\n}\nexport function toList(m$$45) {\n  return FSharpMap$$ToList(m$$45);\n}\nexport function toArray(m$$46) {\n  let res$$6;\n  const len = FSharpMap$$get_Count(m$$46) | 0;\n  res$$6 = new Array(len);\n  MapTreeModule$$$copyToArray(FSharpMap$$get_Tree(m$$46), res$$6, 0);\n  return res$$6;\n}\nexport function empty(comparer$$21) {\n  return FSharpMap$$$$002Ector$$58ADD115(comparer$$21, new MapTree$00602(0, \"MapEmpty\"));\n}\n\nfunction createMutablePrivate(comparer$$22, tree$0027) {\n  let tree$$1 = tree$0027;\n  return {\n    get size() {\n      return MapTreeModule$$$size(tree$$1);\n    },\n\n    clear() {\n      tree$$1 = new MapTree$00602(0, \"MapEmpty\");\n    },\n\n    delete(x$$18) {\n      if (MapTreeModule$$$mem(comparer$$22, x$$18, tree$$1)) {\n        tree$$1 = MapTreeModule$$$remove(comparer$$22, x$$18, tree$$1);\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    entries() {\n      return MapTreeModule$$$toSeq(tree$$1);\n    },\n\n    get(k$$45) {\n      return MapTreeModule$$$find(comparer$$22, k$$45, tree$$1);\n    },\n\n    has(x$$19) {\n      return MapTreeModule$$$mem(comparer$$22, x$$19, tree$$1);\n    },\n\n    keys() {\n      const source$$3 = MapTreeModule$$$toSeq(tree$$1);\n      return map$$2(function mapping$$3(kv$$3) {\n        return kv$$3[0];\n      }, source$$3);\n    },\n\n    set(k$$46, v$$30) {\n      const this$$$9 = this;\n      tree$$1 = MapTreeModule$$$add(comparer$$22, k$$46, v$$30, tree$$1);\n      return this$$$9;\n    },\n\n    values() {\n      const source$$4 = MapTreeModule$$$toSeq(tree$$1);\n      return map$$2(function mapping$$4(kv$$4) {\n        return kv$$4[1];\n      }, source$$4);\n    },\n\n    [Symbol.iterator]() {\n      return toIterator(MapTreeModule$$$mkIEnumerator(tree$$1));\n    },\n\n    GetEnumerator() {\n      return MapTreeModule$$$mkIEnumerator(tree$$1);\n    }\n\n  };\n}\n\nexport function createMutable(source$$5, comparer$$23) {\n  const map$$1 = MutableMap$002400602$0024$0024$0024$0024002Ector$0024$00246623D9B3(source$$5, comparer$$23);\n  return map$$1;\n}\nexport function groupBy(projection, xs, comparer$$24) {\n  const dict = createMutable(empty$$1(), comparer$$24);\n  iterate$$1(function (v$$31) {\n    const key = projection(v$$31);\n\n    if (dict.has(key)) {\n      dict.get(key).push(v$$31);\n    } else {\n      const value = dict.set(key, [v$$31]);\n      value, null;\n    }\n  }, xs);\n  return map$$2(function mapping$$5(kv$$5) {\n    return [kv$$5[0], kv$$5[1]];\n  }, dict);\n}\nexport function countBy(projection$$1, xs$$1, comparer$$25) {\n  const dict$$1 = createMutable(empty$$1(), comparer$$25);\n  iterate$$1(function (value$$1) {\n    const key$$1 = projection$$1(value$$1);\n    const value$$2 = dict$$1.has(key$$1) ? dict$$1.set(key$$1, dict$$1.get(key$$1) + 1) : dict$$1.set(key$$1, 1);\n    value$$2, null;\n  }, xs$$1);\n  return map$$2(function mapping$$6(kv$$6) {\n    return [kv$$6[0], kv$$6[1]];\n  }, dict$$1);\n}\nexport function count(m$$47) {\n  return FSharpMap$$get_Count(m$$47);\n}","import { declare, FSharpRef } from \"./Types.js\";\nimport { iterateIndexed, toIterator, getEnumerator, delay, collect, map, sumBy, iterate } from \"./Seq.js\";\nimport { type } from \"./Reflection.js\";\nimport { getItemFromDict, tryGetValue } from \"./Util.js\";\nimport { some } from \"./Option.js\";\nexport const MutableSet$00601 = declare(function Fable_Collections_MutableSet(items, comparer) {\n  const $this$$1 = this;\n  const this$ = new FSharpRef(null);\n  $this$$1.comparer = comparer;\n  this$.contents = $this$$1;\n  $this$$1[\"entries@24\"] = new Map([]);\n  $this$$1[\"init@21-2\"] = 1;\n  iterate(function (item) {\n    const value = MutableSet$00601$$Add$$2B595(this$.contents, item);\n    value, null;\n  }, items);\n});\nexport function MutableSet$00601$reflection($gen$$4) {\n  return type(\"Fable.Collections.MutableSet`1\", [$gen$$4]);\n}\nexport function MutableSet$00601$$$$002Ector$$Z6150332D(items, comparer) {\n  return this instanceof MutableSet$00601 ? MutableSet$00601.call(this, items, comparer) : new MutableSet$00601(items, comparer);\n}\n\nfunction MutableSet$00601$$TryFindIndex$$2B595(this$$$1, k) {\n  const h = this$$$1.comparer.GetHashCode(k) | 0;\n  const matchValue = tryGetValue(this$$$1[\"entries@24\"], h, null);\n\n  if (matchValue[0]) {\n    return [true, h, matchValue[1].findIndex(function (v) {\n      return this$$$1.comparer.Equals(k, v);\n    })];\n  } else {\n    return [false, h, -1];\n  }\n}\n\nfunction MutableSet$00601$$TryFind$$2B595(this$$$2, k$$1) {\n  const matchValue$$1 = MutableSet$00601$$TryFindIndex$$2B595(this$$$2, k$$1);\n  var $target$$9;\n\n  if (matchValue$$1[0]) {\n    if (matchValue$$1[2] > -1) {\n      $target$$9 = 0;\n    } else {\n      $target$$9 = 1;\n    }\n  } else {\n    $target$$9 = 1;\n  }\n\n  switch ($target$$9) {\n    case 0:\n      {\n        return some(getItemFromDict(this$$$2[\"entries@24\"], matchValue$$1[1])[matchValue$$1[2]]);\n      }\n\n    case 1:\n      {\n        return null;\n      }\n  }\n}\n\nexport function MutableSet$00601$$get_Comparer(this$$$3) {\n  return this$$$3.comparer;\n}\nexport function MutableSet$00601$$Clear(this$$$4) {\n  this$$$4[\"entries@24\"].clear();\n}\nexport function MutableSet$00601$$get_Count(this$$$5) {\n  const source = this$$$5[\"entries@24\"].values();\n  return sumBy(function projection(pairs) {\n    return pairs.length;\n  }, source, {\n    GetZero() {\n      return 0;\n    },\n\n    Add($x$$2, $y$$3) {\n      return $x$$2 + $y$$3;\n    }\n\n  }) | 0;\n}\nexport function MutableSet$00601$$Add$$2B595(this$$$6, k$$2) {\n  const matchValue$$2 = MutableSet$00601$$TryFindIndex$$2B595(this$$$6, k$$2);\n  var $target$$16;\n\n  if (matchValue$$2[0]) {\n    if (matchValue$$2[2] > -1) {\n      $target$$16 = 0;\n    } else {\n      $target$$16 = 1;\n    }\n  } else {\n    $target$$16 = 1;\n  }\n\n  switch ($target$$16) {\n    case 0:\n      {\n        return false;\n      }\n\n    case 1:\n      {\n        if (matchValue$$2[0]) {\n          const value$$1 = getItemFromDict(this$$$6[\"entries@24\"], matchValue$$2[1]).push(k$$2);\n          null, null;\n          return true;\n        } else {\n          this$$$6[\"entries@24\"].set(matchValue$$2[1], [k$$2]);\n          return true;\n        }\n      }\n  }\n}\nexport function MutableSet$00601$$Contains$$2B595(this$$$7, k$$3) {\n  const matchValue$$3 = MutableSet$00601$$TryFindIndex$$2B595(this$$$7, k$$3);\n  var $target$$19;\n\n  if (matchValue$$3[0]) {\n    if (matchValue$$3[2] > -1) {\n      $target$$19 = 0;\n    } else {\n      $target$$19 = 1;\n    }\n  } else {\n    $target$$19 = 1;\n  }\n\n  switch ($target$$19) {\n    case 0:\n      {\n        return true;\n      }\n\n    case 1:\n      {\n        return false;\n      }\n  }\n}\nexport function MutableSet$00601$$Remove$$2B595(this$$$8, k$$4) {\n  const matchValue$$4 = MutableSet$00601$$TryFindIndex$$2B595(this$$$8, k$$4);\n  var $target$$22;\n\n  if (matchValue$$4[0]) {\n    if (matchValue$$4[2] > -1) {\n      $target$$22 = 0;\n    } else {\n      $target$$22 = 1;\n    }\n  } else {\n    $target$$22 = 1;\n  }\n\n  switch ($target$$22) {\n    case 0:\n      {\n        getItemFromDict(this$$$8[\"entries@24\"], matchValue$$4[1]).splice(matchValue$$4[2], 1);\n        return true;\n      }\n\n    case 1:\n      {\n        return false;\n      }\n  }\n}\n\nMutableSet$00601.prototype[Symbol.iterator] = function () {\n  var elems;\n  const this$$$9 = this;\n  return toIterator((elems = delay(function () {\n    return collect(function (values$$1) {\n      return map(function (value$$2) {\n        return value$$2;\n      }, values$$1);\n    }, this$$$9[\"entries@24\"].values());\n  }), getEnumerator(elems)));\n};\n\nMutableSet$00601.prototype.Add = function (item$$1) {\n  const this$$$10 = this;\n  const value$$3 = MutableSet$00601$$Add$$2B595(this$$$10, item$$1);\n  value$$3, null;\n};\n\nMutableSet$00601.prototype.Clear = function () {\n  const this$$$11 = this;\n  MutableSet$00601$$Clear(this$$$11);\n};\n\nMutableSet$00601.prototype.Contains = function (item$$2) {\n  const this$$$12 = this;\n  return MutableSet$00601$$Contains$$2B595(this$$$12, item$$2);\n};\n\nMutableSet$00601.prototype.CopyTo = function (array, arrayIndex) {\n  const this$$$13 = this;\n  iterateIndexed(function action(i$$8, e) {\n    array[arrayIndex + i$$8] = e;\n  }, this$$$13);\n};\n\nObject.defineProperty(MutableSet$00601.prototype, \"Count\", {\n  \"get\": function () {\n    const this$$$14 = this;\n    return MutableSet$00601$$get_Count(this$$$14) | 0;\n  }\n});\nObject.defineProperty(MutableSet$00601.prototype, \"IsReadOnly\", {\n  \"get\": function () {\n    return false;\n  }\n});\n\nMutableSet$00601.prototype.Remove = function (item$$3) {\n  const this$$$16 = this;\n  return MutableSet$00601$$Remove$$2B595(this$$$16, item$$3);\n};\n\nObject.defineProperty(MutableSet$00601.prototype, \"size\", {\n  \"get\": function () {\n    const this$$$17 = this;\n    return MutableSet$00601$$get_Count(this$$$17) | 0;\n  }\n});\n\nMutableSet$00601.prototype.add = function (k$$5) {\n  const this$$$18 = this;\n  const value$$4 = MutableSet$00601$$Add$$2B595(this$$$18, k$$5);\n  value$$4, null;\n  return this$$$18;\n};\n\nMutableSet$00601.prototype.add_ = function (k$$6) {\n  const this$$$19 = this;\n  return MutableSet$00601$$Add$$2B595(this$$$19, k$$6);\n};\n\nMutableSet$00601.prototype.clear = function () {\n  const this$$$20 = this;\n  MutableSet$00601$$Clear(this$$$20);\n};\n\nMutableSet$00601.prototype.delete = function (k$$7) {\n  const this$$$21 = this;\n  return MutableSet$00601$$Remove$$2B595(this$$$21, k$$7);\n};\n\nMutableSet$00601.prototype.has = function (k$$8) {\n  const this$$$22 = this;\n  return MutableSet$00601$$Contains$$2B595(this$$$22, k$$8);\n};\n\nMutableSet$00601.prototype.keys = function () {\n  const this$$$23 = this;\n  return map(function mapping(x) {\n    return x;\n  }, this$$$23);\n};\n\nMutableSet$00601.prototype.values = function () {\n  const this$$$24 = this;\n  return map(function mapping$$1(x$$1) {\n    return x$$1;\n  }, this$$$24);\n};\n\nMutableSet$00601.prototype.entries = function () {\n  const this$$$25 = this;\n  return map(function mapping$$2(v$$1) {\n    return [v$$1, v$$1];\n  }, this$$$25);\n};","import { List, Record, declare, Union } from \"./Types.js\";\nimport { type, record, bool, list, union as union$$1, int32 } from \"./Reflection.js\";\nimport { value as value$$2, some, Choice } from \"./Option.js\";\nimport { iterate as iterate$$1, delay, collect, singleton as singleton$$1, empty as empty$$1, fold as fold$$1, toIterator, map as map$$1, reduce, getEnumerator, unfold } from \"./Seq.js\";\nimport { structuralHash, isDisposable } from \"./Util.js\";\nimport { join } from \"./String.js\";\nimport { MutableSet$00601$$Add$$2B595 as MutableSet$002400601$0024$0024Add$0024$00242B595, MutableSet$00601$$$$002Ector$$Z6150332D as MutableSet$002400601$0024$0024$0024$0024002Ector$0024$0024Z6150332D } from \"./MutableSet\";\nexport const SetTree$00601 = declare(function Set_SetTree(tag, name, ...fields) {\n  Union.call(this, tag, name, ...fields);\n}, Union);\nexport function SetTree$00601$reflection($gen$$3) {\n  return union$$1(\"Set.SetTree`1\", [$gen$$3], SetTree$00601, () => [\"SetEmpty\", [\"SetNode\", [$gen$$3, SetTree$00601$reflection($gen$$3), SetTree$00601$reflection($gen$$3), int32]], [\"SetOne\", [$gen$$3]]]);\n}\nexport function SetTreeModule$$$countAux($s$$4, $acc$$5) {\n  SetTreeModule$$$countAux: while (true) {\n    const s = $s$$4,\n          acc = $acc$$5;\n\n    switch (s.tag) {\n      case 2:\n        {\n          return acc + 1 | 0;\n        }\n\n      case 0:\n        {\n          return acc | 0;\n        }\n\n      default:\n        {\n          $s$$4 = s.fields[1];\n          $acc$$5 = SetTreeModule$$$countAux(s.fields[2], acc + 1);\n          continue SetTreeModule$$$countAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$count(s$$1) {\n  return SetTreeModule$$$countAux(s$$1, 0);\n}\nexport function SetTreeModule$$$SetOne(n) {\n  return new SetTree$00601(2, \"SetOne\", n);\n}\nexport function SetTreeModule$$$SetNode(x, l$$1, r$$1, h) {\n  return new SetTree$00601(1, \"SetNode\", x, l$$1, r$$1, h);\n}\nexport function SetTreeModule$$$height(t) {\n  switch (t.tag) {\n    case 2:\n      {\n        return 1;\n      }\n\n    case 1:\n      {\n        return t.fields[3] | 0;\n      }\n\n    default:\n      {\n        return 0;\n      }\n  }\n}\nexport const SetTreeModule$$$tolerance = 2;\nexport function SetTreeModule$$$mk(l$$2, k, r$$2) {\n  var $target$$16;\n\n  if (l$$2.tag === 0) {\n    if (r$$2.tag === 0) {\n      $target$$16 = 0;\n    } else {\n      $target$$16 = 1;\n    }\n  } else {\n    $target$$16 = 1;\n  }\n\n  switch ($target$$16) {\n    case 0:\n      {\n        return SetTreeModule$$$SetOne(k);\n      }\n\n    case 1:\n      {\n        const hl = SetTreeModule$$$height(l$$2) | 0;\n        const hr = SetTreeModule$$$height(r$$2) | 0;\n        const m = (hl < hr ? hr : hl) | 0;\n        return SetTreeModule$$$SetNode(k, l$$2, r$$2, m + 1);\n      }\n  }\n}\nexport function SetTreeModule$$$rebalance(t1, k$$1, t2) {\n  const t1h = SetTreeModule$$$height(t1) | 0;\n  const t2h = SetTreeModule$$$height(t2) | 0;\n\n  if (t2h > t1h + SetTreeModule$$$tolerance) {\n    if (t2.tag === 1) {\n      if (SetTreeModule$$$height(t2.fields[1]) > t1h + 1) {\n        if (t2.fields[1].tag === 1) {\n          return SetTreeModule$$$mk(SetTreeModule$$$mk(t1, k$$1, t2.fields[1].fields[1]), t2.fields[1].fields[0], SetTreeModule$$$mk(t2.fields[1].fields[2], t2.fields[0], t2.fields[2]));\n        } else {\n          throw new Error(\"rebalance\");\n        }\n      } else {\n        return SetTreeModule$$$mk(SetTreeModule$$$mk(t1, k$$1, t2.fields[1]), t2.fields[0], t2.fields[2]);\n      }\n    } else {\n      throw new Error(\"rebalance\");\n    }\n  } else if (t1h > t2h + SetTreeModule$$$tolerance) {\n    if (t1.tag === 1) {\n      if (SetTreeModule$$$height(t1.fields[2]) > t2h + 1) {\n        if (t1.fields[2].tag === 1) {\n          return SetTreeModule$$$mk(SetTreeModule$$$mk(t1.fields[1], t1.fields[0], t1.fields[2].fields[1]), t1.fields[2].fields[0], SetTreeModule$$$mk(t1.fields[2].fields[2], k$$1, t2));\n        } else {\n          throw new Error(\"rebalance\");\n        }\n      } else {\n        return SetTreeModule$$$mk(t1.fields[1], t1.fields[0], SetTreeModule$$$mk(t1.fields[2], k$$1, t2));\n      }\n    } else {\n      throw new Error(\"rebalance\");\n    }\n  } else {\n    return SetTreeModule$$$mk(t1, k$$1, t2);\n  }\n}\nexport function SetTreeModule$$$add(comparer, k$$2, t$$1) {\n  switch (t$$1.tag) {\n    case 2:\n      {\n        const c$$1 = comparer.Compare(k$$2, t$$1.fields[0]) | 0;\n\n        if (c$$1 < 0) {\n          return SetTreeModule$$$SetNode(k$$2, new SetTree$00601(0, \"SetEmpty\"), t$$1, 2);\n        } else if (c$$1 === 0) {\n          return t$$1;\n        } else {\n          return SetTreeModule$$$SetNode(k$$2, t$$1, new SetTree$00601(0, \"SetEmpty\"), 2);\n        }\n      }\n\n    case 0:\n      {\n        return SetTreeModule$$$SetOne(k$$2);\n      }\n\n    default:\n      {\n        const c = comparer.Compare(k$$2, t$$1.fields[0]) | 0;\n\n        if (c < 0) {\n          return SetTreeModule$$$rebalance(SetTreeModule$$$add(comparer, k$$2, t$$1.fields[1]), t$$1.fields[0], t$$1.fields[2]);\n        } else if (c === 0) {\n          return t$$1;\n        } else {\n          return SetTreeModule$$$rebalance(t$$1.fields[1], t$$1.fields[0], SetTreeModule$$$add(comparer, k$$2, t$$1.fields[2]));\n        }\n      }\n  }\n}\nexport function SetTreeModule$$$balance(comparer$$1, t1$$1, k$$3, t2$$1) {\n  var $target$$27, t2$$2, t1$$2, k1, t2$$3, k2$$2, t1$$3, h1, h2, k1$$1, k2$$3, t11, t12, t21, t22;\n\n  if (t1$$1.tag === 2) {\n    if (t2$$1.tag === 0) {\n      $target$$27 = 1;\n      t1$$2 = t1$$1;\n    } else if (t2$$1.tag === 2) {\n      $target$$27 = 2;\n      k1 = t1$$1.fields[0];\n      t2$$3 = t2$$1;\n    } else {\n      $target$$27 = 2;\n      k1 = t1$$1.fields[0];\n      t2$$3 = t2$$1;\n    }\n  } else if (t1$$1.tag === 1) {\n    if (t2$$1.tag === 2) {\n      $target$$27 = 3;\n      k2$$2 = t2$$1.fields[0];\n      t1$$3 = t1$$1;\n    } else if (t2$$1.tag === 1) {\n      $target$$27 = 4;\n      h1 = t1$$1.fields[3];\n      h2 = t2$$1.fields[3];\n      k1$$1 = t1$$1.fields[0];\n      k2$$3 = t2$$1.fields[0];\n      t11 = t1$$1.fields[1];\n      t12 = t1$$1.fields[2];\n      t21 = t2$$1.fields[1];\n      t22 = t2$$1.fields[2];\n    } else {\n      $target$$27 = 1;\n      t1$$2 = t1$$1;\n    }\n  } else {\n    $target$$27 = 0;\n    t2$$2 = t2$$1;\n  }\n\n  switch ($target$$27) {\n    case 0:\n      {\n        return SetTreeModule$$$add(comparer$$1, k$$3, t2$$2);\n      }\n\n    case 1:\n      {\n        return SetTreeModule$$$add(comparer$$1, k$$3, t1$$2);\n      }\n\n    case 2:\n      {\n        return SetTreeModule$$$add(comparer$$1, k$$3, SetTreeModule$$$add(comparer$$1, k1, t2$$3));\n      }\n\n    case 3:\n      {\n        return SetTreeModule$$$add(comparer$$1, k$$3, SetTreeModule$$$add(comparer$$1, k2$$2, t1$$3));\n      }\n\n    case 4:\n      {\n        if (h1 + SetTreeModule$$$tolerance < h2) {\n          return SetTreeModule$$$rebalance(SetTreeModule$$$balance(comparer$$1, t1$$1, k$$3, t21), k2$$3, t22);\n        } else if (h2 + SetTreeModule$$$tolerance < h1) {\n          return SetTreeModule$$$rebalance(t11, k1$$1, SetTreeModule$$$balance(comparer$$1, t12, k$$3, t2$$1));\n        } else {\n          return SetTreeModule$$$mk(t1$$1, k$$3, t2$$1);\n        }\n      }\n  }\n}\nexport function SetTreeModule$$$split(comparer$$2, pivot, t$$2) {\n  switch (t$$2.tag) {\n    case 2:\n      {\n        const c$$3 = comparer$$2.Compare(t$$2.fields[0], pivot) | 0;\n\n        if (c$$3 < 0) {\n          return [t$$2, false, new SetTree$00601(0, \"SetEmpty\")];\n        } else if (c$$3 === 0) {\n          return [new SetTree$00601(0, \"SetEmpty\"), true, new SetTree$00601(0, \"SetEmpty\")];\n        } else {\n          return [new SetTree$00601(0, \"SetEmpty\"), false, t$$2];\n        }\n      }\n\n    case 0:\n      {\n        return [new SetTree$00601(0, \"SetEmpty\"), false, new SetTree$00601(0, \"SetEmpty\")];\n      }\n\n    default:\n      {\n        const c$$2 = comparer$$2.Compare(pivot, t$$2.fields[0]) | 0;\n\n        if (c$$2 < 0) {\n          const patternInput = SetTreeModule$$$split(comparer$$2, pivot, t$$2.fields[1]);\n          return [patternInput[0], patternInput[1], SetTreeModule$$$balance(comparer$$2, patternInput[2], t$$2.fields[0], t$$2.fields[2])];\n        } else if (c$$2 === 0) {\n          return [t$$2.fields[1], true, t$$2.fields[2]];\n        } else {\n          const patternInput$$1 = SetTreeModule$$$split(comparer$$2, pivot, t$$2.fields[2]);\n          return [SetTreeModule$$$balance(comparer$$2, t$$2.fields[1], t$$2.fields[0], patternInput$$1[0]), patternInput$$1[1], patternInput$$1[2]];\n        }\n      }\n  }\n}\nexport function SetTreeModule$$$spliceOutSuccessor(t$$3) {\n  switch (t$$3.tag) {\n    case 2:\n      {\n        return [t$$3.fields[0], new SetTree$00601(0, \"SetEmpty\")];\n      }\n\n    case 1:\n      {\n        if (t$$3.fields[1].tag === 0) {\n          return [t$$3.fields[0], t$$3.fields[2]];\n        } else {\n          const patternInput$$2 = SetTreeModule$$$spliceOutSuccessor(t$$3.fields[1]);\n          return [patternInput$$2[0], SetTreeModule$$$mk(patternInput$$2[1], t$$3.fields[0], t$$3.fields[2])];\n        }\n      }\n\n    default:\n      {\n        throw new Error(\"internal error: Set.spliceOutSuccessor\");\n      }\n  }\n}\nexport function SetTreeModule$$$remove(comparer$$3, k$$4, t$$4) {\n  switch (t$$4.tag) {\n    case 2:\n      {\n        const c$$4 = comparer$$3.Compare(k$$4, t$$4.fields[0]) | 0;\n\n        if (c$$4 === 0) {\n          return new SetTree$00601(0, \"SetEmpty\");\n        } else {\n          return t$$4;\n        }\n      }\n\n    case 1:\n      {\n        const c$$5 = comparer$$3.Compare(k$$4, t$$4.fields[0]) | 0;\n\n        if (c$$5 < 0) {\n          return SetTreeModule$$$rebalance(SetTreeModule$$$remove(comparer$$3, k$$4, t$$4.fields[1]), t$$4.fields[0], t$$4.fields[2]);\n        } else if (c$$5 === 0) {\n          if (t$$4.fields[1].tag === 0) {\n            return t$$4.fields[2];\n          } else if (t$$4.fields[2].tag === 0) {\n            return t$$4.fields[1];\n          } else {\n            const patternInput$$3 = SetTreeModule$$$spliceOutSuccessor(t$$4.fields[2]);\n            return SetTreeModule$$$mk(t$$4.fields[1], patternInput$$3[0], patternInput$$3[1]);\n          }\n        } else {\n          return SetTreeModule$$$rebalance(t$$4.fields[1], t$$4.fields[0], SetTreeModule$$$remove(comparer$$3, k$$4, t$$4.fields[2]));\n        }\n      }\n\n    default:\n      {\n        return t$$4;\n      }\n  }\n}\nexport function SetTreeModule$$$mem($comparer$$4$$35, $k$$5$$36, $t$$5$$37) {\n  SetTreeModule$$$mem: while (true) {\n    const comparer$$4 = $comparer$$4$$35,\n          k$$5 = $k$$5$$36,\n          t$$5 = $t$$5$$37;\n\n    switch (t$$5.tag) {\n      case 2:\n        {\n          return comparer$$4.Compare(k$$5, t$$5.fields[0]) === 0;\n        }\n\n      case 0:\n        {\n          return false;\n        }\n\n      default:\n        {\n          const c$$6 = comparer$$4.Compare(k$$5, t$$5.fields[0]) | 0;\n\n          if (c$$6 < 0) {\n            $comparer$$4$$35 = comparer$$4;\n            $k$$5$$36 = k$$5;\n            $t$$5$$37 = t$$5.fields[1];\n            continue SetTreeModule$$$mem;\n          } else if (c$$6 === 0) {\n            return true;\n          } else {\n            $comparer$$4$$35 = comparer$$4;\n            $k$$5$$36 = k$$5;\n            $t$$5$$37 = t$$5.fields[2];\n            continue SetTreeModule$$$mem;\n          }\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$iter($f$$38, $t$$6$$39) {\n  SetTreeModule$$$iter: while (true) {\n    const f = $f$$38,\n          t$$6 = $t$$6$$39;\n\n    switch (t$$6.tag) {\n      case 2:\n        {\n          f(t$$6.fields[0]);\n          break;\n        }\n\n      case 0:\n        {\n          break;\n        }\n\n      default:\n        {\n          SetTreeModule$$$iter(f, t$$6.fields[1]);\n          f(t$$6.fields[0]);\n          $f$$38 = f;\n          $t$$6$$39 = t$$6.fields[2];\n          continue SetTreeModule$$$iter;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$foldBack($f$$1$$40, $m$$1$$41, $x$$1$$42) {\n  SetTreeModule$$$foldBack: while (true) {\n    const f$$1 = $f$$1$$40,\n          m$$1 = $m$$1$$41,\n          x$$1 = $x$$1$$42;\n\n    switch (m$$1.tag) {\n      case 2:\n        {\n          return f$$1(m$$1.fields[0], x$$1);\n        }\n\n      case 0:\n        {\n          return x$$1;\n        }\n\n      default:\n        {\n          $f$$1$$40 = f$$1;\n          $m$$1$$41 = m$$1.fields[1];\n          $x$$1$$42 = f$$1(m$$1.fields[0], SetTreeModule$$$foldBack(f$$1, m$$1.fields[2], x$$1));\n          continue SetTreeModule$$$foldBack;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$fold($f$$2$$43, $x$$2$$44, $m$$2$$45) {\n  SetTreeModule$$$fold: while (true) {\n    const f$$2 = $f$$2$$43,\n          x$$2 = $x$$2$$44,\n          m$$2 = $m$$2$$45;\n\n    switch (m$$2.tag) {\n      case 2:\n        {\n          return f$$2(x$$2, m$$2.fields[0]);\n        }\n\n      case 0:\n        {\n          return x$$2;\n        }\n\n      default:\n        {\n          const x$$3 = SetTreeModule$$$fold(f$$2, x$$2, m$$2.fields[1]);\n          const x$$4 = f$$2(x$$3, m$$2.fields[0]);\n          $f$$2$$43 = f$$2;\n          $x$$2$$44 = x$$4;\n          $m$$2$$45 = m$$2.fields[2];\n          continue SetTreeModule$$$fold;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$forall($f$$3$$46, $m$$3$$47) {\n  SetTreeModule$$$forall: while (true) {\n    const f$$3 = $f$$3$$46,\n          m$$3 = $m$$3$$47;\n\n    switch (m$$3.tag) {\n      case 2:\n        {\n          return f$$3(m$$3.fields[0]);\n        }\n\n      case 0:\n        {\n          return true;\n        }\n\n      default:\n        {\n          if (f$$3(m$$3.fields[0]) ? SetTreeModule$$$forall(f$$3, m$$3.fields[1]) : false) {\n            $f$$3$$46 = f$$3;\n            $m$$3$$47 = m$$3.fields[2];\n            continue SetTreeModule$$$forall;\n          } else {\n            return false;\n          }\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$exists($f$$4$$48, $m$$4$$49) {\n  SetTreeModule$$$exists: while (true) {\n    const f$$4 = $f$$4$$48,\n          m$$4 = $m$$4$$49;\n\n    switch (m$$4.tag) {\n      case 2:\n        {\n          return f$$4(m$$4.fields[0]);\n        }\n\n      case 0:\n        {\n          return false;\n        }\n\n      default:\n        {\n          if (f$$4(m$$4.fields[0]) ? true : SetTreeModule$$$exists(f$$4, m$$4.fields[1])) {\n            return true;\n          } else {\n            $f$$4$$48 = f$$4;\n            $m$$4$$49 = m$$4.fields[2];\n            continue SetTreeModule$$$exists;\n          }\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$isEmpty(m$$5) {\n  if (m$$5.tag === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function SetTreeModule$$$subset(comparer$$5, a, b) {\n  return SetTreeModule$$$forall(function (x$$5) {\n    return SetTreeModule$$$mem(comparer$$5, x$$5, b);\n  }, a);\n}\nexport function SetTreeModule$$$psubset(comparer$$6, a$$1, b$$1) {\n  if (SetTreeModule$$$forall(function (x$$6) {\n    return SetTreeModule$$$mem(comparer$$6, x$$6, b$$1);\n  }, a$$1)) {\n    return SetTreeModule$$$exists(function (x$$7) {\n      return !SetTreeModule$$$mem(comparer$$6, x$$7, a$$1);\n    }, b$$1);\n  } else {\n    return false;\n  }\n}\nexport function SetTreeModule$$$filterAux($comparer$$7$$57, $f$$5$$58, $s$$2$$59, $acc$$1$$60) {\n  SetTreeModule$$$filterAux: while (true) {\n    const comparer$$7 = $comparer$$7$$57,\n          f$$5 = $f$$5$$58,\n          s$$2 = $s$$2$$59,\n          acc$$1 = $acc$$1$$60;\n\n    switch (s$$2.tag) {\n      case 2:\n        {\n          if (f$$5(s$$2.fields[0])) {\n            return SetTreeModule$$$add(comparer$$7, s$$2.fields[0], acc$$1);\n          } else {\n            return acc$$1;\n          }\n        }\n\n      case 0:\n        {\n          return acc$$1;\n        }\n\n      default:\n        {\n          const acc$$2 = f$$5(s$$2.fields[0]) ? SetTreeModule$$$add(comparer$$7, s$$2.fields[0], acc$$1) : acc$$1;\n          $comparer$$7$$57 = comparer$$7;\n          $f$$5$$58 = f$$5;\n          $s$$2$$59 = s$$2.fields[1];\n          $acc$$1$$60 = SetTreeModule$$$filterAux(comparer$$7, f$$5, s$$2.fields[2], acc$$2);\n          continue SetTreeModule$$$filterAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$filter(comparer$$8, f$$6, s$$3) {\n  return SetTreeModule$$$filterAux(comparer$$8, f$$6, s$$3, new SetTree$00601(0, \"SetEmpty\"));\n}\nexport function SetTreeModule$$$diffAux($comparer$$9$$64, $m$$6$$65, $acc$$3$$66) {\n  SetTreeModule$$$diffAux: while (true) {\n    const comparer$$9 = $comparer$$9$$64,\n          m$$6 = $m$$6$$65,\n          acc$$3 = $acc$$3$$66;\n\n    switch (m$$6.tag) {\n      case 2:\n        {\n          return SetTreeModule$$$remove(comparer$$9, m$$6.fields[0], acc$$3);\n        }\n\n      case 0:\n        {\n          return acc$$3;\n        }\n\n      default:\n        {\n          $comparer$$9$$64 = comparer$$9;\n          $m$$6$$65 = m$$6.fields[1];\n          $acc$$3$$66 = SetTreeModule$$$diffAux(comparer$$9, m$$6.fields[2], SetTreeModule$$$remove(comparer$$9, m$$6.fields[0], acc$$3));\n          continue SetTreeModule$$$diffAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$diff(comparer$$10, a$$2, b$$2) {\n  return SetTreeModule$$$diffAux(comparer$$10, b$$2, a$$2);\n}\nexport function SetTreeModule$$$union(comparer$$11, t1$$4, t2$$4) {\n  var $target$$73, h1$$1, h2$$1, k1$$4, k2$$16, t11$$2, t12$$2, t21$$1, t22$$1, t$$7, t$$8, k1$$5, t2$$5, k2$$17, t1$$5;\n\n  if (t1$$4.tag === 0) {\n    $target$$73 = 1;\n    t$$7 = t2$$4;\n  } else if (t1$$4.tag === 2) {\n    if (t2$$4.tag === 0) {\n      $target$$73 = 2;\n      t$$8 = t1$$4;\n    } else if (t2$$4.tag === 2) {\n      $target$$73 = 3;\n      k1$$5 = t1$$4.fields[0];\n      t2$$5 = t2$$4;\n    } else {\n      $target$$73 = 3;\n      k1$$5 = t1$$4.fields[0];\n      t2$$5 = t2$$4;\n    }\n  } else if (t2$$4.tag === 0) {\n    $target$$73 = 2;\n    t$$8 = t1$$4;\n  } else if (t2$$4.tag === 2) {\n    $target$$73 = 4;\n    k2$$17 = t2$$4.fields[0];\n    t1$$5 = t1$$4;\n  } else {\n    $target$$73 = 0;\n    h1$$1 = t1$$4.fields[3];\n    h2$$1 = t2$$4.fields[3];\n    k1$$4 = t1$$4.fields[0];\n    k2$$16 = t2$$4.fields[0];\n    t11$$2 = t1$$4.fields[1];\n    t12$$2 = t1$$4.fields[2];\n    t21$$1 = t2$$4.fields[1];\n    t22$$1 = t2$$4.fields[2];\n  }\n\n  switch ($target$$73) {\n    case 0:\n      {\n        if (h1$$1 > h2$$1) {\n          const patternInput$$4 = SetTreeModule$$$split(comparer$$11, k1$$4, t2$$4);\n          return SetTreeModule$$$balance(comparer$$11, SetTreeModule$$$union(comparer$$11, t11$$2, patternInput$$4[0]), k1$$4, SetTreeModule$$$union(comparer$$11, t12$$2, patternInput$$4[2]));\n        } else {\n          const patternInput$$5 = SetTreeModule$$$split(comparer$$11, k2$$16, t1$$4);\n          return SetTreeModule$$$balance(comparer$$11, SetTreeModule$$$union(comparer$$11, t21$$1, patternInput$$5[0]), k2$$16, SetTreeModule$$$union(comparer$$11, t22$$1, patternInput$$5[2]));\n        }\n      }\n\n    case 1:\n      {\n        return t$$7;\n      }\n\n    case 2:\n      {\n        return t$$8;\n      }\n\n    case 3:\n      {\n        return SetTreeModule$$$add(comparer$$11, k1$$5, t2$$5);\n      }\n\n    case 4:\n      {\n        return SetTreeModule$$$add(comparer$$11, k2$$17, t1$$5);\n      }\n  }\n}\nexport function SetTreeModule$$$intersectionAux($comparer$$12$$74, $b$$3$$75, $m$$7$$76, $acc$$4$$77) {\n  SetTreeModule$$$intersectionAux: while (true) {\n    const comparer$$12 = $comparer$$12$$74,\n          b$$3 = $b$$3$$75,\n          m$$7 = $m$$7$$76,\n          acc$$4 = $acc$$4$$77;\n\n    switch (m$$7.tag) {\n      case 2:\n        {\n          if (SetTreeModule$$$mem(comparer$$12, m$$7.fields[0], b$$3)) {\n            return SetTreeModule$$$add(comparer$$12, m$$7.fields[0], acc$$4);\n          } else {\n            return acc$$4;\n          }\n        }\n\n      case 0:\n        {\n          return acc$$4;\n        }\n\n      default:\n        {\n          const acc$$5 = SetTreeModule$$$intersectionAux(comparer$$12, b$$3, m$$7.fields[2], acc$$4);\n          const acc$$6 = SetTreeModule$$$mem(comparer$$12, m$$7.fields[0], b$$3) ? SetTreeModule$$$add(comparer$$12, m$$7.fields[0], acc$$5) : acc$$5;\n          $comparer$$12$$74 = comparer$$12;\n          $b$$3$$75 = b$$3;\n          $m$$7$$76 = m$$7.fields[1];\n          $acc$$4$$77 = acc$$6;\n          continue SetTreeModule$$$intersectionAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$intersection(comparer$$13, a$$3, b$$4) {\n  return SetTreeModule$$$intersectionAux(comparer$$13, b$$4, a$$3, new SetTree$00601(0, \"SetEmpty\"));\n}\nexport function SetTreeModule$$$partition1(comparer$$14, f$$7, k$$16, acc1, acc2) {\n  if (f$$7(k$$16)) {\n    return [SetTreeModule$$$add(comparer$$14, k$$16, acc1), acc2];\n  } else {\n    return [acc1, SetTreeModule$$$add(comparer$$14, k$$16, acc2)];\n  }\n}\nexport function SetTreeModule$$$partitionAux($comparer$$15$$86, $f$$8$$87, $s$$4$$88, $acc_0$$89, $acc_1$$90) {\n  SetTreeModule$$$partitionAux: while (true) {\n    const comparer$$15 = $comparer$$15$$86,\n          f$$8 = $f$$8$$87,\n          s$$4 = $s$$4$$88,\n          acc_0 = $acc_0$$89,\n          acc_1 = $acc_1$$90;\n\n    switch (s$$4.tag) {\n      case 2:\n        {\n          return SetTreeModule$$$partition1(comparer$$15, f$$8, s$$4.fields[0], acc_0, acc_1);\n        }\n\n      case 0:\n        {\n          return [acc_0, acc_1];\n        }\n\n      default:\n        {\n          const acc$$8 = SetTreeModule$$$partitionAux(comparer$$15, f$$8, s$$4.fields[2], acc_0, acc_1);\n          const acc$$9 = SetTreeModule$$$partition1(comparer$$15, f$$8, s$$4.fields[0], acc$$8[0], acc$$8[1]);\n          $comparer$$15$$86 = comparer$$15;\n          $f$$8$$87 = f$$8;\n          $s$$4$$88 = s$$4.fields[1];\n          $acc_0$$89 = acc$$9[0];\n          $acc_1$$90 = acc$$9[1];\n          continue SetTreeModule$$$partitionAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$partition(comparer$$16, f$$9, s$$5) {\n  const seed = [new SetTree$00601(0, \"SetEmpty\"), new SetTree$00601(0, \"SetEmpty\")];\n  return SetTreeModule$$$partitionAux(comparer$$16, f$$9, s$$5, seed[0], seed[1]);\n}\nexport function SetTreeModule$$$$007CMatchSetNode$007CMatchSetEmpty$007C(s$$6) {\n  switch (s$$6.tag) {\n    case 2:\n      {\n        return new Choice(0, \"Choice1Of2\", [s$$6.fields[0], new SetTree$00601(0, \"SetEmpty\"), new SetTree$00601(0, \"SetEmpty\")]);\n      }\n\n    case 0:\n      {\n        return new Choice(1, \"Choice2Of2\", null);\n      }\n\n    default:\n      {\n        return new Choice(0, \"Choice1Of2\", [s$$6.fields[0], s$$6.fields[1], s$$6.fields[2]]);\n      }\n  }\n}\nexport function SetTreeModule$$$minimumElementAux($s$$7$$95, $n$$1$$96) {\n  SetTreeModule$$$minimumElementAux: while (true) {\n    const s$$7 = $s$$7$$95,\n          n$$1 = $n$$1$$96;\n\n    switch (s$$7.tag) {\n      case 2:\n        {\n          return s$$7.fields[0];\n        }\n\n      case 0:\n        {\n          return n$$1;\n        }\n\n      default:\n        {\n          $s$$7$$95 = s$$7.fields[1];\n          $n$$1$$96 = s$$7.fields[0];\n          continue SetTreeModule$$$minimumElementAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$minimumElementOpt(s$$8) {\n  switch (s$$8.tag) {\n    case 2:\n      {\n        return some(s$$8.fields[0]);\n      }\n\n    case 0:\n      {\n        return null;\n      }\n\n    default:\n      {\n        return some(SetTreeModule$$$minimumElementAux(s$$8.fields[1], s$$8.fields[0]));\n      }\n  }\n}\nexport function SetTreeModule$$$maximumElementAux($s$$9$$98, $n$$2$$99) {\n  SetTreeModule$$$maximumElementAux: while (true) {\n    const s$$9 = $s$$9$$98,\n          n$$2 = $n$$2$$99;\n\n    switch (s$$9.tag) {\n      case 2:\n        {\n          return s$$9.fields[0];\n        }\n\n      case 0:\n        {\n          return n$$2;\n        }\n\n      default:\n        {\n          $s$$9$$98 = s$$9.fields[2];\n          $n$$2$$99 = s$$9.fields[0];\n          continue SetTreeModule$$$maximumElementAux;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$maximumElementOpt(s$$10) {\n  switch (s$$10.tag) {\n    case 2:\n      {\n        return some(s$$10.fields[0]);\n      }\n\n    case 0:\n      {\n        return null;\n      }\n\n    default:\n      {\n        return some(SetTreeModule$$$maximumElementAux(s$$10.fields[2], s$$10.fields[0]));\n      }\n  }\n}\nexport function SetTreeModule$$$minimumElement(s$$11) {\n  const matchValue$$4 = SetTreeModule$$$minimumElementOpt(s$$11);\n\n  if (matchValue$$4 == null) {\n    throw new Error(\"Set contains no elements\");\n  } else {\n    const k$$27 = value$$2(matchValue$$4);\n    return k$$27;\n  }\n}\nexport function SetTreeModule$$$maximumElement(s$$12) {\n  const matchValue$$5 = SetTreeModule$$$maximumElementOpt(s$$12);\n\n  if (matchValue$$5 == null) {\n    throw new Error(\"Set contains no elements\");\n  } else {\n    const k$$28 = value$$2(matchValue$$5);\n    return k$$28;\n  }\n}\nexport const SetTreeModule$002ESetIterator$00601 = declare(function Set_SetTreeModule_SetIterator(arg1, arg2) {\n  this.stack = arg1;\n  this.started = arg2;\n}, Record);\nexport function SetTreeModule$002ESetIterator$00601$reflection($gen$$103) {\n  return record(\"Set.SetTreeModule.SetIterator`1\", [$gen$$103], SetTreeModule$002ESetIterator$00601, () => [[\"stack\", list(SetTree$00601$reflection($gen$$103))], [\"started\", bool]]);\n}\nexport function SetTreeModule$$$collapseLHS($stack$$104) {\n  SetTreeModule$$$collapseLHS: while (true) {\n    const stack = $stack$$104;\n\n    if (stack.tail != null) {\n      if (stack.head.tag === 2) {\n        return stack;\n      } else if (stack.head.tag === 1) {\n        $stack$$104 = new List(stack.head.fields[1], new List(SetTreeModule$$$SetOne(stack.head.fields[0]), new List(stack.head.fields[2], stack.tail)));\n        continue SetTreeModule$$$collapseLHS;\n      } else {\n        $stack$$104 = stack.tail;\n        continue SetTreeModule$$$collapseLHS;\n      }\n    } else {\n      return new List();\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$mkIterator(s$$13) {\n  return new SetTreeModule$002ESetIterator$00601(SetTreeModule$$$collapseLHS(new List(s$$13, new List())), false);\n}\nexport function SetTreeModule$$$notStarted() {\n  throw new Error(\"Enumeration not started\");\n}\nexport function SetTreeModule$$$alreadyFinished() {\n  throw new Error(\"Enumeration already started\");\n}\nexport function SetTreeModule$$$current(i) {\n  if (i.started) {\n    const matchValue$$6 = i.stack;\n\n    if (matchValue$$6.tail == null) {\n      return SetTreeModule$$$alreadyFinished();\n    } else if (matchValue$$6.head.tag === 2) {\n      return matchValue$$6.head.fields[0];\n    } else {\n      throw new Error(\"Please report error: Set iterator, unexpected stack for current\");\n    }\n  } else {\n    return SetTreeModule$$$notStarted();\n  }\n}\nexport function SetTreeModule$$$moveNext(i$$1) {\n  if (i$$1.started) {\n    const matchValue$$7 = i$$1.stack;\n\n    if (matchValue$$7.tail == null) {\n      return false;\n    } else if (matchValue$$7.head.tag === 2) {\n      i$$1.stack = SetTreeModule$$$collapseLHS(matchValue$$7.tail);\n      return !(i$$1.stack.tail == null);\n    } else {\n      throw new Error(\"Please report error: Set iterator, unexpected stack for moveNext\");\n    }\n  } else {\n    i$$1.started = true;\n    return !(i$$1.stack.tail == null);\n  }\n}\nexport const SetTreeModule$002EmkIEnumerator$00601 = declare(function Set_SetTreeModule_mkIEnumerator(s$$14) {\n  const $this$$1 = this;\n  $this$$1.s = s$$14;\n  $this$$1.i = SetTreeModule$$$mkIterator($this$$1.s);\n});\nexport function SetTreeModule$002EmkIEnumerator$00601$reflection($gen$$108) {\n  return type(\"Set.SetTreeModule.mkIEnumerator`1\", [$gen$$108]);\n}\nexport function SetTreeModule$002EmkIEnumerator$00601$$$$002Ector$$Z5B395D56(s$$14) {\n  return this instanceof SetTreeModule$002EmkIEnumerator$00601 ? SetTreeModule$002EmkIEnumerator$00601.call(this, s$$14) : new SetTreeModule$002EmkIEnumerator$00601(s$$14);\n}\nObject.defineProperty(SetTreeModule$002EmkIEnumerator$00601.prototype, \"Current\", {\n  \"get\": function () {\n    const __ = this;\n    return SetTreeModule$$$current(__.i);\n  }\n});\n\nSetTreeModule$002EmkIEnumerator$00601.prototype.MoveNext = function () {\n  const __$$1 = this;\n  return SetTreeModule$$$moveNext(__$$1.i);\n};\n\nSetTreeModule$002EmkIEnumerator$00601.prototype.Reset = function () {\n  const __$$2 = this;\n  __$$2.i = SetTreeModule$$$mkIterator(__$$2.s);\n};\n\nSetTreeModule$002EmkIEnumerator$00601.prototype.Dispose = function () {};\n\nexport function SetTreeModule$$$mkIEnumerator(s$$15) {\n  return SetTreeModule$002EmkIEnumerator$00601$$$$002Ector$$Z5B395D56(s$$15);\n}\nexport function SetTreeModule$$$toSeq(s$$16) {\n  const en = SetTreeModule$$$mkIEnumerator(s$$16);\n  return unfold(function generator(en$$1) {\n    if (en$$1.MoveNext()) {\n      return [en$$1.Current, en$$1];\n    } else {\n      return null;\n    }\n  }, en);\n}\nexport function SetTreeModule$$$compareStacks($comparer$$17$$112, $l1$$113, $l2$$114) {\n  SetTreeModule$$$compareStacks: while (true) {\n    const comparer$$17 = $comparer$$17$$112,\n          l1 = $l1$$113,\n          l2 = $l2$$114;\n    var $target$$115, t1$$6, t2$$6, n1k, n2k, t1$$7, t2$$7, n1k$$1, n2k$$1, n2r, t1$$8, t2$$8, emp, n1k$$2, n1r, n2k$$2, t1$$9, t2$$9, n1k$$3, n1r$$1, n2k$$3, n2r$$1, t1$$10, t2$$10, n1k$$4, t1$$11, n1k$$5, n1l, n1r$$2, t1$$12, n2k$$4, t2$$11, n2k$$5, n2l, n2r$$2, t2$$12;\n\n    if (l1.tail != null) {\n      if (l2.tail != null) {\n        if (l2.head.tag === 2) {\n          if (l1.head.tag === 2) {\n            $target$$115 = 4;\n            n1k = l1.head.fields[0];\n            n2k = l2.head.fields[0];\n            t1$$7 = l1.tail;\n            t2$$7 = l2.tail;\n          } else if (l1.head.tag === 1) {\n            if (l1.head.fields[1].tag === 0) {\n              $target$$115 = 6;\n              emp = l1.head.fields[1];\n              n1k$$2 = l1.head.fields[0];\n              n1r = l1.head.fields[2];\n              n2k$$2 = l2.head.fields[0];\n              t1$$9 = l1.tail;\n              t2$$9 = l2.tail;\n            } else {\n              $target$$115 = 9;\n              n1k$$5 = l1.head.fields[0];\n              n1l = l1.head.fields[1];\n              n1r$$2 = l1.head.fields[2];\n              t1$$12 = l1.tail;\n            }\n          } else {\n            $target$$115 = 10;\n            n2k$$4 = l2.head.fields[0];\n            t2$$11 = l2.tail;\n          }\n        } else if (l2.head.tag === 1) {\n          if (l2.head.fields[1].tag === 0) {\n            if (l1.head.tag === 2) {\n              $target$$115 = 5;\n              n1k$$1 = l1.head.fields[0];\n              n2k$$1 = l2.head.fields[0];\n              n2r = l2.head.fields[2];\n              t1$$8 = l1.tail;\n              t2$$8 = l2.tail;\n            } else if (l1.head.tag === 1) {\n              if (l1.head.fields[1].tag === 0) {\n                $target$$115 = 7;\n                n1k$$3 = l1.head.fields[0];\n                n1r$$1 = l1.head.fields[2];\n                n2k$$3 = l2.head.fields[0];\n                n2r$$1 = l2.head.fields[2];\n                t1$$10 = l1.tail;\n                t2$$10 = l2.tail;\n              } else {\n                $target$$115 = 9;\n                n1k$$5 = l1.head.fields[0];\n                n1l = l1.head.fields[1];\n                n1r$$2 = l1.head.fields[2];\n                t1$$12 = l1.tail;\n              }\n            } else {\n              $target$$115 = 11;\n              n2k$$5 = l2.head.fields[0];\n              n2l = l2.head.fields[1];\n              n2r$$2 = l2.head.fields[2];\n              t2$$12 = l2.tail;\n            }\n          } else if (l1.head.tag === 2) {\n            $target$$115 = 8;\n            n1k$$4 = l1.head.fields[0];\n            t1$$11 = l1.tail;\n          } else if (l1.head.tag === 1) {\n            $target$$115 = 9;\n            n1k$$5 = l1.head.fields[0];\n            n1l = l1.head.fields[1];\n            n1r$$2 = l1.head.fields[2];\n            t1$$12 = l1.tail;\n          } else {\n            $target$$115 = 11;\n            n2k$$5 = l2.head.fields[0];\n            n2l = l2.head.fields[1];\n            n2r$$2 = l2.head.fields[2];\n            t2$$12 = l2.tail;\n          }\n        } else if (l1.head.tag === 2) {\n          $target$$115 = 8;\n          n1k$$4 = l1.head.fields[0];\n          t1$$11 = l1.tail;\n        } else if (l1.head.tag === 1) {\n          $target$$115 = 9;\n          n1k$$5 = l1.head.fields[0];\n          n1l = l1.head.fields[1];\n          n1r$$2 = l1.head.fields[2];\n          t1$$12 = l1.tail;\n        } else {\n          $target$$115 = 3;\n          t1$$6 = l1.tail;\n          t2$$6 = l2.tail;\n        }\n      } else {\n        $target$$115 = 2;\n      }\n    } else if (l2.tail != null) {\n      $target$$115 = 1;\n    } else {\n      $target$$115 = 0;\n    }\n\n    switch ($target$$115) {\n      case 0:\n        {\n          return 0;\n        }\n\n      case 1:\n        {\n          return -1 | 0;\n        }\n\n      case 2:\n        {\n          return 1;\n        }\n\n      case 3:\n        {\n          $comparer$$17$$112 = comparer$$17;\n          $l1$$113 = t1$$6;\n          $l2$$114 = t2$$6;\n          continue SetTreeModule$$$compareStacks;\n        }\n\n      case 4:\n        {\n          const c$$7 = comparer$$17.Compare(n1k, n2k) | 0;\n\n          if (c$$7 !== 0) {\n            return c$$7 | 0;\n          } else {\n            $comparer$$17$$112 = comparer$$17;\n            $l1$$113 = t1$$7;\n            $l2$$114 = t2$$7;\n            continue SetTreeModule$$$compareStacks;\n          }\n        }\n\n      case 5:\n        {\n          const c$$8 = comparer$$17.Compare(n1k$$1, n2k$$1) | 0;\n\n          if (c$$8 !== 0) {\n            return c$$8 | 0;\n          } else {\n            $comparer$$17$$112 = comparer$$17;\n            $l1$$113 = new List(new SetTree$00601(0, \"SetEmpty\"), t1$$8);\n            $l2$$114 = new List(n2r, t2$$8);\n            continue SetTreeModule$$$compareStacks;\n          }\n        }\n\n      case 6:\n        {\n          const c$$9 = comparer$$17.Compare(n1k$$2, n2k$$2) | 0;\n\n          if (c$$9 !== 0) {\n            return c$$9 | 0;\n          } else {\n            $comparer$$17$$112 = comparer$$17;\n            $l1$$113 = new List(n1r, t1$$9);\n            $l2$$114 = new List(emp, t2$$9);\n            continue SetTreeModule$$$compareStacks;\n          }\n        }\n\n      case 7:\n        {\n          const c$$10 = comparer$$17.Compare(n1k$$3, n2k$$3) | 0;\n\n          if (c$$10 !== 0) {\n            return c$$10 | 0;\n          } else {\n            $comparer$$17$$112 = comparer$$17;\n            $l1$$113 = new List(n1r$$1, t1$$10);\n            $l2$$114 = new List(n2r$$1, t2$$10);\n            continue SetTreeModule$$$compareStacks;\n          }\n        }\n\n      case 8:\n        {\n          $comparer$$17$$112 = comparer$$17;\n          $l1$$113 = new List(new SetTree$00601(0, \"SetEmpty\"), new List(SetTreeModule$$$SetOne(n1k$$4), t1$$11));\n          $l2$$114 = l2;\n          continue SetTreeModule$$$compareStacks;\n        }\n\n      case 9:\n        {\n          $comparer$$17$$112 = comparer$$17;\n          $l1$$113 = new List(n1l, new List(SetTreeModule$$$SetNode(n1k$$5, new SetTree$00601(0, \"SetEmpty\"), n1r$$2, 0), t1$$12));\n          $l2$$114 = l2;\n          continue SetTreeModule$$$compareStacks;\n        }\n\n      case 10:\n        {\n          $comparer$$17$$112 = comparer$$17;\n          $l1$$113 = l1;\n          $l2$$114 = new List(new SetTree$00601(0, \"SetEmpty\"), new List(SetTreeModule$$$SetOne(n2k$$4), t2$$11));\n          continue SetTreeModule$$$compareStacks;\n        }\n\n      case 11:\n        {\n          $comparer$$17$$112 = comparer$$17;\n          $l1$$113 = l1;\n          $l2$$114 = new List(n2l, new List(SetTreeModule$$$SetNode(n2k$$5, new SetTree$00601(0, \"SetEmpty\"), n2r$$2, 0), t2$$12));\n          continue SetTreeModule$$$compareStacks;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$compare(comparer$$18, s1, s2) {\n  if (s1.tag === 0) {\n    if (s2.tag === 0) {\n      return 0;\n    } else {\n      return -1 | 0;\n    }\n  } else if (s2.tag === 0) {\n    return 1;\n  } else {\n    return SetTreeModule$$$compareStacks(comparer$$18, new List(s1, new List()), new List(s2, new List())) | 0;\n  }\n}\nexport function SetTreeModule$$$choose(s$$17) {\n  return SetTreeModule$$$minimumElement(s$$17);\n}\nexport function SetTreeModule$$$loop($m$$8$$120, $acc$$10$$121) {\n  SetTreeModule$$$loop: while (true) {\n    const m$$8 = $m$$8$$120,\n          acc$$10 = $acc$$10$$121;\n\n    switch (m$$8.tag) {\n      case 2:\n        {\n          return new List(m$$8.fields[0], acc$$10);\n        }\n\n      case 0:\n        {\n          return acc$$10;\n        }\n\n      default:\n        {\n          $m$$8$$120 = m$$8.fields[1];\n          $acc$$10$$121 = new List(m$$8.fields[0], SetTreeModule$$$loop(m$$8.fields[2], acc$$10));\n          continue SetTreeModule$$$loop;\n        }\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$toList(s$$18) {\n  return SetTreeModule$$$loop(s$$18, new List());\n}\nexport function SetTreeModule$$$copyToArray(s$$19, arr, i$$2) {\n  let j = i$$2 | 0;\n  SetTreeModule$$$iter(function (x$$8) {\n    arr[j] = x$$8;\n    j = j + 1;\n  }, s$$19);\n}\nexport function SetTreeModule$$$mkFromEnumerator($comparer$$19$$126, $acc$$11$$127, $e$$128) {\n  SetTreeModule$$$mkFromEnumerator: while (true) {\n    const comparer$$19 = $comparer$$19$$126,\n          acc$$11 = $acc$$11$$127,\n          e = $e$$128;\n\n    if (e.MoveNext()) {\n      $comparer$$19$$126 = comparer$$19;\n      $acc$$11$$127 = SetTreeModule$$$add(comparer$$19, e.Current, acc$$11);\n      $e$$128 = e;\n      continue SetTreeModule$$$mkFromEnumerator;\n    } else {\n      return acc$$11;\n    }\n\n    break;\n  }\n}\nexport function SetTreeModule$$$ofSeq(comparer$$20, c$$11) {\n  const ie = getEnumerator(c$$11);\n\n  try {\n    return SetTreeModule$$$mkFromEnumerator(comparer$$20, new SetTree$00601(0, \"SetEmpty\"), ie);\n  } finally {\n    if (isDisposable(ie)) {\n      ie.Dispose();\n    }\n  }\n}\nexport function SetTreeModule$$$ofArray(comparer$$21, arr$$1) {\n  let acc$$12 = new SetTree$00601(0, \"SetEmpty\");\n\n  for (let i$$3 = 0; i$$3 <= arr$$1.length - 1; i$$3++) {\n    acc$$12 = SetTreeModule$$$add(comparer$$21, arr$$1[i$$3], acc$$12);\n  }\n\n  return acc$$12;\n}\nexport const FSharpSet = declare(function Set_Set(comparer$$22, tree) {\n  const $this$$2 = this;\n  $this$$2.comparer = comparer$$22;\n  $this$$2.tree = tree;\n});\nexport function FSharpSet$reflection($gen$$133) {\n  return type(\"Set.FSharpSet\", [$gen$$133]);\n}\nexport function FSharpSet$$$$002Ector$$2528C5CB(comparer$$22, tree) {\n  return this instanceof FSharpSet ? FSharpSet.call(this, comparer$$22, tree) : new FSharpSet(comparer$$22, tree);\n}\nexport function FSharpSet$$get_Comparer(__$$4) {\n  return __$$4.comparer;\n}\nexport function FSharpSet$$get_Tree(__$$5) {\n  return __$$5.tree;\n}\nexport function FSharpSet$$Add$$2B595(s$$20, x$$9) {\n  return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$20), SetTreeModule$$$add(FSharpSet$$get_Comparer(s$$20), x$$9, FSharpSet$$get_Tree(s$$20)));\n}\nexport function FSharpSet$$Remove$$2B595(s$$21, x$$10) {\n  return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$21), SetTreeModule$$$remove(FSharpSet$$get_Comparer(s$$21), x$$10, FSharpSet$$get_Tree(s$$21)));\n}\nexport function FSharpSet$$get_Count(s$$22) {\n  return SetTreeModule$$$count(FSharpSet$$get_Tree(s$$22));\n}\nexport function FSharpSet$$Contains$$2B595(s$$23, x$$11) {\n  return SetTreeModule$$$mem(FSharpSet$$get_Comparer(s$$23), x$$11, FSharpSet$$get_Tree(s$$23));\n}\nexport function FSharpSet$$Iterate$$5028453F(s$$24, x$$12) {\n  SetTreeModule$$$iter(x$$12, FSharpSet$$get_Tree(s$$24));\n}\nexport function FSharpSet$$Fold(s$$25, f$$10, z) {\n  return SetTreeModule$$$fold(function (x$$13, z$$1) {\n    return f$$10(z$$1, x$$13);\n  }, z, FSharpSet$$get_Tree(s$$25));\n}\nexport function FSharpSet$$get_IsEmpty(s$$26) {\n  return SetTreeModule$$$isEmpty(FSharpSet$$get_Tree(s$$26));\n}\nexport function FSharpSet$$Partition$$Z1D55A0D7(s$$27, f$$11) {\n  const matchValue$$10 = FSharpSet$$get_Tree(s$$27);\n\n  if (matchValue$$10.tag === 0) {\n    return [s$$27, s$$27];\n  } else {\n    const patternInput$$6 = SetTreeModule$$$partition(FSharpSet$$get_Comparer(s$$27), f$$11, FSharpSet$$get_Tree(s$$27));\n    return [FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$27), patternInput$$6[0]), FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$27), patternInput$$6[1])];\n  }\n}\nexport function FSharpSet$$Filter$$Z1D55A0D7(s$$28, f$$12) {\n  const matchValue$$11 = FSharpSet$$get_Tree(s$$28);\n\n  if (matchValue$$11.tag === 0) {\n    return s$$28;\n  } else {\n    return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(s$$28), SetTreeModule$$$filter(FSharpSet$$get_Comparer(s$$28), f$$12, FSharpSet$$get_Tree(s$$28)));\n  }\n}\nexport function FSharpSet$$Map$$38806891(s$$29, f$$13, comparer$$23) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$23, SetTreeModule$$$fold(function (acc$$13, k$$33) {\n    return SetTreeModule$$$add(comparer$$23, f$$13(k$$33), acc$$13);\n  }, new SetTree$00601(0, \"SetEmpty\"), FSharpSet$$get_Tree(s$$29)));\n}\nexport function FSharpSet$$Exists$$Z1D55A0D7(s$$30, f$$14) {\n  return SetTreeModule$$$exists(f$$14, FSharpSet$$get_Tree(s$$30));\n}\nexport function FSharpSet$$ForAll$$Z1D55A0D7(s$$31, f$$15) {\n  return SetTreeModule$$$forall(f$$15, FSharpSet$$get_Tree(s$$31));\n}\nexport function FSharpSet$$$op_Subtraction(a$$4, b$$5) {\n  const matchValue$$12 = FSharpSet$$get_Tree(a$$4);\n\n  if (matchValue$$12.tag === 0) {\n    return a$$4;\n  } else {\n    const matchValue$$13 = FSharpSet$$get_Tree(b$$5);\n\n    if (matchValue$$13.tag === 0) {\n      return a$$4;\n    } else {\n      return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(a$$4), SetTreeModule$$$diff(FSharpSet$$get_Comparer(a$$4), FSharpSet$$get_Tree(a$$4), FSharpSet$$get_Tree(b$$5)));\n    }\n  }\n}\nexport function FSharpSet$$$op_Addition(a$$5, b$$6) {\n  const matchValue$$14 = FSharpSet$$get_Tree(b$$6);\n\n  if (matchValue$$14.tag === 0) {\n    return a$$5;\n  } else {\n    const matchValue$$15 = FSharpSet$$get_Tree(a$$5);\n\n    if (matchValue$$15.tag === 0) {\n      return b$$6;\n    } else {\n      return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(a$$5), SetTreeModule$$$union(FSharpSet$$get_Comparer(a$$5), FSharpSet$$get_Tree(a$$5), FSharpSet$$get_Tree(b$$6)));\n    }\n  }\n}\nexport function FSharpSet$$$Intersection$$Z3BE9BFE0(a$$6, b$$7) {\n  const matchValue$$16 = FSharpSet$$get_Tree(b$$7);\n\n  if (matchValue$$16.tag === 0) {\n    return b$$7;\n  } else {\n    const matchValue$$17 = FSharpSet$$get_Tree(a$$6);\n\n    if (matchValue$$17.tag === 0) {\n      return a$$6;\n    } else {\n      return FSharpSet$$$$002Ector$$2528C5CB(FSharpSet$$get_Comparer(a$$6), SetTreeModule$$$intersection(FSharpSet$$get_Comparer(a$$6), FSharpSet$$get_Tree(a$$6), FSharpSet$$get_Tree(b$$7)));\n    }\n  }\n}\nexport function FSharpSet$$$IntersectionMany$$Z15B59630(sets) {\n  return reduce(FSharpSet$$$Intersection$$Z3BE9BFE0, sets);\n}\nexport function FSharpSet$$$Equality$$Z3BE9BFE0(a$$7, b$$8) {\n  return SetTreeModule$$$compare(FSharpSet$$get_Comparer(a$$7), FSharpSet$$get_Tree(a$$7), FSharpSet$$get_Tree(b$$8)) === 0;\n}\nexport function FSharpSet$$$Compare$$Z3BE9BFE0(a$$8, b$$9) {\n  return SetTreeModule$$$compare(FSharpSet$$get_Comparer(a$$8), FSharpSet$$get_Tree(a$$8), FSharpSet$$get_Tree(b$$9));\n}\nexport function FSharpSet$$get_Choose(x$$14) {\n  return SetTreeModule$$$choose(FSharpSet$$get_Tree(x$$14));\n}\nexport function FSharpSet$$get_MinimumElement(x$$15) {\n  return SetTreeModule$$$minimumElement(FSharpSet$$get_Tree(x$$15));\n}\nexport function FSharpSet$$get_MaximumElement(x$$16) {\n  return SetTreeModule$$$maximumElement(FSharpSet$$get_Tree(x$$16));\n}\nexport function FSharpSet$$IsSubsetOf$$6A20B1FF(x$$17, y) {\n  return SetTreeModule$$$subset(FSharpSet$$get_Comparer(x$$17), FSharpSet$$get_Tree(x$$17), FSharpSet$$get_Tree(y));\n}\nexport function FSharpSet$$IsSupersetOf$$6A20B1FF(x$$18, y$$1) {\n  return SetTreeModule$$$subset(FSharpSet$$get_Comparer(x$$18), FSharpSet$$get_Tree(y$$1), FSharpSet$$get_Tree(x$$18));\n}\nexport function FSharpSet$$IsProperSubsetOf$$6A20B1FF(x$$19, y$$2) {\n  return SetTreeModule$$$psubset(FSharpSet$$get_Comparer(x$$19), FSharpSet$$get_Tree(x$$19), FSharpSet$$get_Tree(y$$2));\n}\nexport function FSharpSet$$IsProperSupersetOf$$6A20B1FF(x$$20, y$$3) {\n  return SetTreeModule$$$psubset(FSharpSet$$get_Comparer(x$$20), FSharpSet$$get_Tree(y$$3), FSharpSet$$get_Tree(x$$20));\n}\n\nFSharpSet.prototype.toString = function () {\n  var strings;\n  const this$ = this;\n  return \"set [\" + (strings = map$$1(function (x$$21) {\n    let copyOfStruct = x$$21;\n    return String(copyOfStruct);\n  }, this$), (join(\"; \", strings))) + \"]\";\n};\n\nFSharpSet.prototype.GetHashCode = function () {\n  const this$$$1 = this;\n  let res = 0;\n  const e$$1 = SetTreeModule$$$mkIEnumerator(FSharpSet$$get_Tree(this$$$1));\n\n  while (e$$1.MoveNext()) {\n    const x$$22 = res | 0;\n    const y$$4 = structuralHash(e$$1.Current) | 0;\n    res = (x$$22 << 1) + y$$4 + 631;\n  }\n\n  return Math.abs(res) | 0;\n};\n\nFSharpSet.prototype.Equals = function (that) {\n  const this$$$2 = this;\n  return SetTreeModule$$$compare(FSharpSet$$get_Comparer(this$$$2), FSharpSet$$get_Tree(this$$$2), FSharpSet$$get_Tree(that)) === 0;\n};\n\nFSharpSet.prototype.CompareTo = function (that$$1) {\n  const this$$$3 = this;\n  return SetTreeModule$$$compare(FSharpSet$$get_Comparer(this$$$3), FSharpSet$$get_Tree(this$$$3), FSharpSet$$get_Tree(that$$1)) | 0;\n};\n\nFSharpSet.prototype[Symbol.iterator] = function () {\n  const s$$32 = this;\n  return toIterator(SetTreeModule$$$mkIEnumerator(FSharpSet$$get_Tree(s$$32)));\n};\n\nexport function isEmpty(s$$33) {\n  return FSharpSet$$get_IsEmpty(s$$33);\n}\nexport function contains(x$$23, s$$34) {\n  return FSharpSet$$Contains$$2B595(s$$34, x$$23);\n}\nexport function add(x$$24, s$$35) {\n  return FSharpSet$$Add$$2B595(s$$35, x$$24);\n}\nexport function singleton(x$$25, comparer$$24) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$24, new SetTree$00601(2, \"SetOne\", x$$25));\n}\nexport function remove(x$$26, s$$36) {\n  return FSharpSet$$Remove$$2B595(s$$36, x$$26);\n}\nexport function union(s1$$2, s2$$2) {\n  return FSharpSet$$$op_Addition(s1$$2, s2$$2);\n}\nexport function unionMany(sets$$1, comparer$$25) {\n  return fold$$1(FSharpSet$$$op_Addition, FSharpSet$$$$002Ector$$2528C5CB(comparer$$25, new SetTree$00601(0, \"SetEmpty\")), sets$$1);\n}\nexport function intersect(s1$$3, s2$$3) {\n  return FSharpSet$$$Intersection$$Z3BE9BFE0(s1$$3, s2$$3);\n}\nexport function intersectMany(sets$$2) {\n  return FSharpSet$$$IntersectionMany$$Z15B59630(sets$$2);\n}\nexport function iterate(f$$16, s$$37) {\n  FSharpSet$$Iterate$$5028453F(s$$37, f$$16);\n}\nexport function empty(comparer$$26) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$26, new SetTree$00601(0, \"SetEmpty\"));\n}\nexport function forAll(f$$17, s$$38) {\n  return FSharpSet$$ForAll$$Z1D55A0D7(s$$38, f$$17);\n}\nexport function exists(f$$18, s$$39) {\n  return FSharpSet$$Exists$$Z1D55A0D7(s$$39, f$$18);\n}\nexport function filter(f$$19, s$$40) {\n  return FSharpSet$$Filter$$Z1D55A0D7(s$$40, f$$19);\n}\nexport function partition(f$$20, s$$41) {\n  return FSharpSet$$Partition$$Z1D55A0D7(s$$41, f$$20);\n}\nexport function fold(f$$21, z$$2, s$$42) {\n  return SetTreeModule$$$fold(f$$21, z$$2, FSharpSet$$get_Tree(s$$42));\n}\nexport function foldBack(f$$22, s$$43, z$$3) {\n  return SetTreeModule$$$foldBack(f$$22, FSharpSet$$get_Tree(s$$43), z$$3);\n}\nexport function map(f$$23, s$$44, comparer$$27) {\n  return FSharpSet$$Map$$38806891(s$$44, f$$23, comparer$$27);\n}\nexport function count(s$$45) {\n  return FSharpSet$$get_Count(s$$45);\n}\nexport function minimumElement(s$$46) {\n  return FSharpSet$$get_MinimumElement(s$$46);\n}\nexport function maximumElement(s$$47) {\n  return FSharpSet$$get_MaximumElement(s$$47);\n}\nexport function ofList(li, comparer$$28) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$28, SetTreeModule$$$ofSeq(comparer$$28, li));\n}\nexport function ofArray(arr$$2, comparer$$29) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$29, SetTreeModule$$$ofArray(comparer$$29, arr$$2));\n}\nexport function toList(s$$48) {\n  return SetTreeModule$$$toList(FSharpSet$$get_Tree(s$$48));\n}\nexport function toArray(s$$49, cons) {\n  const n$$3 = count(s$$49) | 0;\n  const res$$1 = new cons(n$$3);\n  SetTreeModule$$$copyToArray(FSharpSet$$get_Tree(s$$49), res$$1, 0);\n  return res$$1;\n}\nexport function toSeq(s$$50) {\n  return SetTreeModule$$$toSeq(FSharpSet$$get_Tree(s$$50));\n}\nexport function ofSeq(elements, comparer$$30) {\n  return FSharpSet$$$$002Ector$$2528C5CB(comparer$$30, SetTreeModule$$$ofSeq(comparer$$30, elements));\n}\nexport function difference(x$$28, y$$6) {\n  return FSharpSet$$$op_Subtraction(x$$28, y$$6);\n}\nexport function isSubset(x$$29, y$$7) {\n  return FSharpSet$$IsSubsetOf$$6A20B1FF(x$$29, y$$7);\n}\nexport function isSuperset(x$$30, y$$8) {\n  return FSharpSet$$IsSupersetOf$$6A20B1FF(x$$30, y$$8);\n}\nexport function isProperSubset(x$$31, y$$9) {\n  return FSharpSet$$IsProperSubsetOf$$6A20B1FF(x$$31, y$$9);\n}\nexport function isProperSuperset(x$$32, y$$10) {\n  return FSharpSet$$IsProperSupersetOf$$6A20B1FF(x$$32, y$$10);\n}\nexport function minElement(s$$51) {\n  return FSharpSet$$get_MinimumElement(s$$51);\n}\nexport function maxElement(s$$52) {\n  return FSharpSet$$get_MaximumElement(s$$52);\n}\n\nfunction createMutablePrivate(comparer$$31, tree$0027) {\n  let tree$$1 = tree$0027;\n  return {\n    get size() {\n      return SetTreeModule$$$count(tree$$1);\n    },\n\n    add(x$$33) {\n      const this$$$4 = this;\n      tree$$1 = SetTreeModule$$$add(comparer$$31, x$$33, tree$$1);\n      return this$$$4;\n    },\n\n    add_(x$$34) {\n      if (SetTreeModule$$$mem(comparer$$31, x$$34, tree$$1)) {\n        return false;\n      } else {\n        tree$$1 = SetTreeModule$$$add(comparer$$31, x$$34, tree$$1);\n        return true;\n      }\n    },\n\n    clear() {\n      tree$$1 = new SetTree$00601(0, \"SetEmpty\");\n    },\n\n    delete(x$$35) {\n      if (SetTreeModule$$$mem(comparer$$31, x$$35, tree$$1)) {\n        tree$$1 = SetTreeModule$$$remove(comparer$$31, x$$35, tree$$1);\n        return true;\n      } else {\n        return false;\n      }\n    },\n\n    has(x$$36) {\n      return SetTreeModule$$$mem(comparer$$31, x$$36, tree$$1);\n    },\n\n    keys() {\n      return SetTreeModule$$$toSeq(tree$$1);\n    },\n\n    values() {\n      return SetTreeModule$$$toSeq(tree$$1);\n    },\n\n    entries() {\n      const source = SetTreeModule$$$toSeq(tree$$1);\n      return map$$1(function mapping(v) {\n        return [v, v];\n      }, source);\n    },\n\n    [Symbol.iterator]() {\n      return toIterator(SetTreeModule$$$mkIEnumerator(tree$$1));\n    },\n\n    GetEnumerator() {\n      return SetTreeModule$$$mkIEnumerator(tree$$1);\n    }\n\n  };\n}\n\nexport function createMutable(source$$1, comparer$$32) {\n  const set = MutableSet$002400601$0024$0024$0024$0024002Ector$0024$0024Z6150332D(source$$1, comparer$$32);\n  return set;\n}\nexport function distinct(xs, comparer$$33) {\n  return delay(function () {\n    const set$$1 = MutableSet$002400601$0024$0024$0024$0024002Ector$0024$0024Z6150332D(empty$$1(), comparer$$33);\n    return collect(function (x$$37) {\n      return MutableSet$002400601$0024$0024Add$0024$00242B595(set$$1, x$$37) ? singleton$$1(x$$37) : empty$$1();\n    }, xs);\n  });\n}\nexport function distinctBy(projection, xs$$1, comparer$$34) {\n  return delay(function () {\n    const set$$2 = MutableSet$002400601$0024$0024$0024$0024002Ector$0024$0024Z6150332D(empty$$1(), comparer$$34);\n    return collect(function (x$$38) {\n      return MutableSet$002400601$0024$0024Add$0024$00242B595(set$$2, projection(x$$38)) ? singleton$$1(x$$38) : empty$$1();\n    }, xs$$1);\n  });\n}\nexport function unionWith(s1$$4, s2$$4) {\n  return fold$$1(function folder(acc$$14, x$$39) {\n    return acc$$14.add(x$$39);\n  }, s1$$4, s2$$4);\n}\nexport function intersectWith(s1$$5, s2$$5, comparer$$35) {\n  const s2$$6 = ofSeq(s2$$5, comparer$$35);\n  iterate$$1(function (x$$40) {\n    if (!FSharpSet$$Contains$$2B595(s2$$6, x$$40)) {\n      const value = s1$$5.delete(x$$40);\n      value, null;\n    }\n  }, s1$$5);\n}\nexport function exceptWith(s1$$6, s2$$7) {\n  iterate$$1(function (x$$41) {\n    const value$$1 = s1$$6.delete(x$$41);\n    value$$1, null;\n  }, s2$$7);\n}\nexport function isSubsetOf(s1$$7, s2$$8, comparer$$36) {\n  return isSubset(ofSeq(s1$$7, comparer$$36), ofSeq(s2$$8, comparer$$36));\n}\nexport function isSupersetOf(s1$$8, s2$$9, comparer$$37) {\n  return isSuperset(ofSeq(s1$$8, comparer$$37), ofSeq(s2$$9, comparer$$37));\n}\nexport function isProperSubsetOf(s1$$9, s2$$10, comparer$$38) {\n  return isProperSubset(ofSeq(s1$$9, comparer$$38), ofSeq(s2$$10, comparer$$38));\n}\nexport function isProperSupersetOf(s1$$10, s2$$11, comparer$$39) {\n  return isProperSuperset(ofSeq(s1$$10, comparer$$39), ofSeq(s2$$11, comparer$$39));\n}","import { defaultArg, value as value$$12, some } from \"./Option.js\";\nimport { compare, addToDict, addToSet, getItemFromDict, tryGetValue, max as max$$1, comparePrimitives } from \"./Util.js\";\nimport { createMutable } from \"./Map.js\";\nimport { createMutable as createMutable$$1 } from \"./Set.js\";\nimport { List } from \"./Types.js\";\nimport { iterate as iterate$$1 } from \"./Seq.js\";\n\nfunction indexNotFound() {\n  throw new Error(\"An index satisfying the predicate was not found in the collection.\");\n}\n\nexport function append(array1, array2, cons) {\n  if (ArrayBuffer.isView(array1)) {\n    const len1 = array1.length | 0;\n    const len2 = array2.length | 0;\n    const newArray = new cons(len1 + len2);\n\n    for (let i = 0; i <= len1 - 1; i++) {\n      newArray[i] = array1[i];\n    }\n\n    for (let i$$1 = 0; i$$1 <= len2 - 1; i$$1++) {\n      newArray[i$$1 + len1] = array2[i$$1];\n    }\n\n    return newArray;\n  } else {\n    return array1.concat(array2);\n  }\n}\nexport function filter(predicate, array) {\n  return array.filter(predicate);\n}\nexport function fill(target, targetIndex, count, value) {\n  target.fill(value, targetIndex, targetIndex + count);\n  return target;\n}\nexport function getSubArray(array$$3, start$$1, count$$2) {\n  return array$$3.slice(start$$1, start$$1 + count$$2);\n}\nexport function last(array$$5) {\n  if (array$$5.length === 0) {\n    throw new Error(\"The input array was empty\\\\nParameter name: array\");\n  }\n\n  return array$$5[array$$5.length - 1];\n}\nexport function tryLast(array$$6) {\n  if (array$$6.length === 0) {\n    return null;\n  } else {\n    return some(array$$6[array$$6.length - 1]);\n  }\n}\nexport function mapIndexed(f, source, cons$$1) {\n  if (ArrayBuffer.isView(source)) {\n    const len = source.length | 0;\n    const target$$1 = new cons$$1(len);\n\n    for (let i$$2 = 0; i$$2 <= len - 1; i$$2++) {\n      target$$1[i$$2] = f(i$$2, source[i$$2]);\n    }\n\n    return target$$1;\n  } else {\n    return source.map(function (delegateArg0, delegateArg1) {\n      return f(delegateArg1, delegateArg0);\n    });\n  }\n}\nexport function map(f$$1, source$$1, cons$$2) {\n  if (ArrayBuffer.isView(source$$1)) {\n    const len$$1 = source$$1.length | 0;\n    const target$$2 = new cons$$2(len$$1);\n\n    for (let i$$4 = 0; i$$4 <= len$$1 - 1; i$$4++) {\n      target$$2[i$$4] = f$$1(source$$1[i$$4]);\n    }\n\n    return target$$2;\n  } else {\n    return source$$1.map(function mapping$$1(x$$1) {\n      return f$$1(x$$1);\n    });\n  }\n}\nexport function mapIndexed2(f$$2, source1, source2, cons$$3) {\n  if (source1.length !== source2.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result = new cons$$3(source1.length);\n\n  for (let i$$5 = 0; i$$5 <= source1.length - 1; i$$5++) {\n    result[i$$5] = f$$2(i$$5, source1[i$$5], source2[i$$5]);\n  }\n\n  return result;\n}\nexport function map2(f$$3, source1$$1, source2$$1, cons$$4) {\n  if (source1$$1.length !== source2$$1.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result$$1 = new cons$$4(source1$$1.length);\n\n  for (let i$$6 = 0; i$$6 <= source1$$1.length - 1; i$$6++) {\n    result$$1[i$$6] = f$$3(source1$$1[i$$6], source2$$1[i$$6]);\n  }\n\n  return result$$1;\n}\nexport function mapIndexed3(f$$4, source1$$2, source2$$2, source3, cons$$5) {\n  if (source1$$2.length !== source2$$2.length ? true : source2$$2.length !== source3.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result$$2 = new cons$$5(source1$$2.length);\n\n  for (let i$$7 = 0; i$$7 <= source1$$2.length - 1; i$$7++) {\n    result$$2[i$$7] = f$$4(i$$7, source1$$2[i$$7], source2$$2[i$$7], source3[i$$7]);\n  }\n\n  return result$$2;\n}\nexport function map3(f$$5, source1$$3, source2$$3, source3$$1, cons$$6) {\n  if (source1$$3.length !== source2$$3.length ? true : source2$$3.length !== source3$$1.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const result$$3 = new cons$$6(source1$$3.length);\n\n  for (let i$$8 = 0; i$$8 <= source1$$3.length - 1; i$$8++) {\n    result$$3[i$$8] = f$$5(source1$$3[i$$8], source2$$3[i$$8], source3$$1[i$$8]);\n  }\n\n  return result$$3;\n}\nexport function mapFold(mapping$$2, state, array$$9, cons$$7) {\n  const matchValue = array$$9.length | 0;\n\n  if (matchValue === 0) {\n    return [[], state];\n  } else {\n    let acc = state;\n    const res = new cons$$7(matchValue);\n\n    for (let i$$9 = 0; i$$9 <= array$$9.length - 1; i$$9++) {\n      const patternInput = mapping$$2(acc, array$$9[i$$9]);\n      res[i$$9] = patternInput[0];\n      acc = patternInput[1];\n    }\n\n    return [res, acc];\n  }\n}\nexport function mapFoldBack(mapping$$3, array$$10, state$$1, cons$$8) {\n  const matchValue$$1 = array$$10.length | 0;\n\n  if (matchValue$$1 === 0) {\n    return [[], state$$1];\n  } else {\n    let acc$$1 = state$$1;\n    const res$$1 = new cons$$8(matchValue$$1);\n\n    for (let i$$10 = array$$10.length - 1; i$$10 >= 0; i$$10--) {\n      const patternInput$$1 = mapping$$3(array$$10[i$$10], acc$$1);\n      res$$1[i$$10] = patternInput$$1[0];\n      acc$$1 = patternInput$$1[1];\n    }\n\n    return [res$$1, acc$$1];\n  }\n}\nexport function indexed(source$$2) {\n  const len$$4 = source$$2.length | 0;\n  const target$$3 = new Array(len$$4);\n\n  for (let i$$11 = 0; i$$11 <= len$$4 - 1; i$$11++) {\n    target$$3[i$$11] = [i$$11, source$$2[i$$11]];\n  }\n\n  return target$$3;\n}\nexport function truncate(count$$4, array$$11) {\n  const count$$5 = max$$1(comparePrimitives, 0, count$$4) | 0;\n  return array$$11.slice(0, 0 + count$$5);\n}\nexport function concat(arrays, cons$$9) {\n  var arr$$3;\n  const arrays$$1 = Array.from(arrays);\n  const matchValue$$2 = arrays$$1.length | 0;\n\n  switch (matchValue$$2) {\n    case 0:\n      {\n        return new cons$$9(0);\n      }\n\n    case 1:\n      {\n        return arrays$$1[0];\n      }\n\n    default:\n      {\n        if (arr$$3 = arrays$$1[0], ArrayBuffer.isView(arr$$3)) {\n          let totalIdx = 0;\n          let totalLength = 0;\n\n          for (let idx = 0; idx <= arrays$$1.length - 1; idx++) {\n            const arr$$4 = arrays$$1[idx];\n            totalLength = totalLength + arr$$4.length;\n          }\n\n          const result$$4 = new cons$$9(totalLength);\n\n          for (let idx$$1 = 0; idx$$1 <= arrays$$1.length - 1; idx$$1++) {\n            const arr$$5 = arrays$$1[idx$$1];\n\n            for (let j = 0; j <= arr$$5.length - 1; j++) {\n              result$$4[totalIdx] = arr$$5[j];\n              totalIdx = totalIdx + 1;\n            }\n          }\n\n          return result$$4;\n        } else {\n          return arrays$$1[0].concat(...arrays$$1.slice(1));\n        }\n      }\n  }\n}\nexport function collect(mapping$$4, array$$14, cons$$10) {\n  const mapped = map(mapping$$4, array$$14, Array);\n  return concat(mapped, cons$$10);\n}\nexport function countBy(projection, array$$15, eq) {\n  const dict = createMutable([], eq);\n  const keys = [];\n\n  for (let idx$$2 = 0; idx$$2 <= array$$15.length - 1; idx$$2++) {\n    const value$$2 = array$$15[idx$$2];\n    const key = projection(value$$2);\n    const matchValue$$3 = tryGetValue(dict, key, 0);\n\n    if (matchValue$$3[0]) {\n      dict.set(key, matchValue$$3[1] + 1);\n    } else {\n      dict.set(key, 1);\n      const value$$3 = keys.push(key);\n      value$$3, null;\n    }\n  }\n\n  const result$$5 = map(function (key$$1) {\n    return [key$$1, getItemFromDict(dict, key$$1)];\n  }, keys, Array);\n  return result$$5;\n}\nexport function distinctBy(projection$$1, array$$17, eq$$1) {\n  const hashSet = createMutable$$1([], eq$$1);\n  return filter(function predicate$$2($arg$$3) {\n    const arg00 = projection$$1($arg$$3);\n    return addToSet(arg00, hashSet);\n  }, array$$17);\n}\nexport function distinct(array$$19, eq$$2) {\n  return distinctBy(function (x$$2) {\n    return x$$2;\n  }, array$$19, eq$$2);\n}\nexport function where(predicate$$3, array$$20) {\n  return array$$20.filter(predicate$$3);\n}\nexport function contains(value$$4, array$$22, eq$$3) {\n  const loop = function loop($i$$12$$75) {\n    loop: while (true) {\n      const i$$12 = $i$$12$$75;\n\n      if (i$$12 >= array$$22.length) {\n        return false;\n      } else if (eq$$3.Equals(value$$4, array$$22[i$$12])) {\n        return true;\n      } else {\n        $i$$12$$75 = i$$12 + 1;\n        continue loop;\n      }\n\n      break;\n    }\n  };\n\n  return loop(0);\n}\nexport function except(itemsToExclude, array$$23, eq$$4) {\n  if (array$$23.length === 0) {\n    return array$$23;\n  } else {\n    const cached = createMutable$$1(itemsToExclude, eq$$4);\n    return array$$23.filter(function predicate$$5(arg00$$1) {\n      return addToSet(arg00$$1, cached);\n    });\n  }\n}\nexport function groupBy(projection$$2, array$$26, cons$$11, eq$$5) {\n  const dict$$1 = createMutable([], eq$$5);\n  const keys$$1 = [];\n\n  for (let idx$$3 = 0; idx$$3 <= array$$26.length - 1; idx$$3++) {\n    const v = array$$26[idx$$3];\n    const key$$2 = projection$$2(v);\n    const matchValue$$4 = tryGetValue(dict$$1, key$$2, null);\n\n    if (matchValue$$4[0]) {\n      dict$$1.set(key$$2, new List(v, matchValue$$4[1]));\n    } else {\n      addToDict(dict$$1, key$$2, new List(v, new List()));\n      const value$$5 = keys$$1.push(key$$2);\n      value$$5, null;\n    }\n  }\n\n  const result$$6 = map(function (key$$3) {\n    var array$$28;\n    return [key$$3, (array$$28 = cons$$11.from(getItemFromDict(dict$$1, key$$3)), (array$$28.reverse()))];\n  }, keys$$1, Array);\n  return result$$6;\n}\nexport function empty(cons$$12) {\n  return new cons$$12(0);\n}\nexport function singleton(value$$6, cons$$14) {\n  const ar = new cons$$14(1);\n  ar[0] = value$$6;\n  return ar;\n}\nexport function initialize(count$$8, initializer, cons$$15) {\n  if (count$$8 < 0) {\n    throw new Error(\"The input must be non-negative\\\\nParameter name: count\");\n  }\n\n  const result$$7 = new cons$$15(count$$8);\n\n  for (let i$$13 = 0; i$$13 <= count$$8 - 1; i$$13++) {\n    result$$7[i$$13] = initializer(i$$13);\n  }\n\n  return result$$7;\n}\nexport function pairwise(array$$30) {\n  if (array$$30.length < 2) {\n    return [];\n  } else {\n    const count$$9 = array$$30.length - 1 | 0;\n    const result$$8 = new Array(count$$9);\n\n    for (let i$$14 = 0; i$$14 <= count$$9 - 1; i$$14++) {\n      result$$8[i$$14] = [array$$30[i$$14], array$$30[i$$14 + 1]];\n    }\n\n    return result$$8;\n  }\n}\nexport function replicate(count$$10, initial, cons$$16) {\n  if (count$$10 < 0) {\n    throw new Error(\"The input must be non-negative\\\\nParameter name: count\");\n  }\n\n  const result$$9 = new cons$$16(count$$10);\n\n  for (let i$$15 = 0; i$$15 <= result$$9.length - 1; i$$15++) {\n    result$$9[i$$15] = initial;\n  }\n\n  return result$$9;\n}\nexport function copy(array$$31, cons$$17) {\n  return array$$31.slice();\n}\nexport function reverse(array$$33, cons$$18) {\n  const array$$35 = array$$33.slice();\n  return array$$35.reverse();\n}\nexport function scan(folder, state$$2, array$$37, cons$$19) {\n  const res$$2 = new cons$$19(array$$37.length + 1);\n  res$$2[0] = state$$2;\n\n  for (let i$$16 = 0; i$$16 <= array$$37.length - 1; i$$16++) {\n    res$$2[i$$16 + 1] = folder(res$$2[i$$16], array$$37[i$$16]);\n  }\n\n  return res$$2;\n}\nexport function scanBack(folder$$1, array$$38, state$$3, cons$$20) {\n  const res$$3 = new cons$$20(array$$38.length + 1);\n  res$$3[array$$38.length] = state$$3;\n\n  for (let i$$17 = array$$38.length - 1; i$$17 >= 0; i$$17--) {\n    res$$3[i$$17] = folder$$1(array$$38[i$$17], res$$3[i$$17 + 1]);\n  }\n\n  return res$$3;\n}\nexport function skip(count$$11, array$$39, cons$$21) {\n  if (count$$11 > array$$39.length) {\n    throw new Error(\"count is greater than array length\\\\nParameter name: count\");\n  }\n\n  if (count$$11 === array$$39.length) {\n    return new cons$$21(0);\n  } else {\n    const count$$12 = (count$$11 < 0 ? 0 : count$$11) | 0;\n    return array$$39.slice(count$$12);\n  }\n}\nexport function skipWhile(predicate$$7, array$$41, cons$$23) {\n  let count$$14 = 0;\n\n  while (count$$14 < array$$41.length ? predicate$$7(array$$41[count$$14]) : false) {\n    count$$14 = count$$14 + 1;\n  }\n\n  if (count$$14 === array$$41.length) {\n    return new cons$$23(0);\n  } else {\n    const count$$15 = count$$14 | 0;\n    return array$$41.slice(count$$15);\n  }\n}\nexport function take(count$$16, array$$43, cons$$25) {\n  if (count$$16 < 0) {\n    throw new Error(\"The input must be non-negative\\\\nParameter name: count\");\n  }\n\n  if (count$$16 > array$$43.length) {\n    throw new Error(\"count is greater than array length\\\\nParameter name: count\");\n  }\n\n  if (count$$16 === 0) {\n    return new cons$$25(0);\n  } else {\n    return array$$43.slice(0, 0 + count$$16);\n  }\n}\nexport function takeWhile(predicate$$8, array$$45, cons$$27) {\n  let count$$18 = 0;\n\n  while (count$$18 < array$$45.length ? predicate$$8(array$$45[count$$18]) : false) {\n    count$$18 = count$$18 + 1;\n  }\n\n  if (count$$18 === 0) {\n    return new cons$$27(0);\n  } else {\n    const count$$19 = count$$18 | 0;\n    return array$$45.slice(0, 0 + count$$19);\n  }\n}\nexport function addRangeInPlace(range, array$$47) {\n  iterate$$1(function (x$$3) {\n    const value$$7 = array$$47.push(x$$3);\n    value$$7, null;\n  }, range);\n}\nexport function removeInPlace(item$$4, array$$49) {\n  const i$$18 = array$$49.indexOf(item$$4);\n\n  if (i$$18 > -1) {\n    const value$$8 = array$$49.splice(i$$18, 1);\n    value$$8, null;\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function removeAllInPlace(predicate$$9, array$$52) {\n  const countRemoveAll = function countRemoveAll(count$$20) {\n    const i$$19 = array$$52.findIndex(predicate$$9);\n\n    if (i$$19 > -1) {\n      const value$$9 = array$$52.splice(i$$19, 1);\n      value$$9, null;\n      return countRemoveAll(count$$20) + 1 | 0;\n    } else {\n      return count$$20 | 0;\n    }\n  };\n\n  return countRemoveAll(0) | 0;\n}\nexport function copyTo(source$$3, sourceIndex, target$$4, targetIndex$$1, count$$21) {\n  const diff = targetIndex$$1 - sourceIndex | 0;\n\n  for (let i$$20 = sourceIndex; i$$20 <= sourceIndex + count$$21 - 1; i$$20++) {\n    target$$4[i$$20 + diff] = source$$3[i$$20];\n  }\n}\nexport function partition(f$$6, source$$4, cons$$29) {\n  const len$$7 = source$$4.length | 0;\n  const res1 = new cons$$29(len$$7);\n  const res2 = new cons$$29(len$$7);\n  let iTrue = 0;\n  let iFalse = 0;\n\n  for (let i$$21 = 0; i$$21 <= len$$7 - 1; i$$21++) {\n    if (f$$6(source$$4[i$$21])) {\n      res1[iTrue] = source$$4[i$$21];\n      iTrue = iTrue + 1;\n    } else {\n      res2[iFalse] = source$$4[i$$21];\n      iFalse = iFalse + 1;\n    }\n  }\n\n  return [(truncate(iTrue, res1)), (truncate(iFalse, res2))];\n}\nexport function find(predicate$$11, array$$57) {\n  const matchValue$$5 = array$$57.find(predicate$$11);\n\n  if (matchValue$$5 == null) {\n    return indexNotFound();\n  } else {\n    const res$$4 = value$$12(matchValue$$5);\n    return res$$4;\n  }\n}\nexport function tryFind(predicate$$13, array$$59) {\n  return array$$59.find(predicate$$13);\n}\nexport function findIndex(predicate$$15, array$$61) {\n  const matchValue$$6 = array$$61.findIndex(predicate$$15);\n\n  if (matchValue$$6 > -1) {\n    return matchValue$$6 | 0;\n  } else {\n    return indexNotFound() | 0;\n  }\n}\nexport function tryFindIndex(predicate$$17, array$$63) {\n  const matchValue$$7 = array$$63.findIndex(predicate$$17);\n\n  if (matchValue$$7 > -1) {\n    return matchValue$$7;\n  } else {\n    return null;\n  }\n}\nexport function pick(chooser, array$$65) {\n  const loop$$1 = function loop$$1($i$$22$$143) {\n    loop$$1: while (true) {\n      const i$$22 = $i$$22$$143;\n\n      if (i$$22 >= array$$65.length) {\n        return indexNotFound();\n      } else {\n        const matchValue$$8 = chooser(array$$65[i$$22]);\n\n        if (matchValue$$8 != null) {\n          const res$$5 = value$$12(matchValue$$8);\n          return res$$5;\n        } else {\n          $i$$22$$143 = i$$22 + 1;\n          continue loop$$1;\n        }\n      }\n\n      break;\n    }\n  };\n\n  return loop$$1(0);\n}\nexport function tryPick(chooser$$1, array$$66) {\n  const loop$$2 = function loop$$2($i$$23$$146) {\n    loop$$2: while (true) {\n      const i$$23 = $i$$23$$146;\n\n      if (i$$23 >= array$$66.length) {\n        return null;\n      } else {\n        const matchValue$$9 = chooser$$1(array$$66[i$$23]);\n\n        if (matchValue$$9 == null) {\n          $i$$23$$146 = i$$23 + 1;\n          continue loop$$2;\n        } else {\n          return matchValue$$9;\n        }\n      }\n\n      break;\n    }\n  };\n\n  return loop$$2(0);\n}\nexport function findBack(predicate$$19, array$$67) {\n  const loop$$3 = function loop$$3($i$$24$$149) {\n    loop$$3: while (true) {\n      const i$$24 = $i$$24$$149;\n\n      if (i$$24 < 0) {\n        return indexNotFound();\n      } else if (predicate$$19(array$$67[i$$24])) {\n        return array$$67[i$$24];\n      } else {\n        $i$$24$$149 = i$$24 - 1;\n        continue loop$$3;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$3(array$$67.length - 1);\n}\nexport function tryFindBack(predicate$$20, array$$68) {\n  const loop$$4 = function loop$$4($i$$25$$152) {\n    loop$$4: while (true) {\n      const i$$25 = $i$$25$$152;\n\n      if (i$$25 < 0) {\n        return null;\n      } else if (predicate$$20(array$$68[i$$25])) {\n        return some(array$$68[i$$25]);\n      } else {\n        $i$$25$$152 = i$$25 - 1;\n        continue loop$$4;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$4(array$$68.length - 1);\n}\nexport function findLastIndex(predicate$$21, array$$69) {\n  const loop$$5 = function loop$$5($i$$26$$155) {\n    loop$$5: while (true) {\n      const i$$26 = $i$$26$$155;\n\n      if (i$$26 < 0) {\n        return -1 | 0;\n      } else if (predicate$$21(array$$69[i$$26])) {\n        return i$$26 | 0;\n      } else {\n        $i$$26$$155 = i$$26 - 1;\n        continue loop$$5;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$5(array$$69.length - 1) | 0;\n}\nexport function findIndexBack(predicate$$22, array$$70) {\n  const loop$$6 = function loop$$6($i$$27$$158) {\n    loop$$6: while (true) {\n      const i$$27 = $i$$27$$158;\n\n      if (i$$27 < 0) {\n        return indexNotFound() | 0;\n      } else if (predicate$$22(array$$70[i$$27])) {\n        return i$$27 | 0;\n      } else {\n        $i$$27$$158 = i$$27 - 1;\n        continue loop$$6;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$6(array$$70.length - 1) | 0;\n}\nexport function tryFindIndexBack(predicate$$23, array$$71) {\n  const loop$$7 = function loop$$7($i$$28$$161) {\n    loop$$7: while (true) {\n      const i$$28 = $i$$28$$161;\n\n      if (i$$28 < 0) {\n        return null;\n      } else if (predicate$$23(array$$71[i$$28])) {\n        return i$$28;\n      } else {\n        $i$$28$$161 = i$$28 - 1;\n        continue loop$$7;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$7(array$$71.length - 1);\n}\nexport function choose(chooser$$2, array$$72, cons$$30) {\n  const arr$$6 = array$$72.filter(function f$$7(x$$4) {\n    const option = chooser$$2(x$$4);\n    return option != null;\n  });\n  return map(function g(x$$5) {\n    const option$$1 = chooser$$2(x$$5);\n    return value$$12(option$$1);\n  }, arr$$6, cons$$30);\n}\nexport function foldIndexed(folder$$2, state$$4, array$$74) {\n  return array$$74.reduce(function (delegateArg0$$1, delegateArg1$$1, delegateArg2) {\n    return folder$$2(delegateArg2, delegateArg0$$1, delegateArg1$$1);\n  }, state$$4);\n}\nexport function fold(folder$$4, state$$6, array$$76) {\n  return array$$76.reduce(function (delegateArg0$$2, delegateArg1$$2) {\n    return folder$$4(delegateArg0$$2, delegateArg1$$2);\n  }, state$$6);\n}\nexport function iterate(action, array$$78) {\n  for (let i$$30 = 0; i$$30 <= array$$78.length - 1; i$$30++) {\n    action(array$$78[i$$30]);\n  }\n}\nexport function iterateIndexed(action$$1, array$$79) {\n  for (let i$$31 = 0; i$$31 <= array$$79.length - 1; i$$31++) {\n    action$$1(i$$31, array$$79[i$$31]);\n  }\n}\nexport function iterate2(action$$2, array1$$2, array2$$2) {\n  if (array1$$2.length !== array2$$2.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  for (let i$$32 = 0; i$$32 <= array1$$2.length - 1; i$$32++) {\n    action$$2(array1$$2[i$$32], array2$$2[i$$32]);\n  }\n}\nexport function iterateIndexed2(action$$3, array1$$3, array2$$3) {\n  if (array1$$3.length !== array2$$3.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  for (let i$$33 = 0; i$$33 <= array1$$3.length - 1; i$$33++) {\n    action$$3(i$$33, array1$$3[i$$33], array2$$3[i$$33]);\n  }\n}\nexport function isEmpty(array$$80) {\n  return array$$80.length === 0;\n}\nexport function forAll(predicate$$25, array$$81) {\n  return array$$81.every(predicate$$25);\n}\nexport function permute(f$$8, array$$83) {\n  const size = array$$83.length | 0;\n  const res$$7 = new array$$83.constructor(array$$83.length);\n  const checkFlags = new Array(size);\n  iterateIndexed(function (i$$34, x$$8) {\n    const j$$1 = f$$8(i$$34) | 0;\n\n    if (j$$1 < 0 ? true : j$$1 >= size) {\n      throw new Error(\"Not a valid permutation\");\n    }\n\n    res$$7[j$$1] = x$$8;\n    checkFlags[j$$1] = 1;\n  }, array$$83);\n  const isValid = forAll(function (y) {\n    return 1 === y;\n  }, checkFlags);\n\n  if (!isValid) {\n    throw new Error(\"Not a valid permutation\");\n  }\n\n  return res$$7;\n}\nexport function setSlice(target$$5, lower, upper, source$$5) {\n  const lower$$1 = defaultArg(lower, 0) | 0;\n  const upper$$1 = defaultArg(upper, 0) | 0;\n  const length = (upper$$1 > 0 ? upper$$1 : target$$5.length - 1) - lower$$1 | 0;\n\n  if (ArrayBuffer.isView(target$$5) ? source$$5.length <= length : false) {\n    const target$$6 = target$$5;\n    const source$$6 = source$$5;\n    return target$$6.set(source$$6, lower$$1);\n  } else {\n    for (let i$$35 = 0; i$$35 <= length; i$$35++) {\n      target$$5[i$$35 + lower$$1] = source$$5[i$$35];\n    }\n  }\n}\nexport function sortInPlaceBy(projection$$3, xs, comparer) {\n  xs.sort(function (x$$10, y$$1) {\n    return comparer.Compare(projection$$3(x$$10), projection$$3(y$$1));\n  });\n}\nexport function sortInPlace(xs$$1, comparer$$1) {\n  xs$$1.sort(function (x$$11, y$$2) {\n    return comparer$$1.Compare(x$$11, y$$2);\n  });\n}\n\nfunction copyArray(array$$84) {\n  const result$$10 = new array$$84.constructor(array$$84.length);\n\n  for (let i$$36 = 0; i$$36 <= array$$84.length - 1; i$$36++) {\n    result$$10[i$$36] = array$$84[i$$36];\n  }\n\n  return result$$10;\n}\n\nexport function sort(xs$$2, comparer$$2) {\n  const xs$$3 = copyArray(xs$$2);\n  xs$$3.sort(function comparer$$3(x$$12, y$$3) {\n    return comparer$$2.Compare(x$$12, y$$3);\n  });\n  return xs$$3;\n}\nexport function sortBy(projection$$4, xs$$4, comparer$$4) {\n  const xs$$5 = copyArray(xs$$4);\n  xs$$5.sort(function comparer$$5(x$$13, y$$4) {\n    return comparer$$4.Compare(projection$$4(x$$13), projection$$4(y$$4));\n  });\n  return xs$$5;\n}\nexport function sortDescending(xs$$6, comparer$$6) {\n  const xs$$7 = copyArray(xs$$6);\n  xs$$7.sort(function comparer$$7(x$$14, y$$5) {\n    return comparer$$6.Compare(x$$14, y$$5) * -1;\n  });\n  return xs$$7;\n}\nexport function sortByDescending(projection$$5, xs$$8, comparer$$8) {\n  const xs$$9 = copyArray(xs$$8);\n  xs$$9.sort(function comparer$$9(x$$15, y$$6) {\n    return comparer$$8.Compare(projection$$5(x$$15), projection$$5(y$$6)) * -1;\n  });\n  return xs$$9;\n}\nexport function sortWith(comparer$$10, xs$$10) {\n  const xs$$11 = copyArray(xs$$10);\n  xs$$11.sort(comparer$$10);\n  return xs$$11;\n}\nexport function unfold(generator, state$$8) {\n  const res$$8 = [];\n\n  const loop$$8 = function loop$$8($state$$9$$220) {\n    loop$$8: while (true) {\n      const state$$9 = $state$$9$$220;\n      const matchValue$$10 = generator(state$$9);\n\n      if (matchValue$$10 != null) {\n        const x$$16 = matchValue$$10[0];\n        const s$0027$$2 = matchValue$$10[1];\n        const value$$10 = res$$8.push(x$$16);\n        value$$10, null;\n        $state$$9$$220 = s$0027$$2;\n        continue loop$$8;\n      }\n\n      break;\n    }\n  };\n\n  loop$$8(state$$8);\n  return res$$8;\n}\nexport function unzip(array$$86) {\n  const len$$9 = array$$86.length | 0;\n  const res1$$1 = new Array(len$$9);\n  const res2$$1 = new Array(len$$9);\n  iterateIndexed(function (i$$37, tupledArg) {\n    res1$$1[i$$37] = tupledArg[0];\n    res2$$1[i$$37] = tupledArg[1];\n  }, array$$86);\n  return [res1$$1, res2$$1];\n}\nexport function unzip3(array$$87) {\n  const len$$12 = array$$87.length | 0;\n  const res1$$2 = new Array(len$$12);\n  const res2$$2 = new Array(len$$12);\n  const res3 = new Array(len$$12);\n  iterateIndexed(function (i$$38, tupledArg$$1) {\n    res1$$2[i$$38] = tupledArg$$1[0];\n    res2$$2[i$$38] = tupledArg$$1[1];\n    res3[i$$38] = tupledArg$$1[2];\n  }, array$$87);\n  return [res1$$2, res2$$2, res3];\n}\nexport function zip(array1$$4, array2$$4) {\n  if (array1$$4.length !== array2$$4.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  let result$$11;\n  const len$$16 = array1$$4.length | 0;\n  result$$11 = new Array(len$$16);\n\n  for (let i$$39 = 0; i$$39 <= array1$$4.length - 1; i$$39++) {\n    result$$11[i$$39] = [array1$$4[i$$39], array2$$4[i$$39]];\n  }\n\n  return result$$11;\n}\nexport function zip3(array1$$5, array2$$5, array3) {\n  if (array1$$5.length !== array2$$5.length ? true : array2$$5.length !== array3.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  let result$$12;\n  const len$$17 = array1$$5.length | 0;\n  result$$12 = new Array(len$$17);\n\n  for (let i$$40 = 0; i$$40 <= array1$$5.length - 1; i$$40++) {\n    result$$12[i$$40] = [array1$$5[i$$40], array2$$5[i$$40], array3[i$$40]];\n  }\n\n  return result$$12;\n}\nexport function chunkBySize(chunkSize, array$$88) {\n  if (chunkSize < 1) {\n    throw new Error(\"The input must be positive.\\\\nParameter name: size\");\n  }\n\n  if (array$$88.length === 0) {\n    return [[]];\n  } else {\n    const result$$13 = [];\n\n    for (let x$$17 = 0; x$$17 <= ~~Math.ceil(array$$88.length / chunkSize) - 1; x$$17++) {\n      const start$$8 = x$$17 * chunkSize | 0;\n      const slice = array$$88.slice(start$$8, start$$8 + chunkSize);\n      const value$$11 = result$$13.push(slice);\n      value$$11, null;\n    }\n\n    return result$$13;\n  }\n}\nexport function splitAt(index$$4, array$$91) {\n  if (index$$4 < 0) {\n    throw new Error(\"The input must be non-negative\\\\nParameter name: index\");\n  }\n\n  if (index$$4 > array$$91.length) {\n    throw new Error(\"The input sequence has an insufficient number of elements.\\\\nParameter name: index\");\n  }\n\n  return [array$$91.slice(0, 0 + index$$4), array$$91.slice(index$$4)];\n}\nexport function compareWith(comparer$$12, array1$$6, array2$$6) {\n  if (array1$$6 == null) {\n    if (array2$$6 == null) {\n      return 0;\n    } else {\n      return -1 | 0;\n    }\n  } else if (array2$$6 == null) {\n    return 1;\n  } else {\n    let i$$41 = 0;\n    let result$$14 = 0;\n    const length1 = array1$$6.length | 0;\n    const length2 = array2$$6.length | 0;\n\n    if (length1 > length2) {\n      return 1;\n    } else if (length1 < length2) {\n      return -1 | 0;\n    } else {\n      while (i$$41 < length1 ? result$$14 === 0 : false) {\n        result$$14 = comparer$$12(array1$$6[i$$41], array2$$6[i$$41]);\n        i$$41 = i$$41 + 1;\n      }\n\n      return result$$14 | 0;\n    }\n  }\n}\nexport function equalsWith(comparer$$13, array1$$7, array2$$7) {\n  return compareWith(compare, array1$$7, array2$$7) === 0;\n}\nexport function exactlyOne(array$$94) {\n  if (array$$94.length === 1) {\n    return array$$94[0];\n  } else if (array$$94.length === 0) {\n    throw new Error(\"The input sequence was empty\\\\nParameter name: array\");\n  } else {\n    throw new Error(\"Input array too long\\\\nParameter name: array\");\n  }\n}\nexport function head(array$$95) {\n  if (array$$95.length === 0) {\n    throw new Error(\"The input array was empty\\\\nParameter name: array\");\n  } else {\n    return array$$95[0];\n  }\n}\nexport function tryHead(array$$96) {\n  if (array$$96.length === 0) {\n    return null;\n  } else {\n    return some(array$$96[0]);\n  }\n}\nexport function tail(array$$97) {\n  if (array$$97.length === 0) {\n    throw new Error(\"Not enough elements\\\\nParameter name: array\");\n  }\n\n  return array$$97.slice(1);\n}\nexport function item(index$$5, array$$99) {\n  return array$$99[index$$5];\n}\nexport function tryItem(index$$6, array$$100) {\n  if (index$$6 < 0 ? true : index$$6 >= array$$100.length) {\n    return null;\n  } else {\n    return some(array$$100[index$$6]);\n  }\n}\nexport function foldBackIndexed(folder$$6, array$$101, state$$10) {\n  return array$$101.reduceRight(function (delegateArg0$$3, delegateArg1$$3, delegateArg2$$1) {\n    return folder$$6(delegateArg2$$1, delegateArg1$$3, delegateArg0$$3);\n  }, state$$10);\n}\nexport function foldBack(folder$$8, array$$103, state$$12) {\n  return array$$103.reduceRight(function (delegateArg0$$4, delegateArg1$$4) {\n    return folder$$8(delegateArg1$$4, delegateArg0$$4);\n  }, state$$12);\n}\nexport function foldIndexed2(folder$$10, state$$14, array1$$8, array2$$8) {\n  let acc$$6 = state$$14;\n\n  if (array1$$8.length !== array2$$8.length) {\n    throw new Error(\"Arrays have different lengths\");\n  }\n\n  for (let i$$43 = 0; i$$43 <= array1$$8.length - 1; i$$43++) {\n    acc$$6 = folder$$10(i$$43, acc$$6, array1$$8[i$$43], array2$$8[i$$43]);\n  }\n\n  return acc$$6;\n}\nexport function fold2(folder$$11, state$$15, array1$$9, array2$$9) {\n  return foldIndexed2(function (_arg1, acc$$7, x$$20, y$$7) {\n    return folder$$11(acc$$7, x$$20, y$$7);\n  }, state$$15, array1$$9, array2$$9);\n}\nexport function foldBackIndexed2(folder$$12, array1$$10, array2$$10, state$$16) {\n  let acc$$8 = state$$16;\n\n  if (array1$$10.length !== array2$$10.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  const size$$1 = array1$$10.length | 0;\n\n  for (let i$$44 = 1; i$$44 <= size$$1; i$$44++) {\n    acc$$8 = folder$$12(i$$44 - 1, array1$$10[size$$1 - i$$44], array2$$10[size$$1 - i$$44], acc$$8);\n  }\n\n  return acc$$8;\n}\nexport function foldBack2(f$$9, array1$$11, array2$$11, state$$17) {\n  return foldBackIndexed2(function (_arg1$$1, x$$21, y$$8, acc$$9) {\n    return f$$9(x$$21, y$$8, acc$$9);\n  }, array1$$11, array2$$11, state$$17);\n}\nexport function reduce(reduction, array$$105) {\n  if (array$$105.length === 0) {\n    throw new Error(\"The input array was empty\");\n  }\n\n  return array$$105.reduce(reduction);\n}\nexport function reduceBack(reduction$$2, array$$107) {\n  if (array$$107.length === 0) {\n    throw new Error(\"The input array was empty\");\n  }\n\n  return array$$107.reduceRight(reduction$$2);\n}\nexport function forAll2(predicate$$27, array1$$12, array2$$12) {\n  return fold2(function (acc$$10, x$$22, y$$9) {\n    return acc$$10 ? predicate$$27(x$$22, y$$9) : false;\n  }, true, array1$$12, array2$$12);\n}\nexport function existsOffset($predicate$$28$$275, $array$$109$$276, $index$$7$$277) {\n  existsOffset: while (true) {\n    const predicate$$28 = $predicate$$28$$275,\n          array$$109 = $array$$109$$276,\n          index$$7 = $index$$7$$277;\n\n    if (index$$7 === array$$109.length) {\n      return false;\n    } else if (predicate$$28(array$$109[index$$7])) {\n      return true;\n    } else {\n      $predicate$$28$$275 = predicate$$28;\n      $array$$109$$276 = array$$109;\n      $index$$7$$277 = index$$7 + 1;\n      continue existsOffset;\n    }\n\n    break;\n  }\n}\nexport function exists(predicate$$29, array$$110) {\n  return existsOffset(predicate$$29, array$$110, 0);\n}\nexport function existsOffset2($predicate$$30$$280, $array1$$13$$281, $array2$$13$$282, $index$$8$$283) {\n  existsOffset2: while (true) {\n    const predicate$$30 = $predicate$$30$$280,\n          array1$$13 = $array1$$13$$281,\n          array2$$13 = $array2$$13$$282,\n          index$$8 = $index$$8$$283;\n\n    if (index$$8 === array1$$13.length) {\n      return false;\n    } else if (predicate$$30(array1$$13[index$$8], array2$$13[index$$8])) {\n      return true;\n    } else {\n      $predicate$$30$$280 = predicate$$30;\n      $array1$$13$$281 = array1$$13;\n      $array2$$13$$282 = array2$$13;\n      $index$$8$$283 = index$$8 + 1;\n      continue existsOffset2;\n    }\n\n    break;\n  }\n}\nexport function exists2(predicate$$31, array1$$14, array2$$14) {\n  if (array1$$14.length !== array2$$14.length) {\n    throw new Error(\"Arrays had different lengths\");\n  }\n\n  return existsOffset2(predicate$$31, array1$$14, array2$$14, 0);\n}\nexport function sum(array$$111, adder) {\n  let acc$$11 = adder.GetZero();\n\n  for (let i$$45 = 0; i$$45 <= array$$111.length - 1; i$$45++) {\n    acc$$11 = adder.Add(acc$$11, array$$111[i$$45]);\n  }\n\n  return acc$$11;\n}\nexport function sumBy(projection$$6, array$$112, adder$$1) {\n  let acc$$12 = adder$$1.GetZero();\n\n  for (let i$$46 = 0; i$$46 <= array$$112.length - 1; i$$46++) {\n    acc$$12 = adder$$1.Add(acc$$12, projection$$6(array$$112[i$$46]));\n  }\n\n  return acc$$12;\n}\nexport function maxBy(projection$$7, xs$$12, comparer$$14) {\n  return reduce(function (x$$23, y$$10) {\n    return comparer$$14.Compare(projection$$7(y$$10), projection$$7(x$$23)) > 0 ? y$$10 : x$$23;\n  }, xs$$12);\n}\nexport function max(xs$$13, comparer$$15) {\n  return reduce(function (x$$24, y$$11) {\n    return comparer$$15.Compare(y$$11, x$$24) > 0 ? y$$11 : x$$24;\n  }, xs$$13);\n}\nexport function minBy(projection$$8, xs$$14, comparer$$16) {\n  return reduce(function (x$$25, y$$12) {\n    return comparer$$16.Compare(projection$$8(y$$12), projection$$8(x$$25)) > 0 ? x$$25 : y$$12;\n  }, xs$$14);\n}\nexport function min(xs$$15, comparer$$17) {\n  return reduce(function (x$$26, y$$13) {\n    return comparer$$17.Compare(y$$13, x$$26) > 0 ? x$$26 : y$$13;\n  }, xs$$15);\n}\nexport function average(array$$113, averager) {\n  if (array$$113.length === 0) {\n    throw new Error(\"The input array was empty\\\\nParameter name: array\");\n  }\n\n  let total = averager.GetZero();\n\n  for (let i$$47 = 0; i$$47 <= array$$113.length - 1; i$$47++) {\n    total = averager.Add(total, array$$113[i$$47]);\n  }\n\n  return averager.DivideByInt(total, array$$113.length);\n}\nexport function averageBy(projection$$9, array$$114, averager$$1) {\n  if (array$$114.length === 0) {\n    throw new Error(\"The input array was empty\\\\nParameter name: array\");\n  }\n\n  let total$$1 = averager$$1.GetZero();\n\n  for (let i$$48 = 0; i$$48 <= array$$114.length - 1; i$$48++) {\n    total$$1 = averager$$1.Add(total$$1, projection$$9(array$$114[i$$48]));\n  }\n\n  return averager$$1.DivideByInt(total$$1, array$$114.length);\n}\nexport function ofSeq(source$$7, cons$$31) {\n  return cons$$31.from(source$$7);\n}\nexport function ofList(source$$8, cons$$32) {\n  return cons$$32.from(source$$8);\n}\nexport function toList(source$$9) {\n  const len$$18 = source$$9.length | 0;\n  let target$$7 = new List();\n\n  for (let i$$49 = len$$18 - 1; i$$49 >= 0; i$$49--) {\n    target$$7 = new List(source$$9[i$$49], target$$7);\n  }\n\n  return target$$7;\n}\nexport function windowed(windowSize, source$$10) {\n  if (windowSize <= 0) {\n    throw new Error(\"windowSize must be positive\");\n  }\n\n  let res$$9;\n  const len$$19 = max$$1(comparePrimitives, 0, source$$10.length - windowSize) | 0;\n  res$$9 = new Array(len$$19);\n\n  for (let i$$50 = windowSize; i$$50 <= source$$10.length; i$$50++) {\n    res$$9[i$$50 - windowSize] = source$$10.slice(i$$50 - windowSize, i$$50 - 1 + 1);\n  }\n\n  return res$$9;\n}","import { defaultArg, value as value$$1, some } from \"./Option.js\";\nimport { List } from \"./Types.js\";\nimport { collect as collect$$1, scanBack as scanBack$$1, scan as scan$$1, foldBack2 as foldBack2$$1, fold2 as fold2$$1, fold as fold$$1, map as map$$1 } from \"./Seq.js\";\nimport { partialApply, getItemFromDict, addToDict, tryGetValue, addToSet, count } from \"./Util.js\";\nimport { ofList } from \"./Array.js\";\nimport { permute as permute$$1, findIndexBack as findIndexBack$$1, tryFindIndexBack as tryFindIndexBack$$1 } from \"./Array\";\nimport { createMutable } from \"./Set.js\";\nimport { createMutable as createMutable$$1 } from \"./Map.js\";\nexport function head(_arg1) {\n  if (_arg1.tail != null) {\n    return _arg1.head;\n  } else {\n    throw new Error(\"List was empty\");\n  }\n}\nexport function tryHead(_arg1$$1) {\n  if (_arg1$$1.tail != null) {\n    return some(_arg1$$1.head);\n  } else {\n    return null;\n  }\n}\nexport function tail(_arg1$$2) {\n  if (_arg1$$2.tail != null) {\n    return _arg1$$2.tail;\n  } else {\n    throw new Error(\"List was empty\");\n  }\n}\nexport function last($_arg1$$3$$5) {\n  last: while (true) {\n    const _arg1$$3 = $_arg1$$3$$5;\n\n    if (_arg1$$3.tail != null) {\n      if (_arg1$$3.tail.tail == null) {\n        return _arg1$$3.head;\n      } else {\n        $_arg1$$3$$5 = _arg1$$3.tail;\n        continue last;\n      }\n    } else {\n      throw new Error(\"List was empty\");\n    }\n\n    break;\n  }\n}\nexport function tryLast($_arg1$$4$$6) {\n  tryLast: while (true) {\n    const _arg1$$4 = $_arg1$$4$$6;\n\n    if (_arg1$$4.tail != null) {\n      if (_arg1$$4.tail.tail == null) {\n        return some(_arg1$$4.head);\n      } else {\n        $_arg1$$4$$6 = _arg1$$4.tail;\n        continue tryLast;\n      }\n    } else {\n      return null;\n    }\n\n    break;\n  }\n}\nexport function compareWith(comparer, xs$$3, ys) {\n  if (xs$$3 === ys) {\n    return 0;\n  } else {\n    const loop = function loop($xs$$4$$10, $ys$$1$$11) {\n      loop: while (true) {\n        const xs$$4 = $xs$$4$$10,\n              ys$$1 = $ys$$1$$11;\n\n        if (xs$$4.tail != null) {\n          if (ys$$1.tail != null) {\n            const matchValue$$1 = comparer(xs$$4.head, ys$$1.head) | 0;\n\n            if (matchValue$$1 === 0) {\n              $xs$$4$$10 = xs$$4.tail;\n              $ys$$1$$11 = ys$$1.tail;\n              continue loop;\n            } else {\n              return matchValue$$1 | 0;\n            }\n          } else {\n            return 1;\n          }\n        } else if (ys$$1.tail == null) {\n          return 0;\n        } else {\n          return -1 | 0;\n        }\n\n        break;\n      }\n    };\n\n    return loop(xs$$3, ys) | 0;\n  }\n}\nexport function foldIndexedAux($f$$12, $i$$13, $acc$$14, $_arg1$$5$$15) {\n  foldIndexedAux: while (true) {\n    const f = $f$$12,\n          i = $i$$13,\n          acc = $acc$$14,\n          _arg1$$5 = $_arg1$$5$$15;\n\n    if (_arg1$$5.tail != null) {\n      $f$$12 = f;\n      $i$$13 = i + 1;\n      $acc$$14 = f(i, acc, _arg1$$5.head);\n      $_arg1$$5$$15 = _arg1$$5.tail;\n      continue foldIndexedAux;\n    } else {\n      return acc;\n    }\n\n    break;\n  }\n}\nexport function foldIndexed(f$$1, state, xs$$7) {\n  return foldIndexedAux(f$$1, 0, state, xs$$7);\n}\nexport function fold($f$$2$$19, $state$$1$$20, $xs$$8$$21) {\n  fold: while (true) {\n    const f$$2 = $f$$2$$19,\n          state$$1 = $state$$1$$20,\n          xs$$8 = $xs$$8$$21;\n\n    if (xs$$8.tail != null) {\n      $f$$2$$19 = f$$2;\n      $state$$1$$20 = f$$2(state$$1, xs$$8.head);\n      $xs$$8$$21 = xs$$8.tail;\n      continue fold;\n    } else {\n      return state$$1;\n    }\n\n    break;\n  }\n}\nexport function reverse(xs$$9) {\n  return fold(function (acc$$1, x$$6) {\n    return new List(x$$6, acc$$1);\n  }, new List(), xs$$9);\n}\nexport function foldBack(f$$3, xs$$10, state$$2) {\n  return fold(function (acc$$2, x$$7) {\n    return f$$3(x$$7, acc$$2);\n  }, state$$2, reverse(xs$$10));\n}\nexport function toSeq(xs$$11) {\n  return map$$1(function (x$$8) {\n    return x$$8;\n  }, xs$$11);\n}\nexport function ofSeq(xs$$12) {\n  const xs$$13 = fold$$1(function (acc$$3, x$$9) {\n    return new List(x$$9, acc$$3);\n  }, new List(), xs$$12);\n  return reverse(xs$$13);\n}\nexport function concat(lists) {\n  const xs$$15 = fold$$1(function (state$$3, xs$$14) {\n    return fold(function f$$4(acc$$4, x$$10) {\n      return new List(x$$10, acc$$4);\n    }, state$$3, xs$$14);\n  }, new List(), lists);\n  return reverse(xs$$15);\n}\nexport function foldIndexed2Aux($f$$5$$31, $i$$1$$32, $acc$$5$$33, $bs$$34, $cs$$35) {\n  foldIndexed2Aux: while (true) {\n    const f$$5 = $f$$5$$31,\n          i$$1 = $i$$1$$32,\n          acc$$5 = $acc$$5$$33,\n          bs = $bs$$34,\n          cs = $cs$$35;\n    var $target$$36, x$$11, xs$$16, y$$1, ys$$3;\n\n    if (bs.tail != null) {\n      if (cs.tail != null) {\n        $target$$36 = 1;\n        x$$11 = bs.head;\n        xs$$16 = bs.tail;\n        y$$1 = cs.head;\n        ys$$3 = cs.tail;\n      } else {\n        $target$$36 = 2;\n      }\n    } else if (cs.tail == null) {\n      $target$$36 = 0;\n    } else {\n      $target$$36 = 2;\n    }\n\n    switch ($target$$36) {\n      case 0:\n        {\n          return acc$$5;\n        }\n\n      case 1:\n        {\n          $f$$5$$31 = f$$5;\n          $i$$1$$32 = i$$1 + 1;\n          $acc$$5$$33 = f$$5(i$$1, acc$$5, x$$11, y$$1);\n          $bs$$34 = xs$$16;\n          $cs$$35 = ys$$3;\n          continue foldIndexed2Aux;\n        }\n\n      case 2:\n        {\n          throw new Error(\"Lists had different lengths\");\n        }\n    }\n\n    break;\n  }\n}\nexport function foldIndexed2(f$$6, state$$4, xs$$17, ys$$4) {\n  return foldIndexed2Aux(f$$6, 0, state$$4, xs$$17, ys$$4);\n}\nexport function fold2(f$$7, state$$5, xs$$18, ys$$5) {\n  return fold2$$1(f$$7, state$$5, xs$$18, ys$$5);\n}\nexport function foldBack2(f$$8, xs$$19, ys$$6, state$$6) {\n  return foldBack2$$1(f$$8, xs$$19, ys$$6, state$$6);\n}\nexport function unfold(f$$9, state$$7) {\n  const unfoldInner = function unfoldInner($acc$$6$$51, $state$$8$$52) {\n    unfoldInner: while (true) {\n      const acc$$6 = $acc$$6$$51,\n            state$$8 = $state$$8$$52;\n      const matchValue$$3 = f$$9(state$$8);\n\n      if (matchValue$$3 != null) {\n        const x$$12 = matchValue$$3[0];\n        const state$$9 = matchValue$$3[1];\n        $acc$$6$$51 = new List(x$$12, acc$$6);\n        $state$$8$$52 = state$$9;\n        continue unfoldInner;\n      } else {\n        return reverse(acc$$6);\n      }\n\n      break;\n    }\n  };\n\n  return unfoldInner(new List(), state$$7);\n}\nexport function foldIndexed3Aux($f$$10$$53, $i$$2$$54, $acc$$7$$55, $bs$$1$$56, $cs$$1$$57, $ds$$58) {\n  foldIndexed3Aux: while (true) {\n    const f$$10 = $f$$10$$53,\n          i$$2 = $i$$2$$54,\n          acc$$7 = $acc$$7$$55,\n          bs$$1 = $bs$$1$$56,\n          cs$$1 = $cs$$1$$57,\n          ds = $ds$$58;\n    var $target$$59, x$$13, xs$$20, y$$2, ys$$7, z, zs;\n\n    if (bs$$1.tail != null) {\n      if (cs$$1.tail != null) {\n        if (ds.tail != null) {\n          $target$$59 = 1;\n          x$$13 = bs$$1.head;\n          xs$$20 = bs$$1.tail;\n          y$$2 = cs$$1.head;\n          ys$$7 = cs$$1.tail;\n          z = ds.head;\n          zs = ds.tail;\n        } else {\n          $target$$59 = 2;\n        }\n      } else {\n        $target$$59 = 2;\n      }\n    } else if (cs$$1.tail == null) {\n      if (ds.tail == null) {\n        $target$$59 = 0;\n      } else {\n        $target$$59 = 2;\n      }\n    } else {\n      $target$$59 = 2;\n    }\n\n    switch ($target$$59) {\n      case 0:\n        {\n          return acc$$7;\n        }\n\n      case 1:\n        {\n          $f$$10$$53 = f$$10;\n          $i$$2$$54 = i$$2 + 1;\n          $acc$$7$$55 = f$$10(i$$2, acc$$7, x$$13, y$$2, z);\n          $bs$$1$$56 = xs$$20;\n          $cs$$1$$57 = ys$$7;\n          $ds$$58 = zs;\n          continue foldIndexed3Aux;\n        }\n\n      case 2:\n        {\n          throw new Error(\"Lists had different lengths\");\n        }\n    }\n\n    break;\n  }\n}\nexport function foldIndexed3(f$$11, seed, xs$$21, ys$$8, zs$$1) {\n  return foldIndexed3Aux(f$$11, 0, seed, xs$$21, ys$$8, zs$$1);\n}\nexport function fold3(f$$12, state$$10, xs$$22, ys$$9, zs$$2) {\n  return foldIndexed3(function (_arg1$$6, acc$$8, x$$14, y$$3, z$$1) {\n    return f$$12(acc$$8, x$$14, y$$3, z$$1);\n  }, state$$10, xs$$22, ys$$9, zs$$2);\n}\nexport function scan(f$$13, state$$11, xs$$23) {\n  const xs$$24 = scan$$1(f$$13, state$$11, xs$$23);\n  return ofSeq(xs$$24);\n}\nexport function scanBack(f$$14, xs$$25, state$$12) {\n  const xs$$26 = scanBack$$1(f$$14, xs$$25, state$$12);\n  return ofSeq(xs$$26);\n}\nexport function length(xs$$27) {\n  return fold(function (acc$$9, _arg1$$7) {\n    return acc$$9 + 1;\n  }, 0, xs$$27);\n}\nexport function append(xs$$28, ys$$10) {\n  return fold(function (acc$$10, x$$15) {\n    return new List(x$$15, acc$$10);\n  }, ys$$10, reverse(xs$$28));\n}\nexport function collect(f$$15, xs$$29) {\n  const xs$$30 = collect$$1(f$$15, xs$$29);\n  return ofSeq(xs$$30);\n}\nexport function map(f$$16, xs$$31) {\n  const xs$$32 = fold(function (acc$$11, x$$16) {\n    return new List(f$$16(x$$16), acc$$11);\n  }, new List(), xs$$31);\n  return reverse(xs$$32);\n}\nexport function mapIndexed(f$$17, xs$$33) {\n  const xs$$34 = foldIndexed(function (i$$3, acc$$12, x$$17) {\n    return new List(f$$17(i$$3, x$$17), acc$$12);\n  }, new List(), xs$$33);\n  return reverse(xs$$34);\n}\nexport function indexed(xs$$35) {\n  return mapIndexed(function (i$$4, x$$18) {\n    return [i$$4, x$$18];\n  }, xs$$35);\n}\nexport function map2(f$$18, xs$$36, ys$$11) {\n  const xs$$37 = fold2(function (acc$$13, x$$19, y$$4) {\n    return new List(f$$18(x$$19, y$$4), acc$$13);\n  }, new List(), xs$$36, ys$$11);\n  return reverse(xs$$37);\n}\nexport function mapIndexed2(f$$19, xs$$38, ys$$12) {\n  const xs$$39 = foldIndexed2(function (i$$5, acc$$14, x$$20, y$$5) {\n    return new List(f$$19(i$$5, x$$20, y$$5), acc$$14);\n  }, new List(), xs$$38, ys$$12);\n  return reverse(xs$$39);\n}\nexport function map3(f$$20, xs$$40, ys$$13, zs$$3) {\n  const xs$$41 = fold3(function (acc$$15, x$$21, y$$6, z$$2) {\n    return new List(f$$20(x$$21, y$$6, z$$2), acc$$15);\n  }, new List(), xs$$40, ys$$13, zs$$3);\n  return reverse(xs$$41);\n}\nexport function mapIndexed3(f$$21, xs$$42, ys$$14, zs$$4) {\n  const xs$$43 = foldIndexed3(function (i$$6, acc$$16, x$$22, y$$7, z$$3) {\n    return new List(f$$21(i$$6, x$$22, y$$7, z$$3), acc$$16);\n  }, new List(), xs$$42, ys$$14, zs$$4);\n  return reverse(xs$$43);\n}\nexport function mapFold(f$$22, s, xs$$44) {\n  const patternInput$$1 = fold(function foldFn(tupledArg, x$$23) {\n    const patternInput = f$$22(tupledArg[1], x$$23);\n    return [new List(patternInput[0], tupledArg[0]), patternInput[1]];\n  }, [new List(), s], xs$$44);\n  return [reverse(patternInput$$1[0]), patternInput$$1[1]];\n}\nexport function mapFoldBack(f$$23, xs$$45, s$$2) {\n  return mapFold(function (s$$3, v) {\n    return f$$23(v, s$$3);\n  }, s$$2, reverse(xs$$45));\n}\nexport function iterate(f$$24, xs$$46) {\n  fold(function (unitVar0, x$$24) {\n    f$$24(x$$24);\n  }, null, xs$$46);\n}\nexport function iterate2(f$$25, xs$$47, ys$$15) {\n  fold2(function (unitVar0$$1, x$$25, y$$8) {\n    f$$25(x$$25, y$$8);\n  }, null, xs$$47, ys$$15);\n}\nexport function iterateIndexed(f$$26, xs$$48) {\n  foldIndexed(function (i$$7, unitVar1, x$$26) {\n    f$$26(i$$7, x$$26);\n  }, null, xs$$48);\n}\nexport function iterateIndexed2(f$$27, xs$$49, ys$$16) {\n  foldIndexed2(function (i$$8, unitVar1$$1, x$$27, y$$9) {\n    f$$27(i$$8, x$$27, y$$9);\n  }, null, xs$$49, ys$$16);\n}\nexport function ofArray(xs$$50) {\n  let res$$1 = new List();\n\n  for (let i$$9 = count(xs$$50) - 1; i$$9 >= 0; i$$9--) {\n    res$$1 = new List(xs$$50[i$$9], res$$1);\n  }\n\n  return res$$1;\n}\nexport function empty() {\n  return new List();\n}\nexport function isEmpty(_arg1$$8) {\n  if (_arg1$$8.tail == null) {\n    return true;\n  } else {\n    return false;\n  }\n}\nexport function tryPickIndexedAux($f$$28$$120, $i$$10$$121, $_arg1$$9$$122) {\n  tryPickIndexedAux: while (true) {\n    const f$$28 = $f$$28$$120,\n          i$$10 = $i$$10$$121,\n          _arg1$$9 = $_arg1$$9$$122;\n\n    if (_arg1$$9.tail != null) {\n      const result = f$$28(i$$10, _arg1$$9.head);\n\n      if (result == null) {\n        $f$$28$$120 = f$$28;\n        $i$$10$$121 = i$$10 + 1;\n        $_arg1$$9$$122 = _arg1$$9.tail;\n        continue tryPickIndexedAux;\n      } else {\n        return result;\n      }\n    } else {\n      return null;\n    }\n\n    break;\n  }\n}\nexport function tryPickIndexed(f$$29, xs$$52) {\n  return tryPickIndexedAux(f$$29, 0, xs$$52);\n}\nexport function tryPick(f$$30, xs$$53) {\n  return tryPickIndexed(function (_arg1$$10, x$$29) {\n    return f$$30(x$$29);\n  }, xs$$53);\n}\nexport function pick(f$$31, xs$$54) {\n  const matchValue$$5 = tryPick(f$$31, xs$$54);\n\n  if (matchValue$$5 != null) {\n    const x$$30 = value$$1(matchValue$$5);\n    return x$$30;\n  } else {\n    throw new Error(\"List did not contain any matching elements\");\n  }\n}\nexport function tryFindIndexed(f$$32, xs$$55) {\n  return tryPickIndexed(function (i$$11, x$$31) {\n    return f$$32(i$$11, x$$31) ? some(x$$31) : null;\n  }, xs$$55);\n}\nexport function tryFind(f$$33, xs$$56) {\n  return tryPickIndexed(function (_arg1$$11, x$$32) {\n    return f$$33(x$$32) ? some(x$$32) : null;\n  }, xs$$56);\n}\nexport function findIndexed(f$$34, xs$$57) {\n  const matchValue$$6 = tryFindIndexed(f$$34, xs$$57);\n\n  if (matchValue$$6 != null) {\n    const x$$33 = value$$1(matchValue$$6);\n    return x$$33;\n  } else {\n    throw new Error(\"List did not contain any matching elements\");\n  }\n}\nexport function find(f$$35, xs$$58) {\n  return findIndexed(function (_arg1$$12, x$$34) {\n    return f$$35(x$$34);\n  }, xs$$58);\n}\nexport function findBack(f$$36, xs$$59) {\n  let xs$$61;\n  xs$$61 = reverse(xs$$59);\n  return find(f$$36, xs$$61);\n}\nexport function tryFindBack(f$$37, xs$$62) {\n  let xs$$64;\n  xs$$64 = reverse(xs$$62);\n  return tryFind(f$$37, xs$$64);\n}\nexport function tryFindIndex(f$$38, xs$$65) {\n  return tryPickIndexed(function (i$$12, x$$35) {\n    return f$$38(x$$35) ? i$$12 : null;\n  }, xs$$65);\n}\nexport function tryFindIndexBack(f$$39, xs$$66) {\n  const array = ofList(xs$$66, Array);\n  return tryFindIndexBack$$1(f$$39, array);\n}\nexport function findIndex(f$$40, xs$$67) {\n  const matchValue$$7 = tryFindIndex(f$$40, xs$$67);\n\n  if (matchValue$$7 != null) {\n    const x$$36 = matchValue$$7 | 0;\n    return x$$36 | 0;\n  } else {\n    throw new Error(\"List did not contain any matching elements\");\n  }\n}\nexport function findIndexBack(f$$41, xs$$68) {\n  const array$$1 = ofList(xs$$68, Array);\n  return findIndexBack$$1(f$$41, array$$1) | 0;\n}\nexport function item(n, xs$$69) {\n  return findIndexed(function (i$$13, _arg1$$13) {\n    return n === i$$13;\n  }, xs$$69);\n}\nexport function tryItem(n$$1, xs$$70) {\n  return tryFindIndexed(function (i$$14, _arg1$$14) {\n    return n$$1 === i$$14;\n  }, xs$$70);\n}\nexport function filter(f$$42, xs$$71) {\n  const xs$$72 = fold(function (acc$$17, x$$37) {\n    return f$$42(x$$37) ? new List(x$$37, acc$$17) : acc$$17;\n  }, new List(), xs$$71);\n  return reverse(xs$$72);\n}\nexport function partition(f$$43, xs$$73) {\n  return fold(function (tupledArg$$1, x$$38) {\n    return f$$43(x$$38) ? [new List(x$$38, tupledArg$$1[0]), tupledArg$$1[1]] : [tupledArg$$1[0], new List(x$$38, tupledArg$$1[1])];\n  }, [new List(), new List()], reverse(xs$$73));\n}\nexport function choose(f$$44, xs$$74) {\n  const xs$$75 = fold(function (acc$$18, x$$39) {\n    const matchValue$$8 = f$$44(x$$39);\n\n    if (matchValue$$8 == null) {\n      return acc$$18;\n    } else {\n      const y$$10 = value$$1(matchValue$$8);\n      return new List(y$$10, acc$$18);\n    }\n  }, new List(), xs$$74);\n  return reverse(xs$$75);\n}\nexport function contains(value, list, eq) {\n  const loop$$1 = function loop$$1($xs$$76$$162) {\n    loop$$1: while (true) {\n      const xs$$76 = $xs$$76$$162;\n\n      if (xs$$76.tail != null) {\n        if (eq.Equals(value, xs$$76.head)) {\n          return true;\n        } else {\n          $xs$$76$$162 = xs$$76.tail;\n          continue loop$$1;\n        }\n      } else {\n        return false;\n      }\n\n      break;\n    }\n  };\n\n  return loop$$1(list);\n}\nexport function except(itemsToExclude, array$$2, eq$$1) {\n  if (isEmpty(array$$2)) {\n    return array$$2;\n  } else {\n    const cached = createMutable(itemsToExclude, eq$$1);\n    return filter(function f$$45(arg00) {\n      return addToSet(arg00, cached);\n    }, array$$2);\n  }\n}\nexport function initialize(n$$2, f$$46) {\n  let xs$$78 = new List();\n\n  for (let i$$15 = 1; i$$15 <= n$$2; i$$15++) {\n    xs$$78 = new List(f$$46(n$$2 - i$$15), xs$$78);\n  }\n\n  return xs$$78;\n}\nexport function replicate(n$$3, x$$40) {\n  return initialize(n$$3, function (_arg1$$15) {\n    return x$$40;\n  });\n}\nexport function reduce(f$$47, _arg1$$16) {\n  if (_arg1$$16.tail != null) {\n    return fold(f$$47, _arg1$$16.head, _arg1$$16.tail);\n  } else {\n    throw new Error(\"List was empty\");\n  }\n}\nexport function reduceBack(f$$48, _arg1$$17) {\n  if (_arg1$$17.tail != null) {\n    return foldBack(f$$48, _arg1$$17.tail, _arg1$$17.head);\n  } else {\n    throw new Error(\"List was empty\");\n  }\n}\nexport function forAll(f$$49, xs$$79) {\n  return fold(function (acc$$19, x$$41) {\n    return acc$$19 ? f$$49(x$$41) : false;\n  }, true, xs$$79);\n}\nexport function forAll2(f$$50, xs$$80, ys$$17) {\n  return fold2(function (acc$$20, x$$42, y$$11) {\n    return acc$$20 ? f$$50(x$$42, y$$11) : false;\n  }, true, xs$$80, ys$$17);\n}\nexport function exists($f$$51$$180, $_arg1$$18$$181) {\n  exists: while (true) {\n    const f$$51 = $f$$51$$180,\n          _arg1$$18 = $_arg1$$18$$181;\n\n    if (_arg1$$18.tail != null) {\n      if (f$$51(_arg1$$18.head)) {\n        return true;\n      } else {\n        $f$$51$$180 = f$$51;\n        $_arg1$$18$$181 = _arg1$$18.tail;\n        continue exists;\n      }\n    } else {\n      return false;\n    }\n\n    break;\n  }\n}\nexport function exists2($f$$52$$182, $bs$$2$$183, $cs$$2$$184) {\n  exists2: while (true) {\n    const f$$52 = $f$$52$$182,\n          bs$$2 = $bs$$2$$183,\n          cs$$2 = $cs$$2$$184;\n    var $target$$185, x$$44, xs$$82, y$$12, ys$$18;\n\n    if (bs$$2.tail != null) {\n      if (cs$$2.tail != null) {\n        $target$$185 = 1;\n        x$$44 = bs$$2.head;\n        xs$$82 = bs$$2.tail;\n        y$$12 = cs$$2.head;\n        ys$$18 = cs$$2.tail;\n      } else {\n        $target$$185 = 2;\n      }\n    } else if (cs$$2.tail == null) {\n      $target$$185 = 0;\n    } else {\n      $target$$185 = 2;\n    }\n\n    switch ($target$$185) {\n      case 0:\n        {\n          return false;\n        }\n\n      case 1:\n        {\n          if (f$$52(x$$44, y$$12)) {\n            return true;\n          } else {\n            $f$$52$$182 = f$$52;\n            $bs$$2$$183 = xs$$82;\n            $cs$$2$$184 = ys$$18;\n            continue exists2;\n          }\n        }\n\n      case 2:\n        {\n          throw new Error(\"Lists had different lengths\");\n        }\n    }\n\n    break;\n  }\n}\nexport function unzip(xs$$83) {\n  return foldBack(function (tupledArg$$2, tupledArg$$3) {\n    return [new List(tupledArg$$2[0], tupledArg$$3[0]), new List(tupledArg$$2[1], tupledArg$$3[1])];\n  }, xs$$83, [new List(), new List()]);\n}\nexport function unzip3(xs$$84) {\n  return foldBack(function (tupledArg$$4, tupledArg$$5) {\n    return [new List(tupledArg$$4[0], tupledArg$$5[0]), new List(tupledArg$$4[1], tupledArg$$5[1]), new List(tupledArg$$4[2], tupledArg$$5[2])];\n  }, xs$$84, [new List(), new List(), new List()]);\n}\nexport function zip(xs$$85, ys$$19) {\n  return map2(function (x$$47, y$$15) {\n    return [x$$47, y$$15];\n  }, xs$$85, ys$$19);\n}\nexport function zip3(xs$$86, ys$$20, zs$$5) {\n  return map3(function (x$$48, y$$16, z$$5) {\n    return [x$$48, y$$16, z$$5];\n  }, xs$$86, ys$$20, zs$$5);\n}\nexport function sort(xs$$87, comparer$$1) {\n  let xs$$89;\n  const xs$$88 = ofList(xs$$87, Array);\n  xs$$88.sort(function comparer$$2(x$$49, y$$17) {\n    return comparer$$1.Compare(x$$49, y$$17);\n  });\n  xs$$89 = xs$$88;\n  return ofArray(xs$$89);\n}\nexport function sortBy(projection, xs$$90, comparer$$3) {\n  let xs$$92;\n  const xs$$91 = ofList(xs$$90, Array);\n  xs$$91.sort(function comparer$$4(x$$50, y$$18) {\n    return comparer$$3.Compare(projection(x$$50), projection(y$$18));\n  });\n  xs$$92 = xs$$91;\n  return ofArray(xs$$92);\n}\nexport function sortDescending(xs$$93, comparer$$5) {\n  let xs$$95;\n  const xs$$94 = ofList(xs$$93, Array);\n  xs$$94.sort(function comparer$$6(x$$51, y$$19) {\n    return comparer$$5.Compare(x$$51, y$$19) * -1;\n  });\n  xs$$95 = xs$$94;\n  return ofArray(xs$$95);\n}\nexport function sortByDescending(projection$$1, xs$$96, comparer$$7) {\n  let xs$$98;\n  const xs$$97 = ofList(xs$$96, Array);\n  xs$$97.sort(function comparer$$8(x$$52, y$$20) {\n    return comparer$$7.Compare(projection$$1(x$$52), projection$$1(y$$20)) * -1;\n  });\n  xs$$98 = xs$$97;\n  return ofArray(xs$$98);\n}\nexport function sortWith(comparer$$9, xs$$99) {\n  let xs$$101;\n  const xs$$100 = ofList(xs$$99, Array);\n  xs$$100.sort(comparer$$9);\n  xs$$101 = xs$$100;\n  return ofArray(xs$$101);\n}\nexport function sum(xs$$102, adder) {\n  return fold(function (acc$$21, x$$53) {\n    return adder.Add(acc$$21, x$$53);\n  }, adder.GetZero(), xs$$102);\n}\nexport function sumBy(f$$53, xs$$103, adder$$1) {\n  return fold(function (acc$$22, x$$54) {\n    return adder$$1.Add(acc$$22, f$$53(x$$54));\n  }, adder$$1.GetZero(), xs$$103);\n}\nexport function maxBy(projection$$2, xs$$104, comparer$$11) {\n  return reduce(function (x$$55, y$$21) {\n    return comparer$$11.Compare(projection$$2(y$$21), projection$$2(x$$55)) > 0 ? y$$21 : x$$55;\n  }, xs$$104);\n}\nexport function max(li, comparer$$12) {\n  return reduce(function (x$$56, y$$22) {\n    return comparer$$12.Compare(y$$22, x$$56) > 0 ? y$$22 : x$$56;\n  }, li);\n}\nexport function minBy(projection$$3, xs$$105, comparer$$13) {\n  return reduce(function (x$$57, y$$23) {\n    return comparer$$13.Compare(projection$$3(y$$23), projection$$3(x$$57)) > 0 ? x$$57 : y$$23;\n  }, xs$$105);\n}\nexport function min(xs$$106, comparer$$14) {\n  return reduce(function (x$$58, y$$24) {\n    return comparer$$14.Compare(y$$24, x$$58) > 0 ? x$$58 : y$$24;\n  }, xs$$106);\n}\nexport function average(xs$$107, averager) {\n  const total = fold(function (acc$$23, x$$59) {\n    return averager.Add(acc$$23, x$$59);\n  }, averager.GetZero(), xs$$107);\n  return averager.DivideByInt(total, length(xs$$107));\n}\nexport function averageBy(f$$54, xs$$108, averager$$1) {\n  const total$$1 = fold(function (acc$$24, x$$60) {\n    return averager$$1.Add(acc$$24, f$$54(x$$60));\n  }, averager$$1.GetZero(), xs$$108);\n  return averager$$1.DivideByInt(total$$1, length(xs$$108));\n}\nexport function permute(f$$55, xs$$109) {\n  let xs$$110;\n  let array$$3;\n  array$$3 = ofList(xs$$109, Array);\n  xs$$110 = permute$$1(f$$55, array$$3);\n  return ofArray(xs$$110);\n}\nexport function skip(i$$16, xs$$111) {\n  const skipInner = function skipInner($i$$17$$237, $xs$$112$$238) {\n    skipInner: while (true) {\n      const i$$17 = $i$$17$$237,\n            xs$$112 = $xs$$112$$238;\n\n      if (i$$17 === 0) {\n        return xs$$112;\n      } else if (xs$$112.tail != null) {\n        $i$$17$$237 = i$$17 - 1;\n        $xs$$112$$238 = xs$$112.tail;\n        continue skipInner;\n      } else {\n        throw new Error(\"The input sequence has an insufficient number of elements.\");\n      }\n\n      break;\n    }\n  };\n\n  if (i$$16 < 0) {\n    throw new Error(\"The input must be non-negative.\");\n  } else {\n    var $target$$239, i$$20, xs$$115;\n\n    if (i$$16 === 0) {\n      $target$$239 = 0;\n    } else if (i$$16 === 1) {\n      if (xs$$111.tail != null) {\n        $target$$239 = 1;\n      } else {\n        $target$$239 = 2;\n        i$$20 = i$$16;\n        xs$$115 = xs$$111;\n      }\n    } else {\n      $target$$239 = 2;\n      i$$20 = i$$16;\n      xs$$115 = xs$$111;\n    }\n\n    switch ($target$$239) {\n      case 0:\n        {\n          return xs$$111;\n        }\n\n      case 1:\n        {\n          return xs$$111.tail;\n        }\n\n      case 2:\n        {\n          return skipInner(i$$20, xs$$115);\n        }\n    }\n  }\n}\nexport function skipWhile($predicate$$240, $xs$$116$$241) {\n  skipWhile: while (true) {\n    const predicate = $predicate$$240,\n          xs$$116 = $xs$$116$$241;\n    var $target$$242, h$$4, t$$4;\n\n    if (xs$$116.tail != null) {\n      if (predicate(xs$$116.head)) {\n        $target$$242 = 0;\n        h$$4 = xs$$116.head;\n        t$$4 = xs$$116.tail;\n      } else {\n        $target$$242 = 1;\n      }\n    } else {\n      $target$$242 = 1;\n    }\n\n    switch ($target$$242) {\n      case 0:\n        {\n          $predicate$$240 = predicate;\n          $xs$$116$$241 = t$$4;\n          continue skipWhile;\n        }\n\n      case 1:\n        {\n          return xs$$116;\n        }\n    }\n\n    break;\n  }\n}\nexport function takeSplitAux($error$$243, $i$$21$$244, $acc$$25$$245, $xs$$117$$246) {\n  takeSplitAux: while (true) {\n    const error = $error$$243,\n          i$$21 = $i$$21$$244,\n          acc$$25 = $acc$$25$$245,\n          xs$$117 = $xs$$117$$246;\n\n    if (i$$21 === 0) {\n      return [reverse(acc$$25), xs$$117];\n    } else if (xs$$117.tail != null) {\n      $error$$243 = error;\n      $i$$21$$244 = i$$21 - 1;\n      $acc$$25$$245 = new List(xs$$117.head, acc$$25);\n      $xs$$117$$246 = xs$$117.tail;\n      continue takeSplitAux;\n    } else {\n      if (error) {\n        throw new Error(\"The input sequence has an insufficient number of elements.\");\n      } else {\n        return [reverse(acc$$25), xs$$117];\n      }\n    }\n\n    break;\n  }\n}\nexport function take(i$$22, xs$$119) {\n  if (i$$22 < 0) {\n    throw new Error(\"The input must be non-negative.\");\n  } else {\n    var $target$$249, i$$25, xs$$120;\n\n    if (i$$22 === 0) {\n      $target$$249 = 0;\n    } else if (i$$22 === 1) {\n      if (xs$$119.tail != null) {\n        $target$$249 = 1;\n      } else {\n        $target$$249 = 2;\n        i$$25 = i$$22;\n        xs$$120 = xs$$119;\n      }\n    } else {\n      $target$$249 = 2;\n      i$$25 = i$$22;\n      xs$$120 = xs$$119;\n    }\n\n    switch ($target$$249) {\n      case 0:\n        {\n          return new List();\n        }\n\n      case 1:\n        {\n          return new List(xs$$119.head, new List());\n        }\n\n      case 2:\n        {\n          const tuple = takeSplitAux(true, i$$25, new List(), xs$$120);\n          return tuple[0];\n        }\n    }\n  }\n}\nexport function takeWhile(predicate$$1, xs$$121) {\n  if (xs$$121.tail != null) {\n    if (xs$$121.tail.tail == null) {\n      if (predicate$$1(xs$$121.head)) {\n        return xs$$121;\n      } else {\n        return xs$$121.tail;\n      }\n    } else {\n      if (!predicate$$1(xs$$121.head)) {\n        return new List();\n      } else {\n        return new List(xs$$121.head, takeWhile(predicate$$1, xs$$121.tail));\n      }\n    }\n  } else {\n    return xs$$121;\n  }\n}\nexport function truncate(i$$26, xs$$123) {\n  if (i$$26 < 0) {\n    throw new Error(\"The input must be non-negative.\");\n  } else {\n    var $target$$254, i$$29, xs$$124;\n\n    if (i$$26 === 0) {\n      $target$$254 = 0;\n    } else if (i$$26 === 1) {\n      if (xs$$123.tail != null) {\n        $target$$254 = 1;\n      } else {\n        $target$$254 = 2;\n        i$$29 = i$$26;\n        xs$$124 = xs$$123;\n      }\n    } else {\n      $target$$254 = 2;\n      i$$29 = i$$26;\n      xs$$124 = xs$$123;\n    }\n\n    switch ($target$$254) {\n      case 0:\n        {\n          return new List();\n        }\n\n      case 1:\n        {\n          return new List(xs$$123.head, new List());\n        }\n\n      case 2:\n        {\n          const tuple$$1 = takeSplitAux(false, i$$29, new List(), xs$$124);\n          return tuple$$1[0];\n        }\n    }\n  }\n}\nexport function splitAt(i$$30, xs$$125) {\n  if (i$$30 < 0) {\n    throw new Error(\"The input must be non-negative.\");\n  } else {\n    var $target$$257, i$$33, xs$$127;\n\n    if (i$$30 === 0) {\n      $target$$257 = 0;\n    } else if (i$$30 === 1) {\n      if (xs$$125.tail != null) {\n        $target$$257 = 1;\n      } else {\n        $target$$257 = 2;\n        i$$33 = i$$30;\n        xs$$127 = xs$$125;\n      }\n    } else {\n      $target$$257 = 2;\n      i$$33 = i$$30;\n      xs$$127 = xs$$125;\n    }\n\n    switch ($target$$257) {\n      case 0:\n        {\n          return [new List(), xs$$125];\n        }\n\n      case 1:\n        {\n          return [new List(xs$$125.head, new List()), xs$$125.tail];\n        }\n\n      case 2:\n        {\n          return takeSplitAux(true, i$$33, new List(), xs$$127);\n        }\n    }\n  }\n}\nexport function outOfRange() {\n  throw new Error(\"Index out of range\");\n}\nexport function slice(lower, upper, xs$$128) {\n  const lower$$1 = defaultArg(lower, 0) | 0;\n  const hasUpper = upper != null;\n\n  if (lower$$1 < 0) {\n    return outOfRange();\n  } else if (hasUpper ? upper < lower$$1 : false) {\n    return new List();\n  } else {\n    let lastIndex = -1 | 0;\n    let res$$2;\n    const state$$13 = new List();\n    res$$2 = foldIndexed(function f$$56(i$$34, acc$$26, x$$67) {\n      lastIndex = i$$34;\n\n      if (lower$$1 <= i$$34 ? !hasUpper ? true : i$$34 <= upper : false) {\n        return new List(x$$67, acc$$26);\n      } else {\n        return acc$$26;\n      }\n    }, state$$13, xs$$128);\n\n    if (lower$$1 > lastIndex + 1 ? true : hasUpper ? upper > lastIndex : false) {\n      outOfRange();\n    }\n\n    return reverse(res$$2);\n  }\n}\nexport function distinctBy(projection$$4, xs$$130, eq$$2) {\n  const hashSet = createMutable([], eq$$2);\n  return filter(function f$$57($arg$$1) {\n    const arg00$$1 = projection$$4($arg$$1);\n    return addToSet(arg00$$1, hashSet);\n  }, xs$$130);\n}\nexport function distinct(xs$$132, eq$$3) {\n  return distinctBy(function (x$$68) {\n    return x$$68;\n  }, xs$$132, eq$$3);\n}\nexport function exactlyOne(xs$$133) {\n  if (xs$$133.tail != null) {\n    if (xs$$133.tail.tail != null) {\n      throw new Error(\"Input list too long\\\\nParameter name: list\");\n    } else {\n      return xs$$133.head;\n    }\n  } else {\n    throw new Error(\"The input sequence was empty\\\\nParameter name: list\");\n  }\n}\nexport function groupBy(projection$$5, xs$$135, eq$$4) {\n  const dict = createMutable$$1([], eq$$4);\n  let keys = new List();\n  iterate(function f$$58(v$$2) {\n    const key = projection$$5(v$$2);\n    const matchValue$$16 = tryGetValue(dict, key, null);\n\n    if (matchValue$$16[0]) {\n      dict.set(key, new List(v$$2, matchValue$$16[1]));\n    } else {\n      addToDict(dict, key, new List(v$$2, new List()));\n      keys = new List(key, keys);\n    }\n  }, xs$$135);\n  let result$$1 = new List();\n  const xs$$137 = keys;\n  iterate(function f$$59(key$$1) {\n    result$$1 = new List([key$$1, reverse(getItemFromDict(dict, key$$1))], result$$1);\n  }, xs$$137);\n  return result$$1;\n}\nexport function countBy(projection$$6, xs$$138, eq$$5) {\n  const dict$$1 = createMutable$$1([], eq$$5);\n  let keys$$1 = new List();\n  iterate(function f$$60(v$$3) {\n    const key$$2 = projection$$6(v$$3);\n    const matchValue$$17 = tryGetValue(dict$$1, key$$2, 0);\n\n    if (matchValue$$17[0]) {\n      dict$$1.set(key$$2, matchValue$$17[1] + 1);\n    } else {\n      dict$$1.set(key$$2, 1);\n      keys$$1 = new List(key$$2, keys$$1);\n    }\n  }, xs$$138);\n  let result$$2 = new List();\n  const xs$$140 = keys$$1;\n  iterate(function f$$61(key$$3) {\n    result$$2 = new List([key$$3, getItemFromDict(dict$$1, key$$3)], result$$2);\n  }, xs$$140);\n  return result$$2;\n}\nexport function where(predicate$$2, xs$$141) {\n  return filter(predicate$$2, xs$$141);\n}\nexport function pairwise(xs$$142) {\n  const inner = function inner($xs$$143$$284, $acc$$27$$285, $x1$$1$$286) {\n    inner: while (true) {\n      const xs$$143 = $xs$$143$$284,\n            acc$$27 = $acc$$27$$285,\n            x1$$1 = $x1$$1$$286;\n\n      if (xs$$143.tail != null) {\n        let copyOfStruct = acc$$27;\n        copyOfStruct.push([x1$$1, xs$$143.head]);\n        $xs$$143$$284 = xs$$143.tail;\n        $acc$$27$$285 = acc$$27;\n        $x1$$1$$286 = xs$$143.head;\n        continue inner;\n      } else {\n        return ofArray(acc$$27);\n      }\n\n      break;\n    }\n  };\n\n  var $target$$287, x1$$2, x2$$2, xs$$145;\n\n  if (xs$$142.tail != null) {\n    if (xs$$142.tail.tail != null) {\n      $target$$287 = 1;\n      x1$$2 = xs$$142.head;\n      x2$$2 = xs$$142.tail.head;\n      xs$$145 = xs$$142.tail.tail;\n    } else {\n      $target$$287 = 0;\n    }\n  } else {\n    $target$$287 = 0;\n  }\n\n  switch ($target$$287) {\n    case 0:\n      {\n        return new List();\n      }\n\n    case 1:\n      {\n        const acc$$28 = [];\n        acc$$28.push([x1$$2, x2$$2]);\n        const clo1 = partialApply(2, inner, [xs$$145]);\n        const clo2 = clo1(acc$$28);\n        return clo2(x2$$2);\n      }\n  }\n}\nexport function windowed(windowSize, source) {\n  if (windowSize <= 0) {\n    throw new Error(\"windowSize must be positive\");\n  }\n\n  let res$$3 = new List();\n\n  for (let i$$35 = length(source); i$$35 >= windowSize; i$$35--) {\n    res$$3 = new List(slice(i$$35 - windowSize, i$$35 - 1, source), res$$3);\n  }\n\n  return res$$3;\n}","namespace Thoth.Json\n\ntype JsonValue = obj\n\ntype ErrorReason =\n    | BadPrimitive of string * JsonValue\n    | BadPrimitiveExtra of string * JsonValue * string\n    | BadType of string * JsonValue\n    | BadField of string * JsonValue\n    | BadPath of string * JsonValue * string\n    | TooSmallArray of string * JsonValue\n    | FailMessage of string\n    | BadOneOf of string list\n\ntype DecoderError = string * ErrorReason\n\ntype Decoder<'T> = string -> JsonValue -> Result<'T, DecoderError>\n\ntype Encoder<'T> = 'T -> JsonValue\n\ntype BoxedDecoder = Decoder<obj>\n\ntype BoxedEncoder = Encoder<obj>\n\ntype ExtraCoders = Map<string, BoxedEncoder * BoxedDecoder>\n\nmodule internal Util =\n    open System.Collections.Generic\n\n    type Cache<'Value>() =\n        let cache = Dictionary<string, 'Value>()\n        member __.GetOrAdd(key, factory) =\n            match cache.TryGetValue(key) with\n            | true, x -> x\n            | false, _ ->\n                let x = factory()\n                cache.Add(key, x)\n                x\n\n    // Tree shaking will remove this if not used\n    // so no need to make them lazy in Fable\n    let CachedEncoders = Cache<BoxedEncoder>()\n    let CachedDecoders = Cache<BoxedDecoder>()\n\n    /// If used from .NET the type resolver won't be injected,\n    /// throw a more informative error than just a null reference.\n    let inline resolveType (resolver: Fable.Core.ITypeResolver<'T> option): System.Type =\n#if !FABLE_COMPILER\n        failwith \"Thoth.Json is only compatible with Fable, use Thoth.Json.Net\"\n#else\n        resolver.Value.ResolveType()\n#endif\n","import { List, declare, Record } from \"../Types.js\";\nimport { record, array, int32 } from \"../Reflection.js\";\nimport { op_LeftShift, op_BitwiseAnd, op_Addition, compare, op_Subtraction, op_Division, equals, toInt, op_Modulus, op_Multiply, fromInteger, fromBits } from \"../Long.js\";\nimport { ofList, copy, initialize, map, fill } from \"../Array.js\";\nimport { int32ToString } from \"../Util.js\";\nimport { isNullOrEmpty, join } from \"../String.js\";\nexport const BigNat = declare(function BigInt_BigNat(arg1, arg2) {\n  this.bound = arg1 | 0;\n  this.digits = arg2;\n}, Record);\nexport function BigNat$reflection() {\n  return record(\"BigInt.BigNat\", [], BigNat, () => [[\"bound\", int32], [\"digits\", array(int32)]]);\n}\nexport function BigNatModule$002EFFT$$$pow32($x$$1, $n$$2) {\n  BigNatModule$002EFFT$$$pow32: while (true) {\n    const x = $x$$1,\n          n = $n$$2;\n\n    if (n === 0) {\n      return 1;\n    } else if (n % 2 === 0) {\n      $x$$1 = x * x;\n      $n$$2 = ~~(n / 2);\n      continue BigNatModule$002EFFT$$$pow32;\n    } else {\n      return x * BigNatModule$002EFFT$$$pow32(x * x, ~~(n / 2)) | 0;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$002EFFT$$$leastBounding2Power(b) {\n  const findBounding2Power = function findBounding2Power($b$$1$$4, $tp$$5, $i$$6) {\n    findBounding2Power: while (true) {\n      const b$$1 = $b$$1$$4,\n            tp = $tp$$5,\n            i = $i$$6;\n\n      if (b$$1 <= tp) {\n        return [tp, i];\n      } else {\n        $b$$1$$4 = b$$1;\n        $tp$$5 = tp * 2;\n        $i$$6 = i + 1;\n        continue findBounding2Power;\n      }\n\n      break;\n    }\n  };\n\n  return findBounding2Power(b, 1, 0);\n}\nconst BigNatModule$002EFFT$$$patternInput$004074 = [fromBits(2013265921, 0, false), 27, 15, 31, 440564289];\nexport const BigNatModule$002EFFT$$$w = BigNatModule$002EFFT$$$patternInput$004074[4];\nexport const BigNatModule$002EFFT$$$p = BigNatModule$002EFFT$$$patternInput$004074[0];\nexport const BigNatModule$002EFFT$$$m = BigNatModule$002EFFT$$$patternInput$004074[2];\nexport const BigNatModule$002EFFT$$$k = BigNatModule$002EFFT$$$patternInput$004074[1];\nexport const BigNatModule$002EFFT$$$g = BigNatModule$002EFFT$$$patternInput$004074[3];\nexport const BigNatModule$002EFFT$$$primeP = BigNatModule$002EFFT$$$p;\nexport const BigNatModule$002EFFT$$$maxBitsInsideFp = 30;\nexport const BigNatModule$002EFFT$002EFp$$$p = 2013265921;\nexport const BigNatModule$002EFFT$002EFp$$$p64 = fromBits(2013265921, 0, true);\nexport function BigNatModule$002EFFT$002EFp$$$toInt(x$$1) {\n  return ~~x$$1;\n}\nexport function BigNatModule$002EFFT$002EFp$$$ofInt32(x$$2) {\n  return x$$2 >>> 0;\n}\nexport const BigNatModule$002EFFT$002EFp$$$mzero = 0;\nexport const BigNatModule$002EFFT$002EFp$$$mone = 1;\nexport const BigNatModule$002EFFT$002EFp$$$mtwo = 2;\nexport function BigNatModule$002EFFT$002EFp$$$mpow($x$$3$$9, $n$$1$$10) {\n  BigNatModule$002EFFT$002EFp$$$mpow: while (true) {\n    const x$$3 = $x$$3$$9,\n          n$$1 = $n$$1$$10;\n\n    if (n$$1 === 0) {\n      return BigNatModule$002EFFT$002EFp$$$mone;\n    } else if (n$$1 % 2 === 0) {\n      $x$$3$$9 = toInt(op_Modulus(op_Multiply(fromInteger(x$$3, true, 6), fromInteger(x$$3, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n      $n$$1$$10 = ~~(n$$1 / 2);\n      continue BigNatModule$002EFFT$002EFp$$$mpow;\n    } else {\n      const y$$2 = BigNatModule$002EFFT$002EFp$$$mpow(toInt(op_Modulus(op_Multiply(fromInteger(x$$3, true, 6), fromInteger(x$$3, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0, ~~(n$$1 / 2));\n      return toInt(op_Modulus(op_Multiply(fromInteger(x$$3, true, 6), fromInteger(y$$2, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$002EFFT$002EFp$$$mpowL($x$$7$$11, $n$$2$$12) {\n  BigNatModule$002EFFT$002EFp$$$mpowL: while (true) {\n    const x$$7 = $x$$7$$11,\n          n$$2 = $n$$2$$12;\n\n    if (equals(n$$2, fromBits(0, 0, false))) {\n      return BigNatModule$002EFFT$002EFp$$$mone;\n    } else if (equals(op_Modulus(n$$2, fromBits(2, 0, false)), fromBits(0, 0, false))) {\n      $x$$7$$11 = toInt(op_Modulus(op_Multiply(fromInteger(x$$7, true, 6), fromInteger(x$$7, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n      $n$$2$$12 = op_Division(n$$2, fromBits(2, 0, false));\n      continue BigNatModule$002EFFT$002EFp$$$mpowL;\n    } else {\n      const y$$5 = BigNatModule$002EFFT$002EFp$$$mpowL(toInt(op_Modulus(op_Multiply(fromInteger(x$$7, true, 6), fromInteger(x$$7, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0, op_Division(n$$2, fromBits(2, 0, false)));\n      return toInt(op_Modulus(op_Multiply(fromInteger(x$$7, true, 6), fromInteger(y$$5, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$002EFFT$002EFp$$$m2PowNthRoot(n$$3) {\n  return BigNatModule$002EFFT$002EFp$$$mpow(BigNatModule$002EFFT$$$w >>> 0, BigNatModule$002EFFT$$$pow32(2, BigNatModule$002EFFT$$$k - n$$3));\n}\nexport function BigNatModule$002EFFT$002EFp$$$minv(x$$11) {\n  return BigNatModule$002EFFT$002EFp$$$mpowL(x$$11, op_Subtraction(BigNatModule$002EFFT$$$primeP, fromBits(2, 0, false)));\n}\nexport function BigNatModule$002EFFT$$$computeFFT(lambda, mu, n$$4, w, u, res, offset) {\n  if (n$$4 === 1) {\n    res[offset] = u[mu];\n  } else {\n    const halfN = ~~(n$$4 / 2) | 0;\n    const ww = toInt(op_Modulus(op_Multiply(fromInteger(w, true, 6), fromInteger(w, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n    const offsetHalfN = offset + halfN | 0;\n    BigNatModule$002EFFT$$$computeFFT(lambda * 2, mu, halfN, ww, u, res, offset);\n    BigNatModule$002EFFT$$$computeFFT(lambda * 2, lambda + mu, halfN, ww, u, res, offsetHalfN);\n    let wj = BigNatModule$002EFFT$002EFp$$$mone;\n\n    for (let j = 0; j <= halfN - 1; j++) {\n      const even = res[offset + j];\n      const odd = res[offsetHalfN + j];\n      let y$$8;\n      const x$$13 = wj;\n      y$$8 = toInt(op_Modulus(op_Multiply(fromInteger(x$$13, true, 6), fromInteger(odd, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n      res[offset + j] = (even + y$$8) % BigNatModule$002EFFT$002EFp$$$p;\n      let y$$10;\n      const x$$15 = wj;\n      y$$10 = toInt(op_Modulus(op_Multiply(fromInteger(x$$15, true, 6), fromInteger(odd, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n      res[offsetHalfN + j] = (even + BigNatModule$002EFFT$002EFp$$$p - y$$10) % BigNatModule$002EFFT$002EFp$$$p;\n      const y$$11 = wj;\n      wj = toInt(op_Modulus(op_Multiply(fromInteger(w, true, 6), fromInteger(y$$11, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n    }\n  }\n}\nexport function BigNatModule$002EFFT$$$computFftInPlace(n$$5, w$$1, u$$1) {\n  const res$$1 = fill(new Uint32Array(n$$5), 0, n$$5, BigNatModule$002EFFT$002EFp$$$mzero);\n  BigNatModule$002EFFT$$$computeFFT(1, 0, n$$5, w$$1, u$$1, res$$1, 0);\n  return res$$1;\n}\nexport function BigNatModule$002EFFT$$$computeInverseFftInPlace(n$$6, w$$2, uT) {\n  const bigKInv = BigNatModule$002EFFT$002EFp$$$minv(n$$6 >>> 0);\n  return map(function (y$$12) {\n    return toInt(op_Modulus(op_Multiply(fromInteger(bigKInv, true, 6), fromInteger(y$$12, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n  }, BigNatModule$002EFFT$$$computFftInPlace(n$$6, BigNatModule$002EFFT$002EFp$$$minv(w$$2), uT), Uint32Array);\n}\nexport const BigNatModule$002EFFT$$$maxTwoPower = 29;\nexport const BigNatModule$002EFFT$$$twoPowerTable = initialize(BigNatModule$002EFFT$$$maxTwoPower - 1, function (i$$1) {\n  return BigNatModule$002EFFT$$$pow32(2, i$$1);\n}, Int32Array);\nexport function BigNatModule$002EFFT$$$computeFftPaddedPolynomialProduct(bigK, k, u$$2, v) {\n  const w$$3 = BigNatModule$002EFFT$002EFp$$$m2PowNthRoot(k);\n  const uT$$1 = BigNatModule$002EFFT$$$computFftInPlace(bigK, w$$3, u$$2);\n  const vT = BigNatModule$002EFFT$$$computFftInPlace(bigK, w$$3, v);\n  const rT = initialize(bigK, function (i$$2) {\n    const x$$19 = uT$$1[i$$2];\n    const y$$14 = vT[i$$2];\n    return toInt(op_Modulus(op_Multiply(fromInteger(x$$19, true, 6), fromInteger(y$$14, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n  }, Uint32Array);\n  const r = BigNatModule$002EFFT$$$computeInverseFftInPlace(bigK, w$$3, rT);\n  return r;\n}\nexport function BigNatModule$002EFFT$$$padTo(n$$8, u$$3) {\n  const uBound = u$$3.length | 0;\n  return initialize(n$$8, function (i$$3) {\n    return i$$3 < uBound ? BigNatModule$002EFFT$002EFp$$$ofInt32(u$$3[i$$3]) : BigNatModule$002EFFT$002EFp$$$mzero;\n  }, Uint32Array);\n}\nexport function BigNatModule$002EFFT$$$computeFftPolynomialProduct(degu, u$$4, degv, v$$1) {\n  const deguv = degu + degv | 0;\n  const bound = deguv + 1 | 0;\n  const patternInput = BigNatModule$002EFFT$$$leastBounding2Power(bound);\n  const w$$4 = BigNatModule$002EFFT$002EFp$$$m2PowNthRoot(patternInput[1]);\n  const u$$5 = BigNatModule$002EFFT$$$padTo(patternInput[0], u$$4);\n  const v$$2 = BigNatModule$002EFFT$$$padTo(patternInput[0], v$$1);\n  const uT$$2 = BigNatModule$002EFFT$$$computFftInPlace(patternInput[0], w$$4, u$$5);\n  const vT$$1 = BigNatModule$002EFFT$$$computFftInPlace(patternInput[0], w$$4, v$$2);\n  const rT$$1 = initialize(patternInput[0], function (i$$4) {\n    const x$$20 = uT$$2[i$$4];\n    const y$$15 = vT$$1[i$$4];\n    return toInt(op_Modulus(op_Multiply(fromInteger(x$$20, true, 6), fromInteger(y$$15, true, 6)), BigNatModule$002EFFT$002EFp$$$p64)) >>> 0;\n  }, Uint32Array);\n  const r$$1 = BigNatModule$002EFFT$$$computeInverseFftInPlace(patternInput[0], w$$4, rT$$1);\n  return map(BigNatModule$002EFFT$002EFp$$$toInt, r$$1, Int32Array);\n}\nexport const BigNatModule$002EFFT$$$mzero = BigNatModule$002EFFT$002EFp$$$mzero;\nexport const BigNatModule$002EFFT$$$mone = BigNatModule$002EFFT$002EFp$$$mone;\nexport const BigNatModule$002EFFT$$$maxFp = (BigNatModule$002EFFT$002EFp$$$p + BigNatModule$002EFFT$002EFp$$$p - BigNatModule$002EFFT$$$mone) % BigNatModule$002EFFT$002EFp$$$p;\nexport function BigNatModule$$$bound(n$$10) {\n  return n$$10.bound;\n}\nexport function BigNatModule$$$setBound(n$$11, v$$3) {\n  n$$11.bound = v$$3;\n}\nexport function BigNatModule$$$coeff(n$$12, i$$5) {\n  return n$$12.digits[i$$5];\n}\nexport function BigNatModule$$$coeff64(n$$13, i$$6) {\n  return fromInteger(BigNatModule$$$coeff(n$$13, i$$6), false, 2);\n}\nexport function BigNatModule$$$setCoeff(n$$14, i$$7, v$$4) {\n  n$$14.digits[i$$7] = v$$4;\n}\nexport function BigNatModule$$$pow64($x$$23$$48, $n$$15$$49) {\n  BigNatModule$$$pow64: while (true) {\n    const x$$23 = $x$$23$$48,\n          n$$15 = $n$$15$$49;\n\n    if (n$$15 === 0) {\n      return fromBits(1, 0, false);\n    } else if (n$$15 % 2 === 0) {\n      $x$$23$$48 = op_Multiply(x$$23, x$$23);\n      $n$$15$$49 = ~~(n$$15 / 2);\n      continue BigNatModule$$$pow64;\n    } else {\n      return op_Multiply(x$$23, BigNatModule$$$pow64(op_Multiply(x$$23, x$$23), ~~(n$$15 / 2)));\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$$$pow32($x$$24$$50, $n$$16$$51) {\n  BigNatModule$$$pow32: while (true) {\n    const x$$24 = $x$$24$$50,\n          n$$16 = $n$$16$$51;\n\n    if (n$$16 === 0) {\n      return 1;\n    } else if (n$$16 % 2 === 0) {\n      $x$$24$$50 = x$$24 * x$$24;\n      $n$$16$$51 = ~~(n$$16 / 2);\n      continue BigNatModule$$$pow32;\n    } else {\n      return x$$24 * BigNatModule$$$pow32(x$$24 * x$$24, ~~(n$$16 / 2)) | 0;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$$$hash(n$$17) {\n  let res$$2 = 0;\n\n  for (let i$$8 = 0; i$$8 <= n$$17.bound - 1; i$$8++) {\n    res$$2 = n$$17.digits[i$$8] + (res$$2 << 3);\n  }\n\n  return res$$2 | 0;\n}\nexport function BigNatModule$$$maxInt(a, b$$2) {\n  if (a < b$$2) {\n    return b$$2 | 0;\n  } else {\n    return a | 0;\n  }\n}\nexport function BigNatModule$$$minInt(a$$1, b$$3) {\n  if (a$$1 < b$$3) {\n    return a$$1 | 0;\n  } else {\n    return b$$3 | 0;\n  }\n}\nexport const BigNatModule$$$baseBits = 24;\nexport const BigNatModule$$$baseN = 16777216;\nexport const BigNatModule$$$baseMask = 16777215;\nexport const BigNatModule$$$baseNi64 = fromBits(16777216, 0, false);\nexport const BigNatModule$$$baseMaski64 = fromBits(16777215, 0, false);\nexport const BigNatModule$$$baseMaskU = fromBits(16777215, 0, true);\nexport const BigNatModule$$$baseMask32A = 16777215;\nexport const BigNatModule$$$baseMask32B = 255;\nexport const BigNatModule$$$baseShift32B = 24;\nexport const BigNatModule$$$baseMask64A = 16777215;\nexport const BigNatModule$$$baseMask64B = 16777215;\nexport const BigNatModule$$$baseMask64C = 65535;\nexport const BigNatModule$$$baseShift64B = 24;\nexport const BigNatModule$$$baseShift64C = 48;\nexport function BigNatModule$$$divbase(x$$25) {\n  return ~~(x$$25 >>> 0 >>> BigNatModule$$$baseBits);\n}\nexport function BigNatModule$$$modbase(x$$26) {\n  return x$$26 & BigNatModule$$$baseMask;\n}\nexport function BigNatModule$$$createN(b$$4) {\n  return new BigNat(b$$4, new Int32Array(b$$4));\n}\nexport function BigNatModule$$$copyN(x$$27) {\n  return new BigNat(x$$27.bound, copy(x$$27.digits, Int32Array));\n}\nexport function BigNatModule$$$normN(n$$18) {\n  const findLeastBound = function findLeastBound($na$$62, $i$$9$$63) {\n    findLeastBound: while (true) {\n      const na = $na$$62,\n            i$$9 = $i$$9$$63;\n\n      if (i$$9 === -1 ? true : na[i$$9] !== 0) {\n        return i$$9 + 1 | 0;\n      } else {\n        $na$$62 = na;\n        $i$$9$$63 = i$$9 - 1;\n        continue findLeastBound;\n      }\n\n      break;\n    }\n  };\n\n  const bound$$1 = findLeastBound(n$$18.digits, n$$18.bound - 1) | 0;\n  n$$18.bound = bound$$1;\n  return n$$18;\n}\nexport const BigNatModule$$$boundInt = 2;\nexport const BigNatModule$$$boundInt64 = 3;\nexport const BigNatModule$$$boundBase = 1;\nexport function BigNatModule$$$embed(x$$28) {\n  const x$$29 = (x$$28 < 0 ? 0 : x$$28) | 0;\n\n  if (x$$29 < BigNatModule$$$baseN) {\n    const r$$2 = BigNatModule$$$createN(1);\n    r$$2.digits[0] = x$$29;\n    return BigNatModule$$$normN(r$$2);\n  } else {\n    const r$$3 = BigNatModule$$$createN(BigNatModule$$$boundInt);\n\n    for (let i$$10 = 0; i$$10 <= BigNatModule$$$boundInt - 1; i$$10++) {\n      r$$3.digits[i$$10] = ~~(x$$29 / BigNatModule$$$pow32(BigNatModule$$$baseN, i$$10)) % BigNatModule$$$baseN;\n    }\n\n    return BigNatModule$$$normN(r$$3);\n  }\n}\nexport function BigNatModule$$$embed64(x$$30) {\n  const x$$31 = compare(x$$30, fromBits(0, 0, false)) < 0 ? fromBits(0, 0, false) : x$$30;\n  const r$$4 = BigNatModule$$$createN(BigNatModule$$$boundInt64);\n\n  for (let i$$11 = 0; i$$11 <= BigNatModule$$$boundInt64 - 1; i$$11++) {\n    r$$4.digits[i$$11] = ~~toInt(op_Modulus(op_Division(x$$31, BigNatModule$$$pow64(BigNatModule$$$baseNi64, i$$11)), BigNatModule$$$baseNi64));\n  }\n\n  return BigNatModule$$$normN(r$$4);\n}\nexport function BigNatModule$$$eval32(n$$19) {\n  if (n$$19.bound === 1) {\n    return n$$19.digits[0] | 0;\n  } else {\n    let acc = 0;\n\n    for (let i$$12 = n$$19.bound - 1; i$$12 >= 0; i$$12--) {\n      acc = n$$19.digits[i$$12] + BigNatModule$$$baseN * acc;\n    }\n\n    return acc | 0;\n  }\n}\nexport function BigNatModule$$$eval64(n$$20) {\n  if (n$$20.bound === 1) {\n    return fromInteger(n$$20.digits[0], false, 2);\n  } else {\n    let acc$$1 = fromBits(0, 0, false);\n\n    for (let i$$13 = n$$20.bound - 1; i$$13 >= 0; i$$13--) {\n      acc$$1 = op_Addition(fromInteger(n$$20.digits[i$$13], false, 2), op_Multiply(BigNatModule$$$baseNi64, acc$$1));\n    }\n\n    return acc$$1;\n  }\n}\nexport const BigNatModule$$$one = BigNatModule$$$embed(1);\nexport const BigNatModule$$$zero = BigNatModule$$$embed(0);\nexport function BigNatModule$$$restrictTo(d, n$$21) {\n  return new BigNat(BigNatModule$$$minInt(d, n$$21.bound), n$$21.digits);\n}\nexport function BigNatModule$$$shiftUp(d$$1, n$$22) {\n  const m = BigNatModule$$$createN(n$$22.bound + d$$1);\n\n  for (let i$$14 = 0; i$$14 <= n$$22.bound - 1; i$$14++) {\n    m.digits[i$$14 + d$$1] = n$$22.digits[i$$14];\n  }\n\n  return m;\n}\nexport function BigNatModule$$$shiftDown(d$$2, n$$23) {\n  if (n$$23.bound - d$$2 <= 0) {\n    return BigNatModule$$$zero;\n  } else {\n    const m$$1 = BigNatModule$$$createN(n$$23.bound - d$$2);\n\n    for (let i$$15 = 0; i$$15 <= m$$1.bound - 1; i$$15++) {\n      m$$1.digits[i$$15] = n$$23.digits[i$$15 + d$$2];\n    }\n\n    return m$$1;\n  }\n}\nexport function BigNatModule$$$degree(n$$24) {\n  return n$$24.bound - 1;\n}\nexport function BigNatModule$$$addP($i$$16$$75, $n$$25$$76, $c$$77, $p$$78, $q$$79, $r$$5$$80) {\n  BigNatModule$$$addP: while (true) {\n    const i$$16 = $i$$16$$75,\n          n$$25 = $n$$25$$76,\n          c = $c$$77,\n          p = $p$$78,\n          q = $q$$79,\n          r$$5 = $r$$5$$80;\n\n    if (i$$16 < n$$25) {\n      const x$$32 = (i$$16 < p.bound ? p.digits[i$$16] : 0) + (i$$16 < q.bound ? q.digits[i$$16] : 0) + c | 0;\n      r$$5.digits[i$$16] = BigNatModule$$$modbase(x$$32);\n      const c$$1 = BigNatModule$$$divbase(x$$32) | 0;\n      $i$$16$$75 = i$$16 + 1;\n      $n$$25$$76 = n$$25;\n      $c$$77 = c$$1;\n      $p$$78 = p;\n      $q$$79 = q;\n      $r$$5$$80 = r$$5;\n      continue BigNatModule$$$addP;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$$$add(p$$1, q$$1) {\n  const rbound = 1 + BigNatModule$$$maxInt(p$$1.bound, q$$1.bound) | 0;\n  const r$$6 = BigNatModule$$$createN(rbound);\n  BigNatModule$$$addP(0, rbound, 0, p$$1, q$$1, r$$6);\n  return BigNatModule$$$normN(r$$6);\n}\nexport function BigNatModule$$$subP($i$$19$$83, $n$$26$$84, $c$$2$$85, $p$$2$$86, $q$$2$$87, $r$$7$$88) {\n  BigNatModule$$$subP: while (true) {\n    const i$$19 = $i$$19$$83,\n          n$$26 = $n$$26$$84,\n          c$$2 = $c$$2$$85,\n          p$$2 = $p$$2$$86,\n          q$$2 = $q$$2$$87,\n          r$$7 = $r$$7$$88;\n\n    if (i$$19 < n$$26) {\n      const x$$33 = (i$$19 < p$$2.bound ? p$$2.digits[i$$19] : 0) - (i$$19 < q$$2.bound ? q$$2.digits[i$$19] : 0) + c$$2 | 0;\n\n      if (x$$33 > 0) {\n        r$$7.digits[i$$19] = BigNatModule$$$modbase(x$$33);\n        const c$$3 = BigNatModule$$$divbase(x$$33) | 0;\n        $i$$19$$83 = i$$19 + 1;\n        $n$$26$$84 = n$$26;\n        $c$$2$$85 = c$$3;\n        $p$$2$$86 = p$$2;\n        $q$$2$$87 = q$$2;\n        $r$$7$$88 = r$$7;\n        continue BigNatModule$$$subP;\n      } else {\n        const x$$34 = x$$33 + BigNatModule$$$baseN | 0;\n        r$$7.digits[i$$19] = BigNatModule$$$modbase(x$$34);\n        const c$$4 = BigNatModule$$$divbase(x$$34) - 1 | 0;\n        $i$$19$$83 = i$$19 + 1;\n        $n$$26$$84 = n$$26;\n        $c$$2$$85 = c$$4;\n        $p$$2$$86 = p$$2;\n        $q$$2$$87 = q$$2;\n        $r$$7$$88 = r$$7;\n        continue BigNatModule$$$subP;\n      }\n    } else {\n      const underflow = c$$2 !== 0;\n      return underflow;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$$$sub(p$$3, q$$3) {\n  const rbound$$1 = BigNatModule$$$maxInt(p$$3.bound, q$$3.bound) | 0;\n  const r$$8 = BigNatModule$$$createN(rbound$$1);\n  const underflow$$1 = BigNatModule$$$subP(0, rbound$$1, 0, p$$3, q$$3, r$$8);\n\n  if (underflow$$1) {\n    return BigNatModule$$$embed(0);\n  } else {\n    return BigNatModule$$$normN(r$$8);\n  }\n}\nexport function BigNatModule$$$isZero(p$$4) {\n  return p$$4.bound === 0;\n}\nexport function BigNatModule$$$IsZero(p$$5) {\n  return BigNatModule$$$isZero(p$$5);\n}\nexport function BigNatModule$$$isOne(p$$6) {\n  if (p$$6.bound === 1) {\n    return p$$6.digits[0] === 1;\n  } else {\n    return false;\n  }\n}\nexport function BigNatModule$$$equal(p$$7, q$$4) {\n  if (p$$7.bound === q$$4.bound) {\n    const check = function check($pa$$96, $qa$$97, $i$$22$$98) {\n      check: while (true) {\n        const pa = $pa$$96,\n              qa = $qa$$97,\n              i$$22 = $i$$22$$98;\n\n        if (i$$22 === -1) {\n          return true;\n        } else if (pa[i$$22] === qa[i$$22]) {\n          $pa$$96 = pa;\n          $qa$$97 = qa;\n          $i$$22$$98 = i$$22 - 1;\n          continue check;\n        } else {\n          return false;\n        }\n\n        break;\n      }\n    };\n\n    return check(p$$7.digits, q$$4.digits, p$$7.bound - 1);\n  } else {\n    return false;\n  }\n}\nexport function BigNatModule$$$shiftCompare(p$$8, pn, q$$5, qn) {\n  if (p$$8.bound + pn < q$$5.bound + qn) {\n    return -1 | 0;\n  } else if (p$$8.bound + pn > q$$5.bound + pn) {\n    return 1;\n  } else {\n    const check$$1 = function check$$1($pa$$1$$103, $qa$$1$$104, $i$$23$$105) {\n      check$$1: while (true) {\n        const pa$$1 = $pa$$1$$103,\n              qa$$1 = $qa$$1$$104,\n              i$$23 = $i$$23$$105;\n\n        if (i$$23 === -1) {\n          return 0;\n        } else {\n          const pai = (i$$23 < pn ? 0 : pa$$1[i$$23 - pn]) | 0;\n          const qai = (i$$23 < qn ? 0 : qa$$1[i$$23 - qn]) | 0;\n\n          if (pai === qai) {\n            $pa$$1$$103 = pa$$1;\n            $qa$$1$$104 = qa$$1;\n            $i$$23$$105 = i$$23 - 1;\n            continue check$$1;\n          } else if (pai < qai) {\n            return -1 | 0;\n          } else {\n            return 1;\n          }\n        }\n\n        break;\n      }\n    };\n\n    return check$$1(p$$8.digits, q$$5.digits, p$$8.bound + pn - 1) | 0;\n  }\n}\nexport function BigNatModule$$$compare(p$$9, q$$6) {\n  if (p$$9.bound < q$$6.bound) {\n    return -1 | 0;\n  } else if (p$$9.bound > q$$6.bound) {\n    return 1;\n  } else {\n    const check$$2 = function check$$2($pa$$2$$108, $qa$$2$$109, $i$$24$$110) {\n      check$$2: while (true) {\n        const pa$$2 = $pa$$2$$108,\n              qa$$2 = $qa$$2$$109,\n              i$$24 = $i$$24$$110;\n\n        if (i$$24 === -1) {\n          return 0;\n        } else if (pa$$2[i$$24] === qa$$2[i$$24]) {\n          $pa$$2$$108 = pa$$2;\n          $qa$$2$$109 = qa$$2;\n          $i$$24$$110 = i$$24 - 1;\n          continue check$$2;\n        } else if (pa$$2[i$$24] < qa$$2[i$$24]) {\n          return -1 | 0;\n        } else {\n          return 1;\n        }\n\n        break;\n      }\n    };\n\n    return check$$2(p$$9.digits, q$$6.digits, p$$9.bound - 1) | 0;\n  }\n}\nexport function BigNatModule$$$lt(p$$10, q$$7) {\n  return BigNatModule$$$compare(p$$10, q$$7) === -1;\n}\nexport function BigNatModule$$$gt(p$$11, q$$8) {\n  return BigNatModule$$$compare(p$$11, q$$8) === 1;\n}\nexport function BigNatModule$$$lte(p$$12, q$$9) {\n  return BigNatModule$$$compare(p$$12, q$$9) !== 1;\n}\nexport function BigNatModule$$$gte(p$$13, q$$10) {\n  return BigNatModule$$$compare(p$$13, q$$10) !== -1;\n}\nexport function BigNatModule$$$min(a$$2, b$$5) {\n  if (BigNatModule$$$lt(a$$2, b$$5)) {\n    return a$$2;\n  } else {\n    return b$$5;\n  }\n}\nexport function BigNatModule$$$max(a$$3, b$$6) {\n  if (BigNatModule$$$lt(a$$3, b$$6)) {\n    return b$$6;\n  } else {\n    return a$$3;\n  }\n}\nexport function BigNatModule$$$contributeArr($a$$4$$123, $i$$25$$124, $c$$5$$125) {\n  BigNatModule$$$contributeArr: while (true) {\n    const a$$4 = $a$$4$$123,\n          i$$25 = $i$$25$$124,\n          c$$5 = $c$$5$$125;\n    const x$$35 = op_Addition(fromInteger(a$$4[i$$25], false, 2), c$$5);\n    const c$$6 = op_Division(x$$35, BigNatModule$$$baseNi64);\n    let x$$38;\n    const value = op_BitwiseAnd(x$$35, BigNatModule$$$baseMaski64);\n    x$$38 = ~~toInt(value);\n    a$$4[i$$25] = x$$38;\n\n    if (compare(c$$6, fromBits(0, 0, false)) > 0) {\n      $a$$4$$123 = a$$4;\n      $i$$25$$124 = i$$25 + 1;\n      $c$$5$$125 = c$$6;\n      continue BigNatModule$$$contributeArr;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$$$scale(k$$2, p$$14) {\n  const rbound$$2 = p$$14.bound + BigNatModule$$$boundInt | 0;\n  const r$$9 = BigNatModule$$$createN(rbound$$2);\n  const k$$3 = fromInteger(k$$2, false, 2);\n\n  for (let i$$26 = 0; i$$26 <= p$$14.bound - 1; i$$26++) {\n    const kpi = op_Multiply(k$$3, fromInteger(p$$14.digits[i$$26], false, 2));\n    BigNatModule$$$contributeArr(r$$9.digits, i$$26, kpi);\n  }\n\n  return BigNatModule$$$normN(r$$9);\n}\nexport function BigNatModule$$$mulSchoolBookBothSmall(p$$15, q$$11) {\n  var value$$1;\n  const r$$11 = BigNatModule$$$createN(2);\n  const rak = op_Multiply(fromInteger(p$$15, false, 2), fromInteger(q$$11, false, 2));\n  BigNatModule$$$setCoeff(r$$11, 0, (value$$1 = op_BitwiseAnd(rak, BigNatModule$$$baseMaski64), (~~toInt(value$$1))));\n  BigNatModule$$$setCoeff(r$$11, 1, ~~toInt(op_Division(rak, BigNatModule$$$baseNi64)));\n  return BigNatModule$$$normN(r$$11);\n}\nexport function BigNatModule$$$mulSchoolBookCarry($r$$12$$130, $c$$8$$131, $k$$4$$132) {\n  var value$$2;\n\n  BigNatModule$$$mulSchoolBookCarry: while (true) {\n    const r$$12 = $r$$12$$130,\n          c$$8 = $c$$8$$131,\n          k$$4 = $k$$4$$132;\n\n    if (compare(c$$8, fromBits(0, 0, false)) > 0) {\n      const rak$$1 = op_Addition(BigNatModule$$$coeff64(r$$12, k$$4), c$$8);\n      BigNatModule$$$setCoeff(r$$12, k$$4, (value$$2 = op_BitwiseAnd(rak$$1, BigNatModule$$$baseMaski64), (~~toInt(value$$2))));\n      $r$$12$$130 = r$$12;\n      $c$$8$$131 = op_Division(rak$$1, BigNatModule$$$baseNi64);\n      $k$$4$$132 = k$$4 + 1;\n      continue BigNatModule$$$mulSchoolBookCarry;\n    }\n\n    break;\n  }\n}\nexport function BigNatModule$$$mulSchoolBookOneSmall(p$$16, q$$12) {\n  var value$$3;\n  const bp = BigNatModule$$$bound(p$$16) | 0;\n  const rbound$$3 = bp + 1 | 0;\n  const r$$13 = BigNatModule$$$createN(rbound$$3);\n  const q$$13 = fromInteger(q$$12, false, 2);\n  let c$$9 = fromBits(0, 0, false);\n\n  for (let i$$28 = 0; i$$28 <= bp - 1; i$$28++) {\n    const rak$$2 = op_Addition(op_Addition(c$$9, BigNatModule$$$coeff64(r$$13, i$$28)), op_Multiply(BigNatModule$$$coeff64(p$$16, i$$28), q$$13));\n    BigNatModule$$$setCoeff(r$$13, i$$28, (value$$3 = op_BitwiseAnd(rak$$2, BigNatModule$$$baseMaski64), (~~toInt(value$$3))));\n    c$$9 = op_Division(rak$$2, BigNatModule$$$baseNi64);\n  }\n\n  BigNatModule$$$mulSchoolBookCarry(r$$13, c$$9, bp);\n  return BigNatModule$$$normN(r$$13);\n}\nexport function BigNatModule$$$mulSchoolBookNeitherSmall(p$$17, q$$14) {\n  var value$$4;\n  const rbound$$4 = p$$17.bound + q$$14.bound | 0;\n  const r$$14 = BigNatModule$$$createN(rbound$$4);\n\n  for (let i$$29 = 0; i$$29 <= p$$17.bound - 1; i$$29++) {\n    const pai$$1 = fromInteger(p$$17.digits[i$$29], false, 2);\n    let c$$10 = fromBits(0, 0, false);\n    let k$$5 = i$$29 | 0;\n\n    for (let j$$1 = 0; j$$1 <= q$$14.bound - 1; j$$1++) {\n      const qaj = fromInteger(q$$14.digits[j$$1], false, 2);\n      const rak$$3 = op_Addition(op_Addition(fromInteger(r$$14.digits[k$$5], false, 2), c$$10), op_Multiply(pai$$1, qaj));\n      r$$14.digits[k$$5] = (value$$4 = op_BitwiseAnd(rak$$3, BigNatModule$$$baseMaski64), (~~toInt(value$$4)));\n      c$$10 = op_Division(rak$$3, BigNatModule$$$baseNi64);\n      k$$5 = k$$5 + 1;\n    }\n\n    BigNatModule$$$mulSchoolBookCarry(r$$14, c$$10, k$$5);\n  }\n\n  return BigNatModule$$$normN(r$$14);\n}\nexport function BigNatModule$$$mulSchoolBook(p$$18, q$$15) {\n  const pSmall = BigNatModule$$$bound(p$$18) === 1;\n  const qSmall = BigNatModule$$$bound(q$$15) === 1;\n\n  if (pSmall ? qSmall : false) {\n    return BigNatModule$$$mulSchoolBookBothSmall(BigNatModule$$$coeff(p$$18, 0), BigNatModule$$$coeff(q$$15, 0));\n  } else if (pSmall) {\n    return BigNatModule$$$mulSchoolBookOneSmall(q$$15, BigNatModule$$$coeff(p$$18, 0));\n  } else if (qSmall) {\n    return BigNatModule$$$mulSchoolBookOneSmall(p$$18, BigNatModule$$$coeff(q$$15, 0));\n  } else {\n    return BigNatModule$$$mulSchoolBookNeitherSmall(p$$18, q$$15);\n  }\n}\nexport const BigNatModule$002Eencoding = declare(function BigInt_BigNatModule_encoding(arg1, arg2, arg3, arg4, arg5, arg6, arg7) {\n  this.bigL = arg1 | 0;\n  this.twoToBigL = arg2 | 0;\n  this.k = arg3 | 0;\n  this.bigK = arg4 | 0;\n  this.bigN = arg5 | 0;\n  this.split = arg6 | 0;\n  this.splits = arg7;\n}, Record);\nexport function BigNatModule$002Eencoding$reflection() {\n  return record(\"BigInt.BigNatModule.encoding\", [], BigNatModule$002Eencoding, () => [[\"bigL\", int32], [\"twoToBigL\", int32], [\"k\", int32], [\"bigK\", int32], [\"bigN\", int32], [\"split\", int32], [\"splits\", array(int32)]]);\n}\nexport function BigNatModule$$$mkEncoding(bigL, k$$6, bigK$$2, bigN) {\n  return new BigNatModule$002Eencoding(bigL, BigNatModule$$$pow32(2, bigL), k$$6, bigK$$2, bigN, ~~(BigNatModule$$$baseBits / bigL), initialize(~~(BigNatModule$$$baseBits / bigL), function (i$$30) {\n    return BigNatModule$$$pow32(2, bigL * i$$30);\n  }, Int32Array));\n}\nexport const BigNatModule$$$table = [BigNatModule$$$mkEncoding(1, 28, 268435456, 268435456), BigNatModule$$$mkEncoding(2, 26, 67108864, 134217728), BigNatModule$$$mkEncoding(3, 24, 16777216, 50331648), BigNatModule$$$mkEncoding(4, 22, 4194304, 16777216), BigNatModule$$$mkEncoding(5, 20, 1048576, 5242880), BigNatModule$$$mkEncoding(6, 18, 262144, 1572864), BigNatModule$$$mkEncoding(7, 16, 65536, 458752), BigNatModule$$$mkEncoding(8, 14, 16384, 131072), BigNatModule$$$mkEncoding(9, 12, 4096, 36864), BigNatModule$$$mkEncoding(10, 10, 1024, 10240), BigNatModule$$$mkEncoding(11, 8, 256, 2816), BigNatModule$$$mkEncoding(12, 6, 64, 768), BigNatModule$$$mkEncoding(13, 4, 16, 208)];\nexport function BigNatModule$$$calculateTableTow(bigL$$1) {\n  const k$$7 = BigNatModule$002EFFT$$$maxBitsInsideFp - 2 * bigL$$1 | 0;\n  const bigK$$3 = BigNatModule$$$pow64(fromBits(2, 0, false), k$$7);\n  const N = op_Multiply(bigK$$3, fromInteger(bigL$$1, false, 2));\n  return [bigL$$1, k$$7, bigK$$3, N];\n}\nexport function BigNatModule$$$encodingGivenResultBits(bitsRes) {\n  const selectFrom = function selectFrom($i$$31$$145) {\n    selectFrom: while (true) {\n      const i$$31 = $i$$31$$145;\n\n      if (i$$31 + 1 < BigNatModule$$$table.length ? bitsRes < BigNatModule$$$table[i$$31 + 1].bigN : false) {\n        $i$$31$$145 = i$$31 + 1;\n        continue selectFrom;\n      } else {\n        return BigNatModule$$$table[i$$31];\n      }\n\n      break;\n    }\n  };\n\n  if (bitsRes >= BigNatModule$$$table[0].bigN) {\n    throw new Error(\"Product is huge, around 268435456 bits, beyond quickmul\");\n  } else {\n    return selectFrom(0);\n  }\n}\nexport const BigNatModule$$$bitmask = initialize(BigNatModule$$$baseBits, function (i$$32) {\n  return BigNatModule$$$pow32(2, i$$32) - 1;\n}, Int32Array);\nexport const BigNatModule$$$twopowers = initialize(BigNatModule$$$baseBits, function (i$$33) {\n  return BigNatModule$$$pow32(2, i$$33);\n}, Int32Array);\nexport const BigNatModule$$$twopowersI64 = initialize(BigNatModule$$$baseBits, function (i$$34) {\n  return BigNatModule$$$pow64(fromBits(2, 0, false), i$$34);\n}, Array);\nexport function BigNatModule$$$wordBits(word) {\n  const hi = function hi($k$$8$$147) {\n    hi: while (true) {\n      const k$$8 = $k$$8$$147;\n\n      if (k$$8 === 0) {\n        return 0;\n      } else if ((word & BigNatModule$$$twopowers[k$$8 - 1]) !== 0) {\n        return k$$8 | 0;\n      } else {\n        $k$$8$$147 = k$$8 - 1;\n        continue hi;\n      }\n\n      break;\n    }\n  };\n\n  return hi(BigNatModule$$$baseBits) | 0;\n}\nexport function BigNatModule$$$bits(u$$6) {\n  if (u$$6.bound === 0) {\n    return 0;\n  } else {\n    return BigNatModule$$$degree(u$$6) * BigNatModule$$$baseBits + BigNatModule$$$wordBits(u$$6.digits[BigNatModule$$$degree(u$$6)]) | 0;\n  }\n}\nexport function BigNatModule$$$extractBits(n$$27, enc, bi) {\n  const bj = bi + enc.bigL - 1 | 0;\n  const biw = ~~(bi / BigNatModule$$$baseBits) | 0;\n  const bjw = ~~(bj / BigNatModule$$$baseBits) | 0;\n\n  if (biw !== bjw) {\n    const x$$47 = (biw < n$$27.bound ? n$$27.digits[biw] : 0) | 0;\n    const y$$17 = (bjw < n$$27.bound ? n$$27.digits[bjw] : 0) | 0;\n    const xbit = bi % BigNatModule$$$baseBits | 0;\n    const nxbits = BigNatModule$$$baseBits - xbit | 0;\n    const x$$48 = x$$47 >> xbit | 0;\n    const y$$18 = y$$17 << nxbits | 0;\n    const x$$49 = x$$48 | y$$18 | 0;\n    const x$$50 = x$$49 & BigNatModule$$$bitmask[enc.bigL] | 0;\n    return x$$50 | 0;\n  } else {\n    const x$$51 = (biw < n$$27.bound ? n$$27.digits[biw] : 0) | 0;\n    const xbit$$1 = bi % BigNatModule$$$baseBits | 0;\n    const x$$52 = x$$51 >> xbit$$1 | 0;\n    const x$$53 = x$$52 & BigNatModule$$$bitmask[enc.bigL] | 0;\n    return x$$53 | 0;\n  }\n}\nexport function BigNatModule$$$encodePoly(enc$$1, n$$28) {\n  const poly = fill(new Uint32Array(enc$$1.bigK), 0, enc$$1.bigK, BigNatModule$002EFFT$002EFp$$$ofInt32(0));\n  const biMax = n$$28.bound * BigNatModule$$$baseBits | 0;\n\n  const encoder = function encoder($i$$38$$154, $bi$$1$$155) {\n    encoder: while (true) {\n      const i$$38 = $i$$38$$154,\n            bi$$1 = $bi$$1$$155;\n\n      if (i$$38 === enc$$1.bigK ? true : bi$$1 > biMax) {} else {\n        const pi = BigNatModule$$$extractBits(n$$28, enc$$1, bi$$1) | 0;\n        poly[i$$38] = BigNatModule$002EFFT$002EFp$$$ofInt32(pi);\n        const i$$39 = i$$38 + 1 | 0;\n        const bi$$2 = bi$$1 + enc$$1.bigL | 0;\n        $i$$38$$154 = i$$39;\n        $bi$$1$$155 = bi$$2;\n        continue encoder;\n      }\n\n      break;\n    }\n  };\n\n  encoder(0, 0);\n  return poly;\n}\nexport function BigNatModule$$$decodeResultBits(enc$$2, poly$$1) {\n  let n$$29 = 0;\n\n  for (let i$$40 = 0; i$$40 <= poly$$1.length - 1; i$$40++) {\n    if (poly$$1[i$$40] !== BigNatModule$002EFFT$$$mzero) {\n      n$$29 = i$$40;\n    }\n  }\n\n  const rbits = BigNatModule$002EFFT$$$maxBitsInsideFp + enc$$2.bigL * n$$29 + 1 | 0;\n  return rbits + 1 | 0;\n}\nexport function BigNatModule$$$decodePoly(enc$$3, poly$$2) {\n  const rbound$$5 = ~~(BigNatModule$$$decodeResultBits(enc$$3, poly$$2) / BigNatModule$$$baseBits) + 1 | 0;\n  const r$$15 = BigNatModule$$$createN(rbound$$5);\n\n  const evaluate = function evaluate($i$$41$$160, $j$$2$$161, $d$$3$$162) {\n    evaluate: while (true) {\n      const i$$41 = $i$$41$$160,\n            j$$2 = $j$$2$$161,\n            d$$3 = $d$$3$$162;\n\n      if (i$$41 === enc$$3.bigK) {} else {\n        if (j$$2 >= rbound$$5) {} else {\n          const x$$54 = op_Multiply(fromInteger(BigNatModule$002EFFT$002EFp$$$toInt(poly$$2[i$$41]), false, 2), BigNatModule$$$twopowersI64[d$$3]);\n          BigNatModule$$$contributeArr(r$$15.digits, j$$2, x$$54);\n        }\n\n        const i$$43 = i$$41 + 1 | 0;\n        const d$$4 = d$$3 + enc$$3.bigL | 0;\n        const patternInput$$1 = d$$4 >= BigNatModule$$$baseBits ? [j$$2 + 1, d$$4 - BigNatModule$$$baseBits] : [j$$2, d$$4];\n        $i$$41$$160 = i$$43;\n        $j$$2$$161 = patternInput$$1[0];\n        $d$$3$$162 = patternInput$$1[1];\n        continue evaluate;\n      }\n\n      break;\n    }\n  };\n\n  evaluate(0, 0, 0);\n  return BigNatModule$$$normN(r$$15);\n}\nexport function BigNatModule$$$quickMulUsingFft(u$$7, v$$5) {\n  const bitsRes$$1 = BigNatModule$$$bits(u$$7) + BigNatModule$$$bits(v$$5) | 0;\n  const enc$$4 = BigNatModule$$$encodingGivenResultBits(bitsRes$$1);\n  const upoly = BigNatModule$$$encodePoly(enc$$4, u$$7);\n  const vpoly = BigNatModule$$$encodePoly(enc$$4, v$$5);\n  const rpoly = BigNatModule$002EFFT$$$computeFftPaddedPolynomialProduct(enc$$4.bigK, enc$$4.k, upoly, vpoly);\n  const r$$17 = BigNatModule$$$decodePoly(enc$$4, rpoly);\n  return BigNatModule$$$normN(r$$17);\n}\nexport const BigNatModule$$$minDigitsKaratsuba = 16;\nexport function BigNatModule$$$recMulKaratsuba(mul, p$$19, q$$16) {\n  const bp$$1 = p$$19.bound | 0;\n  const bq = q$$16.bound | 0;\n  const bmax = BigNatModule$$$maxInt(bp$$1, bq) | 0;\n\n  if (bmax > BigNatModule$$$minDigitsKaratsuba) {\n    const k$$9 = ~~(bmax / 2) | 0;\n    const a0 = BigNatModule$$$restrictTo(k$$9, p$$19);\n    const a1 = BigNatModule$$$shiftDown(k$$9, p$$19);\n    const b0 = BigNatModule$$$restrictTo(k$$9, q$$16);\n    const b1 = BigNatModule$$$shiftDown(k$$9, q$$16);\n    const q0 = mul(a0, b0);\n    const q1 = mul(BigNatModule$$$add(a0, a1), BigNatModule$$$add(b0, b1));\n    const q2 = mul(a1, b1);\n    const p1 = BigNatModule$$$sub(q1, BigNatModule$$$add(q0, q2));\n    const r$$18 = BigNatModule$$$add(q0, BigNatModule$$$shiftUp(k$$9, BigNatModule$$$add(p1, BigNatModule$$$shiftUp(k$$9, q2))));\n    return r$$18;\n  } else {\n    return BigNatModule$$$mulSchoolBook(p$$19, q$$16);\n  }\n}\nexport function BigNatModule$$$mulKaratsuba(x$$55, y$$19) {\n  return BigNatModule$$$recMulKaratsuba(BigNatModule$$$mulKaratsuba, x$$55, y$$19);\n}\nexport const BigNatModule$$$productDigitsUpperSchoolBook = ~~(64000 / BigNatModule$$$baseBits);\nexport const BigNatModule$$$singleDigitForceSchoolBook = ~~(32000 / BigNatModule$$$baseBits);\nexport const BigNatModule$$$productDigitsUpperFft = ~~(BigNatModule$$$table[0].bigN / BigNatModule$$$baseBits);\nexport function BigNatModule$$$mul(p$$20, q$$17) {\n  return BigNatModule$$$mulSchoolBook(p$$20, q$$17);\n}\nexport function BigNatModule$$$scaleSubInPlace(x$$57, f, a$$5, n$$30) {\n  const patternInput$$2 = [x$$57.digits, BigNatModule$$$degree(x$$57)];\n  const patternInput$$3 = [a$$5.digits, BigNatModule$$$degree(a$$5)];\n  const f$$1 = fromInteger(f, false, 2);\n  let j$$4 = 0;\n  let z$$7 = op_Multiply(f$$1, fromInteger(patternInput$$3[0][0], false, 2));\n\n  while (compare(z$$7, fromBits(0, 0, false)) > 0 ? true : j$$4 < patternInput$$3[1]) {\n    if (j$$4 > patternInput$$2[1]) {\n      throw new Error(\"scaleSubInPlace: pre-condition did not apply, result would be -ve\");\n    }\n\n    const tupledArg = [z$$7, j$$4, n$$30];\n    let zLo;\n    let value$$6;\n    const x$$59 = z$$7;\n    const value$$5 = op_BitwiseAnd(x$$59, BigNatModule$$$baseMaski64);\n    value$$6 = ~~toInt(value$$5);\n    zLo = value$$6;\n    let zHi;\n    const x$$60 = z$$7;\n    zHi = op_Division(x$$60, BigNatModule$$$baseNi64);\n\n    if (zLo <= patternInput$$2[0][j$$4 + n$$30]) {\n      patternInput$$2[0][j$$4 + n$$30] = patternInput$$2[0][j$$4 + n$$30] - zLo;\n    } else {\n      patternInput$$2[0][j$$4 + n$$30] = patternInput$$2[0][j$$4 + n$$30] + (BigNatModule$$$baseN - zLo);\n      zHi = op_Addition(zHi, fromBits(1, 0, false));\n    }\n\n    if (j$$4 < patternInput$$3[1]) {\n      z$$7 = op_Addition(zHi, op_Multiply(f$$1, fromInteger(patternInput$$3[0][j$$4 + 1], false, 2)));\n    } else {\n      z$$7 = zHi;\n    }\n\n    j$$4 = j$$4 + 1;\n  }\n\n  BigNatModule$$$normN(x$$57), null;\n}\nexport function BigNatModule$$$scaleSub(x$$61, f$$2, a$$7, n$$31) {\n  const freshx = BigNatModule$$$add(x$$61, BigNatModule$$$zero);\n  BigNatModule$$$scaleSubInPlace(freshx, f$$2, a$$7, n$$31);\n  return BigNatModule$$$normN(freshx);\n}\nexport function BigNatModule$$$scaleAddInPlace(x$$62, f$$3, a$$8, n$$32) {\n  const patternInput$$4 = [x$$62.digits, BigNatModule$$$degree(x$$62)];\n  const patternInput$$5 = [a$$8.digits, BigNatModule$$$degree(a$$8)];\n  const f$$4 = fromInteger(f$$3, false, 2);\n  let j$$5 = 0;\n  let z$$8 = op_Multiply(f$$4, fromInteger(patternInput$$5[0][0], false, 2));\n\n  while (compare(z$$8, fromBits(0, 0, false)) > 0 ? true : j$$5 < patternInput$$5[1]) {\n    if (j$$5 > patternInput$$4[1]) {\n      throw new Error(\"scaleSubInPlace: pre-condition did not apply, result would be -ve\");\n    }\n\n    const tupledArg$$1 = [z$$8, j$$5, n$$32];\n    let zLo$$1;\n    let value$$8;\n    const x$$64 = z$$8;\n    const value$$7 = op_BitwiseAnd(x$$64, BigNatModule$$$baseMaski64);\n    value$$8 = ~~toInt(value$$7);\n    zLo$$1 = value$$8;\n    let zHi$$1;\n    const x$$65 = z$$8;\n    zHi$$1 = op_Division(x$$65, BigNatModule$$$baseNi64);\n\n    if (zLo$$1 < BigNatModule$$$baseN - patternInput$$4[0][j$$5 + n$$32]) {\n      patternInput$$4[0][j$$5 + n$$32] = patternInput$$4[0][j$$5 + n$$32] + zLo$$1;\n    } else {\n      patternInput$$4[0][j$$5 + n$$32] = zLo$$1 - (BigNatModule$$$baseN - patternInput$$4[0][j$$5 + n$$32]);\n      zHi$$1 = op_Addition(zHi$$1, fromBits(1, 0, false));\n    }\n\n    if (j$$5 < patternInput$$5[1]) {\n      z$$8 = op_Addition(zHi$$1, op_Multiply(f$$4, fromInteger(patternInput$$5[0][j$$5 + 1], false, 2)));\n    } else {\n      z$$8 = zHi$$1;\n    }\n\n    j$$5 = j$$5 + 1;\n  }\n\n  BigNatModule$$$normN(x$$62), null;\n}\nexport function BigNatModule$$$scaleAdd(x$$66, f$$5, a$$10, n$$33) {\n  const freshx$$1 = BigNatModule$$$add(x$$66, BigNatModule$$$zero);\n  BigNatModule$$$scaleAddInPlace(freshx$$1, f$$5, a$$10, n$$33);\n  return BigNatModule$$$normN(freshx$$1);\n}\nexport function BigNatModule$$$removeFactor(x$$67, a$$11, n$$34) {\n  const patternInput$$6 = [BigNatModule$$$degree(a$$11), BigNatModule$$$degree(x$$67)];\n\n  if (patternInput$$6[1] < patternInput$$6[0] + n$$34) {\n    return 0;\n  } else {\n    let f$$6;\n\n    if (patternInput$$6[0] === 0) {\n      if (patternInput$$6[1] === n$$34) {\n        f$$6 = ~~(x$$67.digits[n$$34] / a$$11.digits[0]);\n      } else {\n        const f64 = op_Division(op_Addition(op_Multiply(fromInteger(x$$67.digits[patternInput$$6[1]], false, 2), BigNatModule$$$baseNi64), fromInteger(x$$67.digits[patternInput$$6[1] - 1], false, 2)), fromInteger(a$$11.digits[0], false, 2));\n        f$$6 = ~~toInt(f64);\n      }\n    } else if (patternInput$$6[1] === patternInput$$6[0] + n$$34) {\n      f$$6 = ~~(x$$67.digits[patternInput$$6[1]] / (a$$11.digits[patternInput$$6[0]] + 1));\n    } else {\n      const f64$$1 = op_Division(op_Addition(op_Multiply(fromInteger(x$$67.digits[patternInput$$6[1]], false, 2), BigNatModule$$$baseNi64), fromInteger(x$$67.digits[patternInput$$6[1] - 1], false, 2)), op_Addition(fromInteger(a$$11.digits[patternInput$$6[0]], false, 2), fromBits(1, 0, false)));\n      f$$6 = ~~toInt(f64$$1);\n    }\n\n    if (f$$6 === 0) {\n      const lte = BigNatModule$$$shiftCompare(a$$11, n$$34, x$$67, 0) !== 1;\n\n      if (lte) {\n        return 1;\n      } else {\n        return 0;\n      }\n    } else {\n      return f$$6 | 0;\n    }\n  }\n}\nexport function BigNatModule$$$divmod(b$$7, a$$12) {\n  if (BigNatModule$$$isZero(a$$12)) {\n    throw new Error();\n  } else if (BigNatModule$$$degree(b$$7) < BigNatModule$$$degree(a$$12)) {\n    return [BigNatModule$$$zero, b$$7];\n  } else {\n    const x$$68 = BigNatModule$$$copyN(b$$7);\n    const d$$6 = BigNatModule$$$createN(BigNatModule$$$degree(b$$7) - BigNatModule$$$degree(a$$12) + 1 + 1);\n    let p$$21 = BigNatModule$$$degree(b$$7) | 0;\n    const m$$2 = BigNatModule$$$degree(a$$12) | 0;\n    let n$$35 = p$$21 - m$$2 | 0;\n\n    const Invariant = function Invariant(tupledArg$$2) {};\n\n    let finished = false;\n\n    while (!finished) {\n      Invariant([d$$6, x$$68, n$$35, p$$21]);\n      const f$$7 = BigNatModule$$$removeFactor(x$$68, a$$12, n$$35) | 0;\n\n      if (f$$7 > 0) {\n        BigNatModule$$$scaleSubInPlace(x$$68, f$$7, a$$12, n$$35);\n        BigNatModule$$$scaleAddInPlace(d$$6, f$$7, BigNatModule$$$one, n$$35);\n        Invariant([d$$6, x$$68, n$$35, p$$21]);\n      } else {\n        finished = f$$7 === 0 ? n$$35 === 0 : false;\n\n        if (!finished) {\n          if (p$$21 === m$$2 + n$$35) {\n            Invariant([d$$6, x$$68, n$$35 - 1, p$$21]);\n            n$$35 = n$$35 - 1;\n          } else {\n            Invariant([d$$6, x$$68, n$$35 - 1, p$$21 - 1]);\n            n$$35 = n$$35 - 1;\n            p$$21 = p$$21 - 1;\n          }\n        }\n      }\n    }\n\n    return [BigNatModule$$$normN(d$$6), BigNatModule$$$normN(x$$68)];\n  }\n}\nexport function BigNatModule$$$div(b$$8, a$$13) {\n  return BigNatModule$$$divmod(b$$8, a$$13)[0];\n}\nexport function BigNatModule$$$rem(b$$9, a$$14) {\n  return BigNatModule$$$divmod(b$$9, a$$14)[1];\n}\nexport function BigNatModule$$$bitAnd(a$$15, b$$10) {\n  const rbound$$6 = BigNatModule$$$minInt(a$$15.bound, b$$10.bound) | 0;\n  const r$$19 = BigNatModule$$$createN(rbound$$6);\n\n  for (let i$$44 = 0; i$$44 <= r$$19.bound - 1; i$$44++) {\n    r$$19.digits[i$$44] = a$$15.digits[i$$44] & b$$10.digits[i$$44];\n  }\n\n  return BigNatModule$$$normN(r$$19);\n}\nexport function BigNatModule$$$bitOr(a$$16, b$$11) {\n  const rbound$$7 = BigNatModule$$$maxInt(a$$16.bound, b$$11.bound) | 0;\n  const r$$20 = BigNatModule$$$createN(rbound$$7);\n\n  for (let i$$45 = 0; i$$45 <= a$$16.bound - 1; i$$45++) {\n    r$$20.digits[i$$45] = r$$20.digits[i$$45] | a$$16.digits[i$$45];\n  }\n\n  for (let i$$46 = 0; i$$46 <= b$$11.bound - 1; i$$46++) {\n    r$$20.digits[i$$46] = r$$20.digits[i$$46] | b$$11.digits[i$$46];\n  }\n\n  return BigNatModule$$$normN(r$$20);\n}\nexport function BigNatModule$$$bitXor(a$$17, b$$12) {\n  const rbound$$8 = BigNatModule$$$maxInt(a$$17.bound, b$$12.bound) | 0;\n  const r$$21 = BigNatModule$$$createN(rbound$$8);\n\n  for (let i$$47 = 0; i$$47 <= a$$17.bound - 1; i$$47++) {\n    r$$21.digits[i$$47] = r$$21.digits[i$$47] ^ a$$17.digits[i$$47];\n  }\n\n  for (let i$$48 = 0; i$$48 <= b$$12.bound - 1; i$$48++) {\n    r$$21.digits[i$$48] = r$$21.digits[i$$48] ^ b$$12.digits[i$$48];\n  }\n\n  return BigNatModule$$$normN(r$$21);\n}\nexport function BigNatModule$$$hcf(a$$18, b$$13) {\n  const hcfloop = function hcfloop($a$$19$$206, $b$$14$$207) {\n    hcfloop: while (true) {\n      const a$$19 = $a$$19$$206,\n            b$$14 = $b$$14$$207;\n\n      if (BigNatModule$$$equal(BigNatModule$$$zero, a$$19)) {\n        return b$$14;\n      } else {\n        const patternInput$$8 = BigNatModule$$$divmod(b$$14, a$$19);\n        $a$$19$$206 = patternInput$$8[1];\n        $b$$14$$207 = a$$19;\n        continue hcfloop;\n      }\n\n      break;\n    }\n  };\n\n  if (BigNatModule$$$lt(a$$18, b$$13)) {\n    return hcfloop(a$$18, b$$13);\n  } else {\n    return hcfloop(b$$13, a$$18);\n  }\n}\nexport const BigNatModule$$$two = BigNatModule$$$embed(2);\nexport function BigNatModule$$$powi(x$$69, n$$36) {\n  const power = function power($acc$$2$$210, $x$$70$$211, $n$$37$$212) {\n    power: while (true) {\n      const acc$$2 = $acc$$2$$210,\n            x$$70 = $x$$70$$211,\n            n$$37 = $n$$37$$212;\n\n      if (n$$37 === 0) {\n        return acc$$2;\n      } else if (n$$37 % 2 === 0) {\n        $acc$$2$$210 = acc$$2;\n        $x$$70$$211 = BigNatModule$$$mul(x$$70, x$$70);\n        $n$$37$$212 = ~~(n$$37 / 2);\n        continue power;\n      } else {\n        $acc$$2$$210 = BigNatModule$$$mul(x$$70, acc$$2);\n        $x$$70$$211 = BigNatModule$$$mul(x$$70, x$$70);\n        $n$$37$$212 = ~~(n$$37 / 2);\n        continue power;\n      }\n\n      break;\n    }\n  };\n\n  return power(BigNatModule$$$one, x$$69, n$$36);\n}\nexport function BigNatModule$$$pow(x$$71, n$$38) {\n  const power$$1 = function power$$1($acc$$3$$215, $x$$72$$216, $n$$39$$217) {\n    power$$1: while (true) {\n      const acc$$3 = $acc$$3$$215,\n            x$$72 = $x$$72$$216,\n            n$$39 = $n$$39$$217;\n\n      if (BigNatModule$$$isZero(n$$39)) {\n        return acc$$3;\n      } else {\n        const patternInput$$9 = BigNatModule$$$divmod(n$$39, BigNatModule$$$two);\n\n        if (BigNatModule$$$isZero(patternInput$$9[1])) {\n          $acc$$3$$215 = acc$$3;\n          $x$$72$$216 = BigNatModule$$$mul(x$$72, x$$72);\n          $n$$39$$217 = patternInput$$9[0];\n          continue power$$1;\n        } else {\n          $acc$$3$$215 = BigNatModule$$$mul(x$$72, acc$$3);\n          $x$$72$$216 = BigNatModule$$$mul(x$$72, x$$72);\n          $n$$39$$217 = patternInput$$9[0];\n          continue power$$1;\n        }\n      }\n\n      break;\n    }\n  };\n\n  return power$$1(BigNatModule$$$one, x$$71, n$$38);\n}\nexport function BigNatModule$$$toFloat(n$$40) {\n  const basef = BigNatModule$$$baseN;\n\n  const evalFloat = function evalFloat($acc$$4$$219, $k$$10$$220, $i$$49$$221) {\n    evalFloat: while (true) {\n      const acc$$4 = $acc$$4$$219,\n            k$$10 = $k$$10$$220,\n            i$$49 = $i$$49$$221;\n\n      if (i$$49 === n$$40.bound) {\n        return acc$$4;\n      } else {\n        $acc$$4$$219 = acc$$4 + k$$10 * n$$40.digits[i$$49];\n        $k$$10$$220 = k$$10 * basef;\n        $i$$49$$221 = i$$49 + 1;\n        continue evalFloat;\n      }\n\n      break;\n    }\n  };\n\n  return evalFloat(0, 1, 0);\n}\nexport function BigNatModule$$$ofInt32(n$$41) {\n  return BigNatModule$$$embed(n$$41);\n}\nexport function BigNatModule$$$ofInt64(n$$42) {\n  return BigNatModule$$$embed64(n$$42);\n}\nexport function BigNatModule$$$toUInt32(n$$43) {\n  const matchValue = n$$43.bound | 0;\n\n  switch (matchValue) {\n    case 0:\n      {\n        return 0;\n      }\n\n    case 1:\n      {\n        const value$$9 = n$$43.digits[0] | 0;\n        return value$$9 >>> 0;\n      }\n\n    case 2:\n      {\n        const patternInput$$10 = [n$$43.digits[0], n$$43.digits[1]];\n\n        if (patternInput$$10[1] > BigNatModule$$$baseMask32B) {\n          throw new Error();\n        }\n\n        return ((patternInput$$10[0] & BigNatModule$$$baseMask32A) >>> 0) + ((patternInput$$10[1] & BigNatModule$$$baseMask32B) >>> 0 << BigNatModule$$$baseShift32B >>> 0);\n      }\n\n    default:\n      {\n        throw new Error();\n      }\n  }\n}\nexport function BigNatModule$$$toUInt64(n$$44) {\n  const matchValue$$1 = n$$44.bound | 0;\n\n  switch (matchValue$$1) {\n    case 0:\n      {\n        return fromBits(0, 0, true);\n      }\n\n    case 1:\n      {\n        const value$$10 = n$$44.digits[0] | 0;\n        return fromInteger(value$$10, true, 2);\n      }\n\n    case 2:\n      {\n        const patternInput$$11 = [n$$44.digits[0], n$$44.digits[1]];\n        return op_Addition(fromInteger(patternInput$$11[0] & BigNatModule$$$baseMask64A, true, 2), op_LeftShift(fromInteger(patternInput$$11[1] & BigNatModule$$$baseMask64B, true, 2), BigNatModule$$$baseShift64B));\n      }\n\n    case 3:\n      {\n        const patternInput$$12 = [n$$44.digits[0], n$$44.digits[1], n$$44.digits[2]];\n\n        if (patternInput$$12[2] > BigNatModule$$$baseMask64C) {\n          throw new Error();\n        }\n\n        return op_Addition(op_Addition(fromInteger(patternInput$$12[0] & BigNatModule$$$baseMask64A, true, 2), op_LeftShift(fromInteger(patternInput$$12[1] & BigNatModule$$$baseMask64B, true, 2), BigNatModule$$$baseShift64B)), op_LeftShift(fromInteger(patternInput$$12[2] & BigNatModule$$$baseMask64C, true, 2), BigNatModule$$$baseShift64C));\n      }\n\n    default:\n      {\n        throw new Error();\n      }\n  }\n}\nexport function BigNatModule$$$toString(n$$45) {\n  const degn = BigNatModule$$$degree(n$$45) | 0;\n\n  const route = function route($prior$$227, $k$$11$$228, $ten2k$$229) {\n    route: while (true) {\n      const prior = $prior$$227,\n            k$$11 = $k$$11$$228,\n            ten2k = $ten2k$$229;\n\n      if (BigNatModule$$$degree(ten2k) > degn) {\n        return new List([k$$11, ten2k], prior);\n      } else {\n        $prior$$227 = new List([k$$11, ten2k], prior);\n        $k$$11$$228 = k$$11 + 1;\n        $ten2k$$229 = BigNatModule$$$mul(ten2k, ten2k);\n        continue route;\n      }\n\n      break;\n    }\n  };\n\n  const kten2ks = route(new List(), 0, BigNatModule$$$embed(10));\n\n  const collect = function collect(isLeading, digits, n$$46, _arg1$$3) {\n    if (_arg1$$3.tail != null) {\n      const patternInput$$13 = BigNatModule$$$divmod(n$$46, _arg1$$3.head[1]);\n\n      if (isLeading ? BigNatModule$$$isZero(patternInput$$13[0]) : false) {\n        const digits$$1 = collect(isLeading, digits, patternInput$$13[1], _arg1$$3.tail);\n        return digits$$1;\n      } else {\n        const digits$$2 = collect(false, digits, patternInput$$13[1], _arg1$$3.tail);\n        const digits$$3 = collect(isLeading, digits$$2, patternInput$$13[0], _arg1$$3.tail);\n        return digits$$3;\n      }\n    } else {\n      const n$$47 = BigNatModule$$$eval32(n$$46) | 0;\n\n      if (isLeading ? n$$47 === 0 : false) {\n        return digits;\n      } else {\n        return new List(int32ToString(n$$47), digits);\n      }\n    }\n  };\n\n  const digits$$4 = collect(true, new List(), n$$45, kten2ks);\n\n  if (digits$$4.tail == null) {\n    return \"0\";\n  } else {\n    let arg00;\n    arg00 = ofList(digits$$4, Array);\n    return join(\"\", arg00);\n  }\n}\nexport function BigNatModule$$$ofString(str) {\n  const len = str.length | 0;\n\n  if (isNullOrEmpty(str)) {\n    throw new Error(\"empty string\\\\nParameter name: str\");\n  }\n\n  const ten = BigNatModule$$$embed(10);\n\n  const build = function build($acc$$5$$235, $i$$50$$236) {\n    build: while (true) {\n      const acc$$5 = $acc$$5$$235,\n            i$$50 = $i$$50$$236;\n\n      if (i$$50 === len) {\n        return acc$$5;\n      } else {\n        const c$$12 = str[i$$50];\n        const d$$7 = c$$12.charCodeAt(0) - \"0\".charCodeAt(0) | 0;\n\n        if (0 <= d$$7 ? d$$7 <= 9 : false) {\n          $acc$$5$$235 = BigNatModule$$$add(BigNatModule$$$mul(ten, acc$$5), BigNatModule$$$embed(d$$7));\n          $i$$50$$236 = i$$50 + 1;\n          continue build;\n        } else {\n          throw new Error();\n        }\n      }\n\n      break;\n    }\n  };\n\n  return build(BigNatModule$$$embed(0), 0);\n}\nexport function BigNatModule$$$isSmall(n$$48) {\n  return n$$48.bound <= 1;\n}\nexport function BigNatModule$$$getSmall(n$$49) {\n  if (0 < n$$49.bound) {\n    return n$$49.digits[0] | 0;\n  } else {\n    return 0;\n  }\n}\nexport function BigNatModule$$$factorial(n$$50) {\n  const productR = function productR(a$$20, b$$15) {\n    if (BigNatModule$$$equal(a$$20, b$$15)) {\n      return a$$20;\n    } else {\n      const m$$3 = BigNatModule$$$div(BigNatModule$$$add(a$$20, b$$15), BigNatModule$$$ofInt32(2));\n      return BigNatModule$$$mul(productR(a$$20, m$$3), productR(BigNatModule$$$add(m$$3, BigNatModule$$$one), b$$15));\n    }\n  };\n\n  return productR(BigNatModule$$$one, n$$50);\n}","import { declare, Record } from \"../Types.js\";\nimport { type } from \"../Reflection.js\";\nimport { BigNatModule$$$factorial as BigNatModule$0024$0024$0024factorial, BigNatModule$$$ofString as BigNatModule$0024$0024$0024ofString, BigNatModule$$$toFloat as BigNatModule$0024$0024$0024toFloat, BigNatModule$$$toUInt64 as BigNatModule$0024$0024$0024toUInt64, BigNatModule$$$toUInt32 as BigNatModule$0024$0024$0024toUInt32, BigNatModule$$$pow as BigNatModule$0024$0024$0024pow, BigNatModule$$$rem as BigNatModule$0024$0024$0024rem, BigNatModule$$$two as BigNatModule$0024$0024$0024two, BigNatModule$$$lte as BigNatModule$0024$0024$0024lte, BigNatModule$$$hcf as BigNatModule$0024$0024$0024hcf, BigNatModule$$$bitXor as BigNatModule$0024$0024$0024bitXor, BigNatModule$$$bitOr as BigNatModule$0024$0024$0024bitOr, BigNatModule$$$bitAnd as BigNatModule$0024$0024$0024bitAnd, BigNatModule$$$divmod as BigNatModule$0024$0024$0024divmod, BigNatModule$$$mul as BigNatModule$0024$0024$0024mul, BigNatModule$$$isOne as BigNatModule$0024$0024$0024isOne, BigNatModule$$$sub as BigNatModule$0024$0024$0024sub, BigNatModule$$$gte as BigNatModule$0024$0024$0024gte, BigNatModule$$$scale as BigNatModule$0024$0024$0024scale, BigNatModule$$$add as BigNatModule$0024$0024$0024add, BigNatModule$$$one as BigNatModule$0024$0024$0024one, BigNatModule$$$ofInt64 as BigNatModule$0024$0024$0024ofInt64, BigNatModule$$$toString as BigNatModule$0024$0024$0024toString, BigNatModule$$$hash as BigNatModule$0024$0024$0024hash, BigNatModule$$$gt as BigNatModule$0024$0024$0024gt, BigNatModule$$$lt as BigNatModule$0024$0024$0024lt, BigNatModule$$$isZero as BigNatModule$0024$0024$0024isZero, BigNatModule$$$equal as BigNatModule$0024$0024$0024equal, BigNatModule$$$getSmall as BigNatModule$0024$0024$0024getSmall, BigNatModule$$$isSmall as BigNatModule$0024$0024$0024isSmall, BigNatModule$$$ofInt32 as BigNatModule$0024$0024$0024ofInt32 } from \"./n\";\nimport { initialize } from \"../Array.js\";\nimport { op_Addition, op_Multiply, fromValue, equals, compare, fromBits, op_UnaryNegation, fromInteger } from \"../Long.js\";\nimport { op_UnaryNegation_Int32 } from \"../Int32.js\";\nimport Decimal from \"../Decimal.js\";\nexport const BigInteger = declare(function BigInt_BigInteger(signInt, v) {\n  const $this$$1 = this;\n  $this$$1.signInt = signInt;\n  $this$$1.v = v;\n}, Record);\nexport function BigInteger$reflection() {\n  return type(\"BigInt.BigInteger\");\n}\nexport function BigInteger$$$$002Ector$$Z2BE94A1(signInt, v) {\n  return this instanceof BigInteger ? BigInteger.call(this, signInt, v) : new BigInteger(signInt, v);\n}\n\n(function BigInteger$$$$002Ecctor() {\n  BigInteger.smallLim = 4096;\n  BigInteger.smallPosTab = initialize(BigInteger.smallLim, BigNatModule$0024$0024$0024ofInt32, Array);\n  BigInteger.one = BigInteger$$$$002Ector$$Z524259A4(1);\n  BigInteger.two = BigInteger$$$$002Ector$$Z524259A4(2);\n  BigInteger.zero = BigInteger$$$$002Ector$$Z524259A4(0);\n})();\n\nexport function BigInteger$$$nat$$Z67CCE57D(n$$1) {\n  if (BigNatModule$0024$0024$0024isSmall(n$$1) ? BigNatModule$0024$0024$0024getSmall(n$$1) < BigInteger.smallLim : false) {\n    return BigInteger.smallPosTab[BigNatModule$0024$0024$0024getSmall(n$$1)];\n  } else {\n    return n$$1;\n  }\n}\nexport function BigInteger$$$create$$Z2BE94A1(s, n$$2) {\n  return BigInteger$$$$002Ector$$Z2BE94A1(s, BigInteger$$$nat$$Z67CCE57D(n$$2));\n}\nexport function BigInteger$$$posn$$Z67CCE57D(n$$3) {\n  return BigInteger$$$$002Ector$$Z2BE94A1(1, BigInteger$$$nat$$Z67CCE57D(n$$3));\n}\nexport function BigInteger$$$negn$$Z67CCE57D(n$$4) {\n  return BigInteger$$$$002Ector$$Z2BE94A1(-1, BigInteger$$$nat$$Z67CCE57D(n$$4));\n}\nexport function BigInteger$$get_Sign(x) {\n  if (BigInteger$$get_IsZero(x)) {\n    return 0;\n  } else {\n    return x.signInt | 0;\n  }\n}\nexport function BigInteger$$get_SignInt(x$$1) {\n  return x$$1.signInt;\n}\nexport function BigInteger$$get_V(x$$2) {\n  return x$$2.v;\n}\nexport function BigInteger$$$op_Equality$$56F059C0(x$$3, y) {\n  const matchValue = [BigInteger$$get_SignInt(x$$3), BigInteger$$get_SignInt(y)];\n  var $target$$12;\n\n  if (matchValue[0] === -1) {\n    if (matchValue[1] === -1) {\n      $target$$12 = 1;\n    } else if (matchValue[1] === 0) {\n      $target$$12 = 8;\n    } else if (matchValue[1] === 1) {\n      $target$$12 = 3;\n    } else {\n      $target$$12 = 9;\n    }\n  } else if (matchValue[0] === 0) {\n    if (matchValue[1] === -1) {\n      $target$$12 = 6;\n    } else if (matchValue[1] === 0) {\n      $target$$12 = 4;\n    } else if (matchValue[1] === 1) {\n      $target$$12 = 5;\n    } else {\n      $target$$12 = 9;\n    }\n  } else if (matchValue[0] === 1) {\n    if (matchValue[1] === -1) {\n      $target$$12 = 2;\n    } else if (matchValue[1] === 0) {\n      $target$$12 = 7;\n    } else if (matchValue[1] === 1) {\n      $target$$12 = 0;\n    } else {\n      $target$$12 = 9;\n    }\n  } else {\n    $target$$12 = 9;\n  }\n\n  switch ($target$$12) {\n    case 0:\n      {\n        return BigNatModule$0024$0024$0024equal(BigInteger$$get_V(x$$3), BigInteger$$get_V(y));\n      }\n\n    case 1:\n      {\n        return BigNatModule$0024$0024$0024equal(BigInteger$$get_V(x$$3), BigInteger$$get_V(y));\n      }\n\n    case 2:\n      {\n        if (BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$3))) {\n          return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y));\n        } else {\n          return false;\n        }\n      }\n\n    case 3:\n      {\n        if (BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$3))) {\n          return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y));\n        } else {\n          return false;\n        }\n      }\n\n    case 4:\n      {\n        return true;\n      }\n\n    case 5:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y));\n      }\n\n    case 6:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y));\n      }\n\n    case 7:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$3));\n      }\n\n    case 8:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$3));\n      }\n\n    case 9:\n      {\n        throw new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\");\n      }\n  }\n}\nexport function BigInteger$$$op_Inequality$$56F059C0(x$$4, y$$1) {\n  return !BigInteger$$$op_Equality$$56F059C0(x$$4, y$$1);\n}\nexport function BigInteger$$$op_LessThan$$56F059C0(x$$5, y$$2) {\n  const matchValue$$1 = [BigInteger$$get_SignInt(x$$5), BigInteger$$get_SignInt(y$$2)];\n  var $target$$17;\n\n  if (matchValue$$1[0] === -1) {\n    if (matchValue$$1[1] === -1) {\n      $target$$17 = 1;\n    } else if (matchValue$$1[1] === 0) {\n      $target$$17 = 8;\n    } else if (matchValue$$1[1] === 1) {\n      $target$$17 = 3;\n    } else {\n      $target$$17 = 9;\n    }\n  } else if (matchValue$$1[0] === 0) {\n    if (matchValue$$1[1] === -1) {\n      $target$$17 = 6;\n    } else if (matchValue$$1[1] === 0) {\n      $target$$17 = 4;\n    } else if (matchValue$$1[1] === 1) {\n      $target$$17 = 5;\n    } else {\n      $target$$17 = 9;\n    }\n  } else if (matchValue$$1[0] === 1) {\n    if (matchValue$$1[1] === -1) {\n      $target$$17 = 2;\n    } else if (matchValue$$1[1] === 0) {\n      $target$$17 = 7;\n    } else if (matchValue$$1[1] === 1) {\n      $target$$17 = 0;\n    } else {\n      $target$$17 = 9;\n    }\n  } else {\n    $target$$17 = 9;\n  }\n\n  switch ($target$$17) {\n    case 0:\n      {\n        return BigNatModule$0024$0024$0024lt(BigInteger$$get_V(x$$5), BigInteger$$get_V(y$$2));\n      }\n\n    case 1:\n      {\n        return BigNatModule$0024$0024$0024lt(BigInteger$$get_V(y$$2), BigInteger$$get_V(x$$5));\n      }\n\n    case 2:\n      {\n        return false;\n      }\n\n    case 3:\n      {\n        if (!BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$5))) {\n          return true;\n        } else {\n          return !BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$2));\n        }\n      }\n\n    case 4:\n      {\n        return false;\n      }\n\n    case 5:\n      {\n        return !BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$2));\n      }\n\n    case 6:\n      {\n        return false;\n      }\n\n    case 7:\n      {\n        return false;\n      }\n\n    case 8:\n      {\n        return !BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$5));\n      }\n\n    case 9:\n      {\n        throw new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\");\n      }\n  }\n}\nexport function BigInteger$$$op_GreaterThan$$56F059C0(x$$6, y$$3) {\n  const matchValue$$2 = [BigInteger$$get_SignInt(x$$6), BigInteger$$get_SignInt(y$$3)];\n  var $target$$20;\n\n  if (matchValue$$2[0] === -1) {\n    if (matchValue$$2[1] === -1) {\n      $target$$20 = 1;\n    } else if (matchValue$$2[1] === 0) {\n      $target$$20 = 8;\n    } else if (matchValue$$2[1] === 1) {\n      $target$$20 = 3;\n    } else {\n      $target$$20 = 9;\n    }\n  } else if (matchValue$$2[0] === 0) {\n    if (matchValue$$2[1] === -1) {\n      $target$$20 = 6;\n    } else if (matchValue$$2[1] === 0) {\n      $target$$20 = 4;\n    } else if (matchValue$$2[1] === 1) {\n      $target$$20 = 5;\n    } else {\n      $target$$20 = 9;\n    }\n  } else if (matchValue$$2[0] === 1) {\n    if (matchValue$$2[1] === -1) {\n      $target$$20 = 2;\n    } else if (matchValue$$2[1] === 0) {\n      $target$$20 = 7;\n    } else if (matchValue$$2[1] === 1) {\n      $target$$20 = 0;\n    } else {\n      $target$$20 = 9;\n    }\n  } else {\n    $target$$20 = 9;\n  }\n\n  switch ($target$$20) {\n    case 0:\n      {\n        return BigNatModule$0024$0024$0024gt(BigInteger$$get_V(x$$6), BigInteger$$get_V(y$$3));\n      }\n\n    case 1:\n      {\n        return BigNatModule$0024$0024$0024gt(BigInteger$$get_V(y$$3), BigInteger$$get_V(x$$6));\n      }\n\n    case 2:\n      {\n        if (!BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$6))) {\n          return true;\n        } else {\n          return !BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$3));\n        }\n      }\n\n    case 3:\n      {\n        return false;\n      }\n\n    case 4:\n      {\n        return false;\n      }\n\n    case 5:\n      {\n        return false;\n      }\n\n    case 6:\n      {\n        return !BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$3));\n      }\n\n    case 7:\n      {\n        return !BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$6));\n      }\n\n    case 8:\n      {\n        return false;\n      }\n\n    case 9:\n      {\n        throw new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\");\n      }\n  }\n}\nexport function BigInteger$$$compare$$56F059C0(n$$5, nn) {\n  if (BigInteger$$$op_LessThan$$56F059C0(n$$5, nn)) {\n    return -1 | 0;\n  } else if (BigInteger$$$op_Equality$$56F059C0(n$$5, nn)) {\n    return 0;\n  } else {\n    return 1;\n  }\n}\nexport function BigInteger$$$hash$$Z665282C2(z) {\n  if (BigInteger$$get_SignInt(z) === 0) {\n    return 1;\n  } else {\n    return BigInteger$$get_SignInt(z) + BigNatModule$0024$0024$0024hash(BigInteger$$get_V(z)) | 0;\n  }\n}\n\nBigInteger.prototype.toString = function () {\n  const x$$7 = this;\n  const matchValue$$3 = BigInteger$$get_SignInt(x$$7) | 0;\n\n  switch (matchValue$$3) {\n    case -1:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$7)) ? \"0\" : \"-\" + BigNatModule$0024$0024$0024toString(BigInteger$$get_V(x$$7));\n      }\n\n    case 0:\n      {\n        return \"0\";\n      }\n\n    case 1:\n      {\n        return BigNatModule$0024$0024$0024toString(BigInteger$$get_V(x$$7));\n      }\n\n    default:\n      {\n        throw new Error(\"signs should be +/- 1 or 0\");\n      }\n  }\n};\n\nexport function BigInteger$$get_StructuredDisplayString(x$$8) {\n  return String(x$$8);\n}\n\nBigInteger.prototype.Equals = function (obj) {\n  const this$ = this;\n  return obj instanceof BigInteger ? BigInteger$$$op_Equality$$56F059C0(this$, obj) : false;\n};\n\nBigInteger.prototype.GetHashCode = function () {\n  const x$$9 = this;\n  return BigInteger$$$hash$$Z665282C2(x$$9) | 0;\n};\n\nexport function BigInteger$$$$002Ector$$Z524259A4(n$$6) {\n  if (n$$6 >= 0) {\n    return BigInteger$$$$002Ector$$Z2BE94A1.call(this, 1, BigInteger$$$nat$$Z67CCE57D(BigNatModule$0024$0024$0024ofInt32(n$$6)));\n  } else if (n$$6 === -2147483648) {\n    return BigInteger$$$$002Ector$$Z2BE94A1.call(this, -1, BigInteger$$$nat$$Z67CCE57D(BigNatModule$0024$0024$0024ofInt64(op_UnaryNegation(fromInteger(n$$6, false, 2)))));\n  } else {\n    return BigInteger$$$$002Ector$$Z2BE94A1.call(this, -1, BigInteger$$$nat$$Z67CCE57D(BigNatModule$0024$0024$0024ofInt32(op_UnaryNegation_Int32(n$$6))));\n  }\n}\nexport function BigInteger$$$$002Ector$$Z524259C1(n$$7) {\n  if (compare(n$$7, fromBits(0, 0, false)) >= 0) {\n    return BigInteger$$$$002Ector$$Z2BE94A1.call(this, 1, BigInteger$$$nat$$Z67CCE57D(BigNatModule$0024$0024$0024ofInt64(n$$7)));\n  } else if (equals(n$$7, fromBits(0, 2147483648, false))) {\n    return BigInteger$$$$002Ector$$Z2BE94A1.call(this, -1, BigInteger$$$nat$$Z67CCE57D(BigNatModule$0024$0024$0024add(BigNatModule$0024$0024$0024ofInt64(fromBits(4294967295, 2147483647, false)), BigNatModule$0024$0024$0024one)));\n  } else {\n    return BigInteger$$$$002Ector$$Z2BE94A1.call(this, -1, BigInteger$$$nat$$Z67CCE57D(BigNatModule$0024$0024$0024ofInt64(op_UnaryNegation(n$$7))));\n  }\n}\nexport function BigInteger$$$get_One() {\n  return BigInteger.one;\n}\nexport function BigInteger$$$get_Two() {\n  return BigInteger.two;\n}\nexport function BigInteger$$$get_Zero() {\n  return BigInteger.zero;\n}\nexport function BigInteger$$$op_UnaryNegation$$Z665282C2(z$$1) {\n  const matchValue$$4 = BigInteger$$get_SignInt(z$$1) | 0;\n\n  if (matchValue$$4 === 0) {\n    return BigInteger$$$get_Zero();\n  } else {\n    return BigInteger$$$create$$Z2BE94A1(op_UnaryNegation_Int32(matchValue$$4), BigInteger$$get_V(z$$1));\n  }\n}\nexport function BigInteger$$$Scale$$Z320F31E(k, z$$2) {\n  if (BigInteger$$get_SignInt(z$$2) === 0) {\n    return BigInteger$$$get_Zero();\n  } else if (k < 0) {\n    return BigInteger$$$create$$Z2BE94A1(op_UnaryNegation_Int32(BigInteger$$get_SignInt(z$$2)), BigNatModule$0024$0024$0024scale(op_UnaryNegation_Int32(k), BigInteger$$get_V(z$$2)));\n  } else {\n    return BigInteger$$$create$$Z2BE94A1(BigInteger$$get_SignInt(z$$2), BigNatModule$0024$0024$0024scale(k, BigInteger$$get_V(z$$2)));\n  }\n}\nexport function BigInteger$$$subnn$$6A57060(nx, ny) {\n  if (BigNatModule$0024$0024$0024gte(nx, ny)) {\n    return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024sub(nx, ny));\n  } else {\n    return BigInteger$$$negn$$Z67CCE57D(BigNatModule$0024$0024$0024sub(ny, nx));\n  }\n}\nexport function BigInteger$$$addnn$$6A57060(nx$$1, ny$$1) {\n  return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024add(nx$$1, ny$$1));\n}\nexport function BigInteger$$get_IsZero(x$$10) {\n  if (BigInteger$$get_SignInt(x$$10) === 0) {\n    return true;\n  } else {\n    return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$10));\n  }\n}\nexport function BigInteger$$get_IsOne(x$$11) {\n  if (BigInteger$$get_SignInt(x$$11) === 1) {\n    return BigNatModule$0024$0024$0024isOne(BigInteger$$get_V(x$$11));\n  } else {\n    return false;\n  }\n}\nexport function BigInteger$$$op_Addition$$56F059C0(x$$12, y$$4) {\n  if (BigInteger$$get_IsZero(y$$4)) {\n    return x$$12;\n  } else if (BigInteger$$get_IsZero(x$$12)) {\n    return y$$4;\n  } else {\n    const matchValue$$5 = [BigInteger$$get_SignInt(x$$12), BigInteger$$get_SignInt(y$$4)];\n    var $target$$38;\n\n    if (matchValue$$5[0] === -1) {\n      if (matchValue$$5[1] === -1) {\n        $target$$38 = 1;\n      } else if (matchValue$$5[1] === 1) {\n        $target$$38 = 3;\n      } else {\n        $target$$38 = 4;\n      }\n    } else if (matchValue$$5[0] === 1) {\n      if (matchValue$$5[1] === -1) {\n        $target$$38 = 2;\n      } else if (matchValue$$5[1] === 1) {\n        $target$$38 = 0;\n      } else {\n        $target$$38 = 4;\n      }\n    } else {\n      $target$$38 = 4;\n    }\n\n    switch ($target$$38) {\n      case 0:\n        {\n          return BigInteger$$$addnn$$6A57060(BigInteger$$get_V(x$$12), BigInteger$$get_V(y$$4));\n        }\n\n      case 1:\n        {\n          return BigInteger$$$op_UnaryNegation$$Z665282C2(BigInteger$$$addnn$$6A57060(BigInteger$$get_V(x$$12), BigInteger$$get_V(y$$4)));\n        }\n\n      case 2:\n        {\n          return BigInteger$$$subnn$$6A57060(BigInteger$$get_V(x$$12), BigInteger$$get_V(y$$4));\n        }\n\n      case 3:\n        {\n          return BigInteger$$$subnn$$6A57060(BigInteger$$get_V(y$$4), BigInteger$$get_V(x$$12));\n        }\n\n      case 4:\n        {\n          throw new Error(\"signs should be +/- 1\\\\nParameter name: x\");\n        }\n    }\n  }\n}\nexport function BigInteger$$$op_Subtraction$$56F059C0(x$$13, y$$5) {\n  if (BigInteger$$get_IsZero(y$$5)) {\n    return x$$13;\n  } else if (BigInteger$$get_IsZero(x$$13)) {\n    return BigInteger$$$op_UnaryNegation$$Z665282C2(y$$5);\n  } else {\n    const matchValue$$6 = [BigInteger$$get_SignInt(x$$13), BigInteger$$get_SignInt(y$$5)];\n    var $target$$41;\n\n    if (matchValue$$6[0] === -1) {\n      if (matchValue$$6[1] === -1) {\n        $target$$41 = 1;\n      } else if (matchValue$$6[1] === 1) {\n        $target$$41 = 3;\n      } else {\n        $target$$41 = 4;\n      }\n    } else if (matchValue$$6[0] === 1) {\n      if (matchValue$$6[1] === -1) {\n        $target$$41 = 2;\n      } else if (matchValue$$6[1] === 1) {\n        $target$$41 = 0;\n      } else {\n        $target$$41 = 4;\n      }\n    } else {\n      $target$$41 = 4;\n    }\n\n    switch ($target$$41) {\n      case 0:\n        {\n          return BigInteger$$$subnn$$6A57060(BigInteger$$get_V(x$$13), BigInteger$$get_V(y$$5));\n        }\n\n      case 1:\n        {\n          return BigInteger$$$subnn$$6A57060(BigInteger$$get_V(y$$5), BigInteger$$get_V(x$$13));\n        }\n\n      case 2:\n        {\n          return BigInteger$$$addnn$$6A57060(BigInteger$$get_V(x$$13), BigInteger$$get_V(y$$5));\n        }\n\n      case 3:\n        {\n          return BigInteger$$$op_UnaryNegation$$Z665282C2(BigInteger$$$addnn$$6A57060(BigInteger$$get_V(x$$13), BigInteger$$get_V(y$$5)));\n        }\n\n      case 4:\n        {\n          throw new Error(\"signs should be +/- 1\\\\nParameter name: x\");\n        }\n    }\n  }\n}\nexport function BigInteger$$$op_Multiply$$56F059C0(x$$14, y$$6) {\n  if (BigInteger$$get_IsZero(x$$14)) {\n    return x$$14;\n  } else if (BigInteger$$get_IsZero(y$$6)) {\n    return y$$6;\n  } else if (BigInteger$$get_IsOne(x$$14)) {\n    return y$$6;\n  } else if (BigInteger$$get_IsOne(y$$6)) {\n    return x$$14;\n  } else {\n    const m = BigNatModule$0024$0024$0024mul(BigInteger$$get_V(x$$14), BigInteger$$get_V(y$$6));\n    return BigInteger$$$create$$Z2BE94A1(BigInteger$$get_SignInt(x$$14) * BigInteger$$get_SignInt(y$$6), m);\n  }\n}\nexport function BigInteger$$$DivRem$$56F059C0(x$$15, y$$7) {\n  if (BigInteger$$get_IsZero(y$$7)) {\n    throw new Error();\n  }\n\n  if (BigInteger$$get_IsZero(x$$15)) {\n    return [BigInteger$$$get_Zero(), BigInteger$$$get_Zero()];\n  } else {\n    const patternInput = BigNatModule$0024$0024$0024divmod(BigInteger$$get_V(x$$15), BigInteger$$get_V(y$$7));\n    const matchValue$$7 = [BigInteger$$get_SignInt(x$$15), BigInteger$$get_SignInt(y$$7)];\n    var $target$$46;\n\n    if (matchValue$$7[0] === -1) {\n      if (matchValue$$7[1] === -1) {\n        $target$$46 = 1;\n      } else if (matchValue$$7[1] === 1) {\n        $target$$46 = 3;\n      } else {\n        $target$$46 = 4;\n      }\n    } else if (matchValue$$7[0] === 1) {\n      if (matchValue$$7[1] === -1) {\n        $target$$46 = 2;\n      } else if (matchValue$$7[1] === 1) {\n        $target$$46 = 0;\n      } else {\n        $target$$46 = 4;\n      }\n    } else {\n      $target$$46 = 4;\n    }\n\n    switch ($target$$46) {\n      case 0:\n        {\n          return [BigInteger$$$posn$$Z67CCE57D(patternInput[0]), BigInteger$$$posn$$Z67CCE57D(patternInput[1])];\n        }\n\n      case 1:\n        {\n          return [BigInteger$$$posn$$Z67CCE57D(patternInput[0]), BigInteger$$$negn$$Z67CCE57D(patternInput[1])];\n        }\n\n      case 2:\n        {\n          return [BigInteger$$$negn$$Z67CCE57D(patternInput[0]), BigInteger$$$posn$$Z67CCE57D(patternInput[1])];\n        }\n\n      case 3:\n        {\n          return [BigInteger$$$negn$$Z67CCE57D(patternInput[0]), BigInteger$$$negn$$Z67CCE57D(patternInput[1])];\n        }\n\n      case 4:\n        {\n          throw new Error(\"signs should be +/- 1\\\\nParameter name: x\");\n        }\n    }\n  }\n}\nexport function BigInteger$$$op_Division$$56F059C0(x$$16, y$$8) {\n  const tuple = BigInteger$$$DivRem$$56F059C0(x$$16, y$$8);\n  return tuple[0];\n}\nexport function BigInteger$$$op_Modulus$$56F059C0(x$$17, y$$9) {\n  const tuple$$1 = BigInteger$$$DivRem$$56F059C0(x$$17, y$$9);\n  return tuple$$1[1];\n}\nexport function BigInteger$$$op_RightShift$$62E082A2(x$$18, y$$10) {\n  return BigInteger$$$op_Division$$56F059C0(x$$18, BigInteger$$$Pow$$62E082A2(BigInteger$$$get_Two(), y$$10));\n}\nexport function BigInteger$$$op_LeftShift$$62E082A2(x$$19, y$$11) {\n  return BigInteger$$$op_Multiply$$56F059C0(x$$19, BigInteger$$$Pow$$62E082A2(BigInteger$$$get_Two(), y$$11));\n}\nexport function BigInteger$$$op_BitwiseAnd$$56F059C0(x$$20, y$$12) {\n  return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024bitAnd(BigInteger$$get_V(x$$20), BigInteger$$get_V(y$$12)));\n}\nexport function BigInteger$$$op_BitwiseOr$$56F059C0(x$$21, y$$13) {\n  return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024bitOr(BigInteger$$get_V(x$$21), BigInteger$$get_V(y$$13)));\n}\nexport function BigInteger$$$op_ExclusiveOr$$56F059C0(x$$22, y$$14) {\n  return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024bitXor(BigInteger$$get_V(x$$22), BigInteger$$get_V(y$$14)));\n}\nexport function BigInteger$$$GreatestCommonDivisor$$56F059C0(x$$23, y$$15) {\n  const matchValue$$8 = [BigInteger$$get_SignInt(x$$23), BigInteger$$get_SignInt(y$$15)];\n\n  if (matchValue$$8[0] === 0) {\n    if (matchValue$$8[1] === 0) {\n      return BigInteger$$$get_Zero();\n    } else {\n      return BigInteger$$$posn$$Z67CCE57D(BigInteger$$get_V(y$$15));\n    }\n  } else if (matchValue$$8[1] === 0) {\n    return BigInteger$$$posn$$Z67CCE57D(BigInteger$$get_V(x$$23));\n  } else {\n    return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024hcf(BigInteger$$get_V(x$$23), BigInteger$$get_V(y$$15)));\n  }\n}\nexport function BigInteger$$get_IsNegative(x$$24) {\n  if (BigInteger$$get_SignInt(x$$24) === -1) {\n    return !BigInteger$$get_IsZero(x$$24);\n  } else {\n    return false;\n  }\n}\nexport function BigInteger$$get_IsPositive(x$$25) {\n  if (BigInteger$$get_SignInt(x$$25) === 1) {\n    return !BigInteger$$get_IsZero(x$$25);\n  } else {\n    return false;\n  }\n}\nexport function BigInteger$$$Abs$$Z665282C2(x$$26) {\n  if (BigInteger$$get_SignInt(x$$26) === -1) {\n    return BigInteger$$$op_UnaryNegation$$Z665282C2(x$$26);\n  } else {\n    return x$$26;\n  }\n}\nexport function BigInteger$$$op_LessThanOrEqual$$56F059C0(x$$27, y$$16) {\n  const matchValue$$9 = [BigInteger$$get_SignInt(x$$27), BigInteger$$get_SignInt(y$$16)];\n  var $target$$68;\n\n  if (matchValue$$9[0] === -1) {\n    if (matchValue$$9[1] === -1) {\n      $target$$68 = 1;\n    } else if (matchValue$$9[1] === 0) {\n      $target$$68 = 6;\n    } else if (matchValue$$9[1] === 1) {\n      $target$$68 = 3;\n    } else {\n      $target$$68 = 9;\n    }\n  } else if (matchValue$$9[0] === 0) {\n    if (matchValue$$9[1] === -1) {\n      $target$$68 = 8;\n    } else if (matchValue$$9[1] === 0) {\n      $target$$68 = 4;\n    } else if (matchValue$$9[1] === 1) {\n      $target$$68 = 7;\n    } else {\n      $target$$68 = 9;\n    }\n  } else if (matchValue$$9[0] === 1) {\n    if (matchValue$$9[1] === -1) {\n      $target$$68 = 2;\n    } else if (matchValue$$9[1] === 0) {\n      $target$$68 = 5;\n    } else if (matchValue$$9[1] === 1) {\n      $target$$68 = 0;\n    } else {\n      $target$$68 = 9;\n    }\n  } else {\n    $target$$68 = 9;\n  }\n\n  switch ($target$$68) {\n    case 0:\n      {\n        return BigNatModule$0024$0024$0024lte(BigInteger$$get_V(x$$27), BigInteger$$get_V(y$$16));\n      }\n\n    case 1:\n      {\n        return BigNatModule$0024$0024$0024lte(BigInteger$$get_V(y$$16), BigInteger$$get_V(x$$27));\n      }\n\n    case 2:\n      {\n        if (BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$27))) {\n          return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$16));\n        } else {\n          return false;\n        }\n      }\n\n    case 3:\n      {\n        return true;\n      }\n\n    case 4:\n      {\n        return true;\n      }\n\n    case 5:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$27));\n      }\n\n    case 6:\n      {\n        return true;\n      }\n\n    case 7:\n      {\n        return true;\n      }\n\n    case 8:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$16));\n      }\n\n    case 9:\n      {\n        throw new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\");\n      }\n  }\n}\nexport function BigInteger$$$op_GreaterThanOrEqual$$56F059C0(x$$28, y$$17) {\n  const matchValue$$10 = [BigInteger$$get_SignInt(x$$28), BigInteger$$get_SignInt(y$$17)];\n  var $target$$71;\n\n  if (matchValue$$10[0] === -1) {\n    if (matchValue$$10[1] === -1) {\n      $target$$71 = 1;\n    } else if (matchValue$$10[1] === 0) {\n      $target$$71 = 6;\n    } else if (matchValue$$10[1] === 1) {\n      $target$$71 = 3;\n    } else {\n      $target$$71 = 9;\n    }\n  } else if (matchValue$$10[0] === 0) {\n    if (matchValue$$10[1] === -1) {\n      $target$$71 = 8;\n    } else if (matchValue$$10[1] === 0) {\n      $target$$71 = 4;\n    } else if (matchValue$$10[1] === 1) {\n      $target$$71 = 7;\n    } else {\n      $target$$71 = 9;\n    }\n  } else if (matchValue$$10[0] === 1) {\n    if (matchValue$$10[1] === -1) {\n      $target$$71 = 2;\n    } else if (matchValue$$10[1] === 0) {\n      $target$$71 = 5;\n    } else if (matchValue$$10[1] === 1) {\n      $target$$71 = 0;\n    } else {\n      $target$$71 = 9;\n    }\n  } else {\n    $target$$71 = 9;\n  }\n\n  switch ($target$$71) {\n    case 0:\n      {\n        return BigNatModule$0024$0024$0024gte(BigInteger$$get_V(x$$28), BigInteger$$get_V(y$$17));\n      }\n\n    case 1:\n      {\n        return BigNatModule$0024$0024$0024gte(BigInteger$$get_V(y$$17), BigInteger$$get_V(x$$28));\n      }\n\n    case 2:\n      {\n        return true;\n      }\n\n    case 3:\n      {\n        if (BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$28))) {\n          return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$17));\n        } else {\n          return false;\n        }\n      }\n\n    case 4:\n      {\n        return true;\n      }\n\n    case 5:\n      {\n        return true;\n      }\n\n    case 6:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(x$$28));\n      }\n\n    case 7:\n      {\n        return BigNatModule$0024$0024$0024isZero(BigInteger$$get_V(y$$17));\n      }\n\n    case 8:\n      {\n        return true;\n      }\n\n    case 9:\n      {\n        throw new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\");\n      }\n  }\n}\nexport function BigInteger$$$Pow$$62E082A2(x$$29, y$$18) {\n  if (y$$18 < 0) {\n    throw new Error(\"y\");\n  }\n\n  const matchValue$$11 = [BigInteger$$get_IsZero(x$$29), y$$18];\n\n  if (matchValue$$11[0]) {\n    if (matchValue$$11[1] === 0) {\n      return BigInteger$$$get_One();\n    } else {\n      return BigInteger$$$get_Zero();\n    }\n  } else {\n    const yval = BigInteger$$$$002Ector$$Z524259A4(y$$18);\n    return BigInteger$$$create$$Z2BE94A1(BigNatModule$0024$0024$0024isZero(BigNatModule$0024$0024$0024rem(BigInteger$$get_V(yval), BigNatModule$0024$0024$0024two)) ? 1 : BigInteger$$get_SignInt(x$$29), BigNatModule$0024$0024$0024pow(BigInteger$$get_V(x$$29), BigInteger$$get_V(yval)));\n  }\n}\nexport function BigInteger$$get_ToInt32(x$$30) {\n  if (BigInteger$$get_IsZero(x$$30)) {\n    return 0;\n  } else {\n    const u = BigNatModule$0024$0024$0024toUInt32(BigInteger$$get_V(x$$30));\n\n    if (u <= 2147483647 >>> 0) {\n      return BigInteger$$get_SignInt(x$$30) * ~~u | 0;\n    } else if (BigInteger$$get_SignInt(x$$30) === -1 ? u === 2147483647 + 1 >>> 0 : false) {\n      return -2147483648 | 0;\n    } else {\n      throw new Error();\n    }\n  }\n}\nexport function BigInteger$$get_ToUInt32(x$$31) {\n  if (BigInteger$$get_IsZero(x$$31)) {\n    return 0;\n  } else {\n    return BigNatModule$0024$0024$0024toUInt32(BigInteger$$get_V(x$$31));\n  }\n}\nexport function BigInteger$$get_ToInt64(x$$32) {\n  if (BigInteger$$get_IsZero(x$$32)) {\n    return fromBits(0, 0, false);\n  } else {\n    const u$$1 = BigNatModule$0024$0024$0024toUInt64(BigInteger$$get_V(x$$32));\n\n    if (compare(u$$1, fromValue(fromBits(4294967295, 2147483647, false), true)) <= 0) {\n      return op_Multiply(fromInteger(BigInteger$$get_SignInt(x$$32), false, 2), fromValue(u$$1, false));\n    } else if (BigInteger$$get_SignInt(x$$32) === -1 ? equals(u$$1, fromValue(op_Addition(fromBits(4294967295, 2147483647, false), fromBits(1, 0, false)), true)) : false) {\n      return fromBits(0, 2147483648, false);\n    } else {\n      throw new Error();\n    }\n  }\n}\nexport function BigInteger$$get_ToUInt64(x$$33) {\n  if (BigInteger$$get_IsZero(x$$33)) {\n    return fromBits(0, 0, true);\n  } else {\n    return BigNatModule$0024$0024$0024toUInt64(BigInteger$$get_V(x$$33));\n  }\n}\nexport function BigInteger$$get_ToDouble(x$$34) {\n  const matchValue$$12 = BigInteger$$get_SignInt(x$$34) | 0;\n\n  switch (matchValue$$12) {\n    case -1:\n      {\n        return -BigNatModule$0024$0024$0024toFloat(BigInteger$$get_V(x$$34));\n      }\n\n    case 0:\n      {\n        return 0;\n      }\n\n    case 1:\n      {\n        return BigNatModule$0024$0024$0024toFloat(BigInteger$$get_V(x$$34));\n      }\n\n    default:\n      {\n        throw new Error(\"signs should be +/- 1 or 0\\\\nParameter name: x\");\n      }\n  }\n}\nexport function BigInteger$$get_ToSByte(x$$35) {\n  return (BigInteger$$get_ToInt32(x$$35) + 0x80 & 0xFF) - 0x80;\n}\nexport function BigInteger$$get_ToByte(x$$36) {\n  return BigInteger$$get_ToUInt32(x$$36) & 0xFF;\n}\nexport function BigInteger$$get_ToInt16(x$$37) {\n  return (BigInteger$$get_ToInt32(x$$37) + 0x8000 & 0xFFFF) - 0x8000;\n}\nexport function BigInteger$$get_ToUInt16(x$$38) {\n  return BigInteger$$get_ToUInt32(x$$38) & 0xFFFF;\n}\nexport function BigInteger$$get_ToSingle(x$$39) {\n  return BigInteger$$get_ToDouble(x$$39);\n}\nexport function BigInteger$$get_ToDecimal(x$$40) {\n  return new Decimal(BigInteger$$get_ToDouble(x$$40));\n}\nexport function BigInteger$$$Parse$$Z721C83C5(text) {\n  if (text == null) {\n    throw new Error(\"text\");\n  }\n\n  const text$$1 = text.trim();\n  const len = text$$1.length | 0;\n\n  if (len === 0) {\n    throw new Error();\n  }\n\n  const matchValue$$13 = [text$$1[0], len];\n\n  if (matchValue$$13[0] === \"+\") {\n    if (matchValue$$13[1] === 1) {\n      throw new Error();\n    } else {\n      return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024ofString(text$$1.slice(1, len - 1 + 1)));\n    }\n  } else if (matchValue$$13[0] === \"-\") {\n    if (matchValue$$13[1] === 1) {\n      throw new Error();\n    } else {\n      return BigInteger$$$negn$$Z67CCE57D(BigNatModule$0024$0024$0024ofString(text$$1.slice(1, len - 1 + 1)));\n    }\n  } else {\n    return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024ofString(text$$1));\n  }\n}\nexport function BigInteger$$get_IsSmall(x$$41) {\n  if (BigInteger$$get_IsZero(x$$41)) {\n    return true;\n  } else {\n    return BigNatModule$0024$0024$0024isSmall(BigInteger$$get_V(x$$41));\n  }\n}\nexport function BigInteger$$$Factorial$$Z665282C2(x$$42) {\n  if (BigInteger$$get_IsNegative(x$$42)) {\n    throw new Error(\"mustBeNonNegative\\\\nParameter name: x\");\n  }\n\n  if (BigInteger$$get_IsPositive(x$$42)) {\n    return BigInteger$$$posn$$Z67CCE57D(BigNatModule$0024$0024$0024factorial(BigInteger$$get_V(x$$42)));\n  } else {\n    return BigInteger$$$get_One();\n  }\n}\nexport function BigInteger$$$op_UnaryPlus$$Z665282C2(n1) {\n  return n1;\n}\nexport function BigInteger$$$FromInt64$$Z524259C1(x$$43) {\n  return BigInteger$$$$002Ector$$Z524259C1(x$$43);\n}\nexport function BigInteger$$$FromInt32$$Z524259A4(x$$44) {\n  return BigInteger$$$$002Ector$$Z524259A4(x$$44);\n}\n\nBigInteger.prototype.CompareTo = function (obj$$1) {\n  const this$$$1 = this;\n\n  if (obj$$1 instanceof BigInteger) {\n    return BigInteger$$$compare$$56F059C0(this$$$1, obj$$1) | 0;\n  } else {\n    throw new Error(\"the objects are not comparable\\\\nParameter name: obj\");\n  }\n};","import { BigInteger$$$op_Inequality$$56F059C0 as BigInteger$0024$0024$0024op_Inequality$0024$002456F059C0, BigInteger$$$op_Equality$$56F059C0 as BigInteger$0024$0024$0024op_Equality$0024$002456F059C0, BigInteger$$$op_GreaterThanOrEqual$$56F059C0 as BigInteger$0024$0024$0024op_GreaterThanOrEqual$0024$002456F059C0, BigInteger$$$op_GreaterThan$$56F059C0 as BigInteger$0024$0024$0024op_GreaterThan$0024$002456F059C0, BigInteger$$$op_LessThanOrEqual$$56F059C0 as BigInteger$0024$0024$0024op_LessThanOrEqual$0024$002456F059C0, BigInteger$$$op_LessThan$$56F059C0 as BigInteger$0024$0024$0024op_LessThan$0024$002456F059C0, BigInteger$$$op_ExclusiveOr$$56F059C0 as BigInteger$0024$0024$0024op_ExclusiveOr$0024$002456F059C0, BigInteger$$$op_BitwiseOr$$56F059C0 as BigInteger$0024$0024$0024op_BitwiseOr$0024$002456F059C0, BigInteger$$$op_BitwiseAnd$$56F059C0 as BigInteger$0024$0024$0024op_BitwiseAnd$0024$002456F059C0, BigInteger$$$op_LeftShift$$62E082A2 as BigInteger$0024$0024$0024op_LeftShift$0024$002462E082A2, BigInteger$$$op_RightShift$$62E082A2 as BigInteger$0024$0024$0024op_RightShift$0024$002462E082A2, BigInteger$$$op_UnaryPlus$$Z665282C2 as BigInteger$0024$0024$0024op_UnaryPlus$0024$0024Z665282C2, BigInteger$$$op_UnaryNegation$$Z665282C2 as BigInteger$0024$0024$0024op_UnaryNegation$0024$0024Z665282C2, BigInteger$$$op_Modulus$$56F059C0 as BigInteger$0024$0024$0024op_Modulus$0024$002456F059C0, BigInteger$$$op_Division$$56F059C0 as BigInteger$0024$0024$0024op_Division$0024$002456F059C0, BigInteger$$$op_Multiply$$56F059C0 as BigInteger$0024$0024$0024op_Multiply$0024$002456F059C0, BigInteger$$$op_Subtraction$$56F059C0 as BigInteger$0024$0024$0024op_Subtraction$0024$002456F059C0, BigInteger$$$op_Addition$$56F059C0 as BigInteger$0024$0024$0024op_Addition$0024$002456F059C0, BigInteger$$get_IsOne as BigInteger$0024$0024get_IsOne, BigInteger$$get_IsZero as BigInteger$0024$0024get_IsZero, BigInteger$$get_Sign as BigInteger$0024$0024get_Sign, BigInteger$$get_ToDecimal as BigInteger$0024$0024get_ToDecimal, BigInteger$$get_ToDouble as BigInteger$0024$0024get_ToDouble, BigInteger$$get_ToSingle as BigInteger$0024$0024get_ToSingle, BigInteger$$get_ToUInt64 as BigInteger$0024$0024get_ToUInt64, BigInteger$$get_ToInt64 as BigInteger$0024$0024get_ToInt64, BigInteger$$get_ToUInt32 as BigInteger$0024$0024get_ToUInt32, BigInteger$$get_ToInt32 as BigInteger$0024$0024get_ToInt32, BigInteger$$get_ToUInt16 as BigInteger$0024$0024get_ToUInt16, BigInteger$$get_ToInt16 as BigInteger$0024$0024get_ToInt16, BigInteger$$get_ToByte as BigInteger$0024$0024get_ToByte, BigInteger$$get_ToSByte as BigInteger$0024$0024get_ToSByte, BigInteger$$$$002Ector$$Z524259A4 as BigInteger$0024$0024$0024$0024002Ector$0024$0024Z524259A4, BigInteger$$$$002Ector$$Z524259C1 as BigInteger$0024$0024$0024$0024002Ector$0024$0024Z524259C1, BigInteger$$$get_Two as BigInteger$0024$0024$0024get_Two, BigInteger$$$get_One as BigInteger$0024$0024$0024get_One, BigInteger$$$Abs$$Z665282C2 as BigInteger$0024$0024$0024Abs$0024$0024Z665282C2, BigInteger$$$Pow$$62E082A2 as BigInteger$0024$0024$0024Pow$0024$002462E082A2, BigInteger$$$GreatestCommonDivisor$$56F059C0 as BigInteger$0024$0024$0024GreatestCommonDivisor$0024$002456F059C0, BigInteger$$$DivRem$$56F059C0 as BigInteger$0024$0024$0024DivRem$0024$002456F059C0, BigInteger$$$Parse$$Z721C83C5 as BigInteger$0024$0024$0024Parse$0024$0024Z721C83C5, BigInteger$$$get_Zero as BigInteger$0024$0024$0024get_Zero, BigInteger } from \"./BigInt/z\";\nimport { fromInteger } from \"./Long.js\";\nimport { min, comparePrimitives, equals as equals$$1, structuralHash } from \"./Util.js\";\nimport { delay, unfold, rangeNumber } from \"./Seq.js\";\nimport { fold, head, skipWhile, find, ofSeq } from \"./List.js\";\nimport { List } from \"./Types.js\";\nimport { fill, reverse, ofList } from \"./Array.js\";\nexport function isBigInt(x) {\n  return x instanceof BigInteger;\n}\nexport function tryParse(str) {\n  try {\n    const res = BigInteger$0024$0024$0024Parse$0024$0024Z721C83C5(str);\n    return [true, res];\n  } catch (matchValue) {\n    return [false, BigInteger$0024$0024$0024get_Zero()];\n  }\n}\nexport function parse(arg00) {\n  return BigInteger$0024$0024$0024Parse$0024$0024Z721C83C5(arg00);\n}\nexport function divRem(arg00$$1, arg01) {\n  return BigInteger$0024$0024$0024DivRem$0024$002456F059C0(arg00$$1, arg01);\n}\nexport function greatestCommonDivisor(arg00$$2, arg01$$1) {\n  return BigInteger$0024$0024$0024GreatestCommonDivisor$0024$002456F059C0(arg00$$2, arg01$$1);\n}\nexport function pow(arg00$$3, arg01$$2) {\n  return BigInteger$0024$0024$0024Pow$0024$002462E082A2(arg00$$3, arg01$$2);\n}\nexport function abs(arg00$$4) {\n  return BigInteger$0024$0024$0024Abs$0024$0024Z665282C2(arg00$$4);\n}\nexport const zero = BigInteger$0024$0024$0024get_Zero();\nexport const one = BigInteger$0024$0024$0024get_One();\nexport const two = BigInteger$0024$0024$0024get_Two();\nexport function fromString(s) {\n  return BigInteger$0024$0024$0024Parse$0024$0024Z721C83C5(s);\n}\nexport function fromZero() {\n  return BigInteger$0024$0024$0024get_Zero();\n}\nexport function fromOne() {\n  return BigInteger$0024$0024$0024get_One();\n}\nexport function fromInt64(i) {\n  return BigInteger$0024$0024$0024$0024002Ector$0024$0024Z524259C1(i);\n}\nexport function fromInt32(i$$1) {\n  var value;\n\n  if (i$$1 > 2147483647) {\n    return BigInteger$0024$0024$0024$0024002Ector$0024$0024Z524259C1((value = i$$1, (fromInteger(value, false, 6))));\n  } else {\n    return BigInteger$0024$0024$0024$0024002Ector$0024$0024Z524259A4(i$$1);\n  }\n}\nexport function toSByte(x$$1) {\n  return BigInteger$0024$0024get_ToSByte(x$$1);\n}\nexport function toByte(x$$2) {\n  return BigInteger$0024$0024get_ToByte(x$$2);\n}\nexport function toInt16(x$$3) {\n  return BigInteger$0024$0024get_ToInt16(x$$3);\n}\nexport function toUInt16(x$$4) {\n  return BigInteger$0024$0024get_ToUInt16(x$$4);\n}\nexport function toInt32(x$$5) {\n  return BigInteger$0024$0024get_ToInt32(x$$5);\n}\nexport function toUInt32(x$$6) {\n  return BigInteger$0024$0024get_ToUInt32(x$$6);\n}\nexport function toInt64(x$$7) {\n  return BigInteger$0024$0024get_ToInt64(x$$7);\n}\nexport function toUInt64(x$$8) {\n  return BigInteger$0024$0024get_ToUInt64(x$$8);\n}\nexport function toSingle(x$$9) {\n  return BigInteger$0024$0024get_ToSingle(x$$9);\n}\nexport function toDouble(x$$10) {\n  return BigInteger$0024$0024get_ToDouble(x$$10);\n}\nexport function toDecimal(x$$11) {\n  return BigInteger$0024$0024get_ToDecimal(x$$11);\n}\nexport function sign(x$$12) {\n  return BigInteger$0024$0024get_Sign(x$$12);\n}\nexport function isZero(x$$13) {\n  return BigInteger$0024$0024get_IsZero(x$$13);\n}\nexport function isOne(x$$14) {\n  return BigInteger$0024$0024get_IsOne(x$$14);\n}\nexport function hash(x$$15) {\n  return structuralHash(x$$15);\n}\nexport function compare(x$$16, y) {\n  return x$$16.CompareTo(y);\n}\nexport function equals(x$$17, y$$1) {\n  return equals$$1(x$$17, y$$1);\n}\nexport function toString(x$$18) {\n  return String(x$$18);\n}\nexport const get_Zero = BigInteger$0024$0024$0024get_Zero();\nexport const get_One = BigInteger$0024$0024$0024get_One();\nexport function op_Addition(arg00$$5, arg01$$3) {\n  return BigInteger$0024$0024$0024op_Addition$0024$002456F059C0(arg00$$5, arg01$$3);\n}\nexport function op_Subtraction(arg00$$6, arg01$$4) {\n  return BigInteger$0024$0024$0024op_Subtraction$0024$002456F059C0(arg00$$6, arg01$$4);\n}\nexport function op_Multiply(arg00$$7, arg01$$5) {\n  return BigInteger$0024$0024$0024op_Multiply$0024$002456F059C0(arg00$$7, arg01$$5);\n}\nexport function op_Division(arg00$$8, arg01$$6) {\n  return BigInteger$0024$0024$0024op_Division$0024$002456F059C0(arg00$$8, arg01$$6);\n}\nexport function op_Modulus(arg00$$9, arg01$$7) {\n  return BigInteger$0024$0024$0024op_Modulus$0024$002456F059C0(arg00$$9, arg01$$7);\n}\nexport function op_UnaryNegation(arg00$$10) {\n  return BigInteger$0024$0024$0024op_UnaryNegation$0024$0024Z665282C2(arg00$$10);\n}\nexport function op_UnaryPlus(arg00$$11) {\n  return BigInteger$0024$0024$0024op_UnaryPlus$0024$0024Z665282C2(arg00$$11);\n}\nexport function op_RightShift(arg00$$12, arg01$$8) {\n  return BigInteger$0024$0024$0024op_RightShift$0024$002462E082A2(arg00$$12, arg01$$8);\n}\nexport function op_LeftShift(arg00$$13, arg01$$9) {\n  return BigInteger$0024$0024$0024op_LeftShift$0024$002462E082A2(arg00$$13, arg01$$9);\n}\nexport function op_BitwiseAnd(arg00$$14, arg01$$10) {\n  return BigInteger$0024$0024$0024op_BitwiseAnd$0024$002456F059C0(arg00$$14, arg01$$10);\n}\nexport function op_BitwiseOr(arg00$$15, arg01$$11) {\n  return BigInteger$0024$0024$0024op_BitwiseOr$0024$002456F059C0(arg00$$15, arg01$$11);\n}\nexport function op_ExclusiveOr(arg00$$16, arg01$$12) {\n  return BigInteger$0024$0024$0024op_ExclusiveOr$0024$002456F059C0(arg00$$16, arg01$$12);\n}\nexport function op_LessThan(arg00$$17, arg01$$13) {\n  return BigInteger$0024$0024$0024op_LessThan$0024$002456F059C0(arg00$$17, arg01$$13);\n}\nexport function op_LessThanOrEqual(arg00$$18, arg01$$14) {\n  return BigInteger$0024$0024$0024op_LessThanOrEqual$0024$002456F059C0(arg00$$18, arg01$$14);\n}\nexport function op_GreaterThan(arg00$$19, arg01$$15) {\n  return BigInteger$0024$0024$0024op_GreaterThan$0024$002456F059C0(arg00$$19, arg01$$15);\n}\nexport function op_GreaterThanOrEqual(arg00$$20, arg01$$16) {\n  return BigInteger$0024$0024$0024op_GreaterThanOrEqual$0024$002456F059C0(arg00$$20, arg01$$16);\n}\nexport function op_Equality(arg00$$21, arg01$$17) {\n  return BigInteger$0024$0024$0024op_Equality$0024$002456F059C0(arg00$$21, arg01$$17);\n}\nexport function op_Inequality(arg00$$22, arg01$$18) {\n  return BigInteger$0024$0024$0024op_Inequality$0024$002456F059C0(arg00$$22, arg01$$18);\n}\n\nfunction flipTwosComplement(currByte, lowBitFound) {\n  if (lowBitFound) {\n    return [(currByte ^ 255) & 255, true];\n  } else if (currByte === 0) {\n    return [0, false];\n  } else {\n    let firstBitIndex;\n    const list = ofSeq(rangeNumber(0, 1, 7));\n    firstBitIndex = find(function predicate(i$$2) {\n      return (currByte & 1 << i$$2) > 0;\n    }, list);\n    return [(currByte ^ 254 << firstBitIndex) & 255, true];\n  }\n}\n\nexport function toByteArray(value$$1) {\n  if (equals$$1(value$$1, zero)) {\n    return new Uint8Array([0]);\n  } else {\n    const isPositive = value$$1.CompareTo(zero) > 0;\n    const value$$2 = isPositive ? value$$1 : BigInteger$0024$0024$0024op_Multiply$0024$002456F059C0(BigInteger$0024$0024$0024$0024002Ector$0024$0024Z524259A4(-1), value$$1);\n    let mask32;\n    let i$$3;\n    i$$3 = fromInteger(4294967295, false, 6);\n    mask32 = fromInt64(i$$3);\n\n    const loop = function loop($accumBytes$$74, $consumeValue$$75, $lowBitFound$$1$$76) {\n      var value$$9, value$$10, value$$11;\n\n      loop: while (true) {\n        const accumBytes = $accumBytes$$74,\n              consumeValue = $consumeValue$$75,\n              lowBitFound$$1 = $lowBitFound$$1$$76;\n\n        if (consumeValue.CompareTo(zero) <= 0) {\n          let accumBytes$$1;\n\n          if (isPositive) {\n            accumBytes$$1 = skipWhile(function predicate$$1(b) {\n              return b === 0;\n            }, accumBytes);\n          } else {\n            accumBytes$$1 = skipWhile(function predicate$$2(b$$1) {\n              return b$$1 === 255;\n            }, accumBytes);\n          }\n\n          const isHighBitOne = (head(accumBytes$$1) & 128) !== 0;\n          const accumBytes$$2 = (isPositive ? isHighBitOne : false) ? new List(0, accumBytes$$1) : (!isPositive ? !isHighBitOne : false) ? new List(255, accumBytes$$1) : accumBytes$$1;\n          let array;\n          array = ofList(accumBytes$$2, Uint8Array);\n          return reverse(array, Uint8Array);\n        } else {\n          let currValue;\n          const x$$19 = BigInteger$0024$0024$0024op_BitwiseAnd$0024$002456F059C0(consumeValue, mask32);\n          currValue = toUInt32(x$$19);\n\n          if (isPositive) {\n            let b0;\n            b0 = currValue & 0xFF;\n            let b1;\n            const value$$5 = currValue >>> 8;\n            b1 = value$$5 & 0xFF;\n            let b2;\n            const value$$6 = currValue >>> 16;\n            b2 = value$$6 & 0xFF;\n            let b3;\n            const value$$7 = currValue >>> 24;\n            b3 = value$$7 & 0xFF;\n            $accumBytes$$74 = new List(b3, new List(b2, new List(b1, new List(b0, accumBytes))));\n            $consumeValue$$75 = BigInteger$0024$0024$0024op_RightShift$0024$002462E082A2(consumeValue, 32);\n            $lowBitFound$$1$$76 = false;\n            continue loop;\n          } else {\n            const patternInput = flipTwosComplement((currValue & 0xFF), lowBitFound$$1);\n            const patternInput$$1 = flipTwosComplement((value$$9 = currValue >>> 8, (value$$9 & 0xFF)), patternInput[1]);\n            const patternInput$$2 = flipTwosComplement((value$$10 = currValue >>> 16, (value$$10 & 0xFF)), patternInput$$1[1]);\n            const patternInput$$3 = flipTwosComplement((value$$11 = currValue >>> 24, (value$$11 & 0xFF)), patternInput$$2[1]);\n            $accumBytes$$74 = new List(patternInput$$3[0], new List(patternInput$$2[0], new List(patternInput$$1[0], new List(patternInput[0], accumBytes))));\n            $consumeValue$$75 = BigInteger$0024$0024$0024op_RightShift$0024$002462E082A2(consumeValue, 32);\n            $lowBitFound$$1$$76 = patternInput$$3[1];\n            continue loop;\n          }\n        }\n\n        break;\n      }\n    };\n\n    return loop(new List(), value$$2, false);\n  }\n}\nexport function fromByteArray(bytes) {\n  if (bytes == null) {\n    throw new Error(\"bytes\");\n  }\n\n  if (bytes.length === 0) {\n    return zero;\n  } else {\n    const isPositive$$1 = (bytes[bytes.length - 1] & 128) === 0;\n    const buffer = fill(new Uint8Array(4), 0, 4, 0);\n\n    const loop$$1 = function loop$$1($accumUInt32$$80, $currIndex$$81, $bytesRemaining$$82, $lowBitFound$$6$$83) {\n      loop$$1: while (true) {\n        const accumUInt32 = $accumUInt32$$80,\n              currIndex = $currIndex$$81,\n              bytesRemaining = $bytesRemaining$$82,\n              lowBitFound$$6 = $lowBitFound$$6$$83;\n\n        if (bytesRemaining === 0) {\n          let value$$14;\n          value$$14 = fold(function folder(acc, value$$12) {\n            var i$$4;\n            return BigInteger$0024$0024$0024op_Addition$0024$002456F059C0(BigInteger$0024$0024$0024op_LeftShift$0024$002462E082A2(acc, 32), (i$$4 = (fromInteger(value$$12, false, 6)), (fromInt64(i$$4))));\n          }, zero, accumUInt32);\n\n          if (isPositive$$1) {\n            return value$$14;\n          } else {\n            return BigInteger$0024$0024$0024op_Multiply$0024$002456F059C0(BigInteger$0024$0024$0024$0024002Ector$0024$0024Z524259A4(-1), value$$14);\n          }\n        } else {\n          const bytesToProcess = min(comparePrimitives, bytesRemaining, 4) | 0;\n\n          for (let i$$5 = 0; i$$5 <= bytesToProcess - 1; i$$5++) {\n            buffer[i$$5] = bytes[currIndex + i$$5];\n          }\n\n          if (isPositive$$1) {\n            fill(buffer, bytesToProcess, 4 - bytesToProcess, 0);\n            const value$$15 = (((buffer[0] | buffer[1] << 8 >>> 0) >>> 0 | buffer[2] << 16 >>> 0) >>> 0 | buffer[3] << 24 >>> 0) >>> 0;\n            $accumUInt32$$80 = new List(value$$15, accumUInt32);\n            $currIndex$$81 = currIndex + bytesToProcess;\n            $bytesRemaining$$82 = bytesRemaining - bytesToProcess;\n            $lowBitFound$$6$$83 = false;\n            continue loop$$1;\n          } else {\n            fill(buffer, bytesToProcess, 4 - bytesToProcess, 255);\n            const patternInput$$4 = flipTwosComplement(buffer[0], lowBitFound$$6);\n            const patternInput$$5 = flipTwosComplement(buffer[1], patternInput$$4[1]);\n            const patternInput$$6 = flipTwosComplement(buffer[2], patternInput$$5[1]);\n            const patternInput$$7 = flipTwosComplement(buffer[3], patternInput$$6[1]);\n            const value$$16 = (((patternInput$$4[0] | patternInput$$5[0] << 8 >>> 0) >>> 0 | patternInput$$6[0] << 16 >>> 0) >>> 0 | patternInput$$7[0] << 24 >>> 0) >>> 0;\n            $accumUInt32$$80 = new List(value$$16, accumUInt32);\n            $currIndex$$81 = currIndex + bytesToProcess;\n            $bytesRemaining$$82 = bytesRemaining - bytesToProcess;\n            $lowBitFound$$6$$83 = patternInput$$7[1];\n            continue loop$$1;\n          }\n        }\n\n        break;\n      }\n    };\n\n    return loop$$1(new List(), 0, bytes.length, false);\n  }\n}\nexport function makeRangeStepFunction(step, last) {\n  const stepComparedWithZero = step.CompareTo(zero) | 0;\n\n  if (stepComparedWithZero === 0) {\n    throw new Error(\"The step of a range cannot be zero\");\n  }\n\n  const stepGreaterThanZero = stepComparedWithZero > 0;\n  return function (x$$20) {\n    const comparedWithLast = x$$20.CompareTo(last) | 0;\n    return ((stepGreaterThanZero ? comparedWithLast <= 0 : false) ? true : !stepGreaterThanZero ? comparedWithLast >= 0 : false) ? [x$$20, BigInteger$0024$0024$0024op_Addition$0024$002456F059C0(x$$20, step)] : null;\n  };\n}\nexport function range(first, step$$1, last$$1) {\n  const stepFn = makeRangeStepFunction(step$$1, last$$1);\n  return delay(function () {\n    return unfold(stepFn, first);\n  });\n}","/**\n * DateTimeOffset functions.\n *\n * Note: DateOffset instances are always DateObjects in local\n * timezone (because JS dates are all kinds of messed up).\n * A local date returns UTC epoc when `.getTime()` is called.\n *\n * However, this means that in order to construct an UTC date\n * from a DateOffset with offset of +5 hours, you first need\n * to subtract those 5 hours, than add the \"local\" offset.\n * As said, all kinds of messed up.\n *\n * Basically; invariant: date.getTime() always return UTC time.\n */\nimport { create as createDate, dateOffsetToString, daysInMonth, offsetRegex, parseRaw } from \"./Date\";\nimport { fromValue, ticksToUnixEpochMilliseconds, unixEpochMillisecondsToTicks } from \"./Long\";\nimport { compareDates, padWithZeros } from \"./Util\";\nexport default function DateTimeOffset(value, offset) {\n    const d = new Date(value);\n    d.offset = offset != null ? offset : new Date().getTimezoneOffset() * -60000;\n    return d;\n}\nexport function fromDate(date, offset) {\n    const isUtc = date.kind === 1 /* UTC */;\n    const offset2 = isUtc ? 0 : date.getTimezoneOffset() * -60000;\n    if (offset != null && offset !== offset2) {\n        throw new Error(isUtc\n            ? \"The UTC Offset for Utc DateTime instances must be 0.\"\n            : \"The UTC Offset of the local dateTime parameter does not match the offset argument.\");\n    }\n    return DateTimeOffset(date.getTime(), offset2);\n}\nexport function fromTicks(ticks, offset) {\n    ticks = fromValue(ticks);\n    const epoc = ticksToUnixEpochMilliseconds(ticks) - offset;\n    return DateTimeOffset(epoc, offset);\n}\nexport function getUtcTicks(date) {\n    return unixEpochMillisecondsToTicks(date.getTime(), 0);\n}\nexport function minValue() {\n    // This is \"0001-01-01T00:00:00.000Z\", actual JS min value is -8640000000000000\n    return DateTimeOffset(-62135596800000, 0);\n}\nexport function maxValue() {\n    // This is \"9999-12-31T23:59:59.999Z\", actual JS max value is 8640000000000000\n    return DateTimeOffset(253402300799999, 0);\n}\nexport function parse(str) {\n    const date = parseRaw(str);\n    const offsetMatch = offsetRegex.exec(str);\n    const offset = offsetMatch == null\n        ? date.getTimezoneOffset() * -60000\n        : (offsetMatch[0] === \"Z\"\n            ? 0\n            : parseInt(offsetMatch[1], 10) * 3600000\n                + parseInt(offsetMatch[2], 10) * 60000);\n    return DateTimeOffset(date.getTime(), offset);\n}\nexport function tryParse(v) {\n    try {\n        return [true, parse(v)];\n    }\n    catch (_err) {\n        return [false, minValue()];\n    }\n}\nexport function create(year, month, day, h, m, s, ms, offset) {\n    if (offset == null) {\n        offset = ms;\n        ms = 0;\n    }\n    if (offset !== 0) {\n        if (offset % 60000 !== 0) {\n            throw new Error(\"Offset must be specified in whole minutes\");\n        }\n        if (~~(offset / 3600000) > 14) {\n            throw new Error(\"Offset must be within plus or minus 14 hour\");\n        }\n    }\n    let date;\n    if (offset === 0) {\n        date = new Date(Date.UTC(year, month - 1, day, h, m, s, ms));\n        if (year <= 99) {\n            date.setFullYear(year, month - 1, day);\n        }\n    }\n    else {\n        const str = padWithZeros(year, 4) + \"-\" +\n            padWithZeros(month, 2) + \"-\" +\n            padWithZeros(day, 2) + \"T\" +\n            padWithZeros(h, 2) + \":\" +\n            padWithZeros(m, 2) + \":\" +\n            padWithZeros(s, 2) + \".\" +\n            padWithZeros(ms, 3) +\n            dateOffsetToString(offset);\n        date = new Date(str);\n    }\n    const dateValue = date.getTime();\n    if (isNaN(dateValue)) {\n        throw new Error(\"The parameters describe an unrepresentable Date\");\n    }\n    return DateTimeOffset(dateValue, offset);\n}\nexport function now() {\n    const date = new Date();\n    const offset = date.getTimezoneOffset() * -60000;\n    return DateTimeOffset(date.getTime(), offset);\n}\nexport function utcNow() {\n    const date = now();\n    return DateTimeOffset(date.getTime(), 0);\n}\nexport function toUniversalTime(date) {\n    return DateTimeOffset(date.getTime(), 0);\n}\nexport function toLocalTime(date) {\n    return DateTimeOffset(date.getTime(), date.getTimezoneOffset() * -60000);\n}\nexport function timeOfDay(d) {\n    const d2 = new Date(d.getTime() + d.offset);\n    return d2.getUTCHours() * 3600000\n        + d2.getUTCMinutes() * 60000\n        + d2.getUTCSeconds() * 1000\n        + d2.getUTCMilliseconds();\n}\nexport function date(d) {\n    const d2 = new Date(d.getTime() + d.offset);\n    return createDate(d2.getUTCFullYear(), d2.getUTCMonth() + 1, d2.getUTCDate(), 0, 0, 0, 0);\n}\nexport function day(d) {\n    return new Date(d.getTime() + d.offset).getUTCDate();\n}\nexport function hour(d) {\n    return new Date(d.getTime() + d.offset).getUTCHours();\n}\nexport function millisecond(d) {\n    return new Date(d.getTime() + d.offset).getUTCMilliseconds();\n}\nexport function minute(d) {\n    return new Date(d.getTime() + d.offset).getUTCMinutes();\n}\nexport function month(d) {\n    return new Date(d.getTime() + d.offset).getUTCMonth() + 1;\n}\nexport function second(d) {\n    return new Date(d.getTime() + d.offset).getUTCSeconds();\n}\nexport function year(d) {\n    return new Date(d.getTime() + d.offset).getUTCFullYear();\n}\nexport function dayOfWeek(d) {\n    return new Date(d.getTime() + d.offset).getUTCDay();\n}\nexport function dayOfYear(d) {\n    const d2 = new Date(d.getTime() + d.offset);\n    const _year = d2.getUTCFullYear();\n    const _month = d2.getUTCMonth() + 1;\n    let _day = d2.getUTCDate();\n    for (let i = 1; i < _month; i++) {\n        _day += daysInMonth(_year, i);\n    }\n    return _day;\n}\nexport function add(d, ts) {\n    return DateTimeOffset(d.getTime() + ts, d.offset);\n}\nexport function addDays(d, v) {\n    return DateTimeOffset(d.getTime() + v * 86400000, d.offset);\n}\nexport function addHours(d, v) {\n    return DateTimeOffset(d.getTime() + v * 3600000, d.offset);\n}\nexport function addMinutes(d, v) {\n    return DateTimeOffset(d.getTime() + v * 60000, d.offset);\n}\nexport function addSeconds(d, v) {\n    return DateTimeOffset(d.getTime() + v * 1000, d.offset);\n}\nexport function addMilliseconds(d, v) {\n    return DateTimeOffset(d.getTime() + v, d.offset);\n}\nexport function addYears(d, v) {\n    const newMonth = d.getUTCMonth() + 1;\n    const newYear = d.getUTCFullYear() + v;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, d.getUTCDate());\n    return create(newYear, newMonth, newDay, d.getUTCHours(), d.getUTCMinutes(), d.getUTCSeconds(), d.getUTCMilliseconds(), d.offset);\n}\nexport function addMonths(d, v) {\n    const d2 = new Date(d.getTime() + d.offset);\n    let newMonth = d2.getUTCMonth() + 1 + v;\n    let newMonth_ = 0;\n    let yearOffset = 0;\n    if (newMonth > 12) {\n        newMonth_ = newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12);\n        newMonth = newMonth_;\n    }\n    else if (newMonth < 1) {\n        newMonth_ = 12 + newMonth % 12;\n        yearOffset = Math.floor(newMonth / 12) + (newMonth_ === 12 ? -1 : 0);\n        newMonth = newMonth_;\n    }\n    const newYear = d2.getUTCFullYear() + yearOffset;\n    const _daysInMonth = daysInMonth(newYear, newMonth);\n    const newDay = Math.min(_daysInMonth, d2.getUTCDate());\n    return create(newYear, newMonth, newDay, d2.getUTCHours(), d2.getUTCMinutes(), d2.getUTCSeconds(), d2.getUTCMilliseconds(), d.offset);\n}\nexport function subtract(d, that) {\n    return typeof that === \"number\"\n        ? DateTimeOffset(d.getTime() - that, d.offset)\n        : d.getTime() - that.getTime();\n}\nexport function equals(d1, d2) {\n    return d1.getTime() === d2.getTime();\n}\nexport function equalsExact(d1, d2) {\n    return d1.getTime() === d2.getTime() && d1.offset === d2.offset;\n}\nexport function compare(d1, d2) {\n    return compareDates(d1, d2);\n}\nexport const compareTo = compare;\nexport function op_Addition(x, y) {\n    return add(x, y);\n}\nexport function op_Subtraction(x, y) {\n    return subtract(x, y);\n}\n//# sourceMappingURL=DateOffset.js.map","import { fromNumber, op_Division, op_Multiply, toNumber } from \"./Long\";\nimport { comparePrimitives, padLeftAndRightWithZeros, padWithZeros } from \"./Util\";\n// TimeSpan in runtime just becomes a number representing milliseconds\n/**\n * Calls:\n * - `Math.ceil` if the `value` is **negative**\n * - `Math.floor` if the `value` is **positive**\n * @param value Value to round\n */\nfunction signedRound(value) {\n    return value < 0 ? Math.ceil(value) : Math.floor(value);\n}\nexport function create(d = 0, h = 0, m = 0, s = 0, ms = 0) {\n    switch (arguments.length) {\n        case 1:\n            // ticks\n            return fromTicks(arguments[0]);\n        case 3:\n            // h,m,s\n            d = 0, h = arguments[0], m = arguments[1], s = arguments[2], ms = 0;\n            break;\n        default:\n            // d,h,m,s,ms\n            break;\n    }\n    return d * 86400000 + h * 3600000 + m * 60000 + s * 1000 + ms;\n}\nexport function fromTicks(ticks) {\n    return toNumber(op_Division(ticks, 10000));\n}\nexport function fromDays(d) {\n    return create(d, 0, 0, 0);\n}\nexport function fromHours(h) {\n    return create(h, 0, 0);\n}\nexport function fromMinutes(m) {\n    return create(0, m, 0);\n}\nexport function fromSeconds(s) {\n    return create(0, 0, s);\n}\nexport function days(ts) {\n    return signedRound(ts / 86400000);\n}\nexport function hours(ts) {\n    return signedRound(ts % 86400000 / 3600000);\n}\nexport function minutes(ts) {\n    return signedRound(ts % 3600000 / 60000);\n}\nexport function seconds(ts) {\n    return signedRound(ts % 60000 / 1000);\n}\nexport function milliseconds(ts) {\n    return signedRound(ts % 1000);\n}\nexport function ticks(ts) {\n    return op_Multiply(fromNumber(ts), 10000);\n}\nexport function totalDays(ts) {\n    return ts / 86400000;\n}\nexport function totalHours(ts) {\n    return ts / 3600000;\n}\nexport function totalMinutes(ts) {\n    return ts / 60000;\n}\nexport function totalSeconds(ts) {\n    return ts / 1000;\n}\nexport function negate(ts) {\n    return ts * -1;\n}\nexport function add(ts1, ts2) {\n    return ts1 + ts2;\n}\nexport function subtract(ts1, ts2) {\n    return ts1 - ts2;\n}\nexport const op_Addition = add;\nexport const op_Subtraction = subtract;\nexport const compare = comparePrimitives;\nexport const compareTo = comparePrimitives;\nexport function duration(x) {\n    return Math.abs(x);\n}\nexport function toString(ts, format = \"c\") {\n    if ([\"c\", \"g\", \"G\"].indexOf(format) === -1) {\n        throw new Error(\"Custom formats are not supported\");\n    }\n    const d = Math.abs(days(ts));\n    const h = Math.abs(hours(ts));\n    const m = Math.abs(minutes(ts));\n    const s = Math.abs(seconds(ts));\n    const ms = Math.abs(milliseconds(ts));\n    const sign = ts < 0 ? \"-\" : \"\";\n    // tslint:disable-next-line:max-line-length\n    return `${sign}${d === 0 && (format === \"c\" || format === \"g\") ? \"\" : format === \"c\" ? d + \".\" : d + \":\"}${format === \"g\" ? h : padWithZeros(h, 2)}:${padWithZeros(m, 2)}:${padWithZeros(s, 2)}${ms === 0 && (format === \"c\" || format === \"g\") ? \"\" : format === \"g\" ? \".\" + padWithZeros(ms, 3) : \".\" + padLeftAndRightWithZeros(ms, 3, 7)}`;\n}\nexport function parse(str) {\n    const firstDot = str.search(\"\\\\.\");\n    const firstColon = str.search(\"\\\\:\");\n    if (firstDot === -1 && firstColon === -1) { // There is only a day ex: 4\n        const d = parseInt(str, 0);\n        if (isNaN(d)) {\n            throw new Error(\"String was not recognized as a valid TimeSpan.\");\n        }\n        else {\n            return create(d, 0, 0, 0, 0);\n        }\n    }\n    if (firstColon > 0) { // process time part\n        // WIP: (-?)(((\\d+)\\.)?([0-9]|0[0-9]|1[0-9]|2[0-3]):(\\d+)(:\\d+(\\.\\d{1,7})?)?|\\d+(?:(?!\\.)))\n        // tslint:disable-next-line:max-line-length\n        const r = /^(-?)((\\d+)\\.)?(?:0*)([0-9]|0[0-9]|1[0-9]|2[0-3]):(?:0*)([0-5][0-9]|[0-9])(:(?:0*)([0-5][0-9]|[0-9]))?\\.?(\\d+)?$/.exec(str);\n        if (r != null && r[4] != null && r[5] != null) {\n            let d = 0;\n            let ms = 0;\n            let s = 0;\n            const sign = r[1] != null && r[1] === \"-\" ? -1 : 1;\n            const h = +r[4];\n            const m = +r[5];\n            if (r[3] != null) {\n                d = +r[3];\n            }\n            if (r[7] != null) {\n                s = +r[7];\n            }\n            if (r[8] != null) {\n                // Depending on the number of decimals passed, we need to adapt the numbers\n                switch (r[8].length) {\n                    case 1:\n                        ms = +r[8] * 100;\n                        break;\n                    case 2:\n                        ms = +r[8] * 10;\n                        break;\n                    case 3:\n                        ms = +r[8];\n                        break;\n                    case 4:\n                        ms = +r[8] / 10;\n                        break;\n                    case 5:\n                        ms = +r[8] / 100;\n                        break;\n                    case 6:\n                        ms = +r[8] / 1000;\n                        break;\n                    case 7:\n                        ms = +r[8] / 10000;\n                        break;\n                    default:\n                        throw new Error(\"String was not recognized as a valid TimeSpan.\");\n                }\n            }\n            return sign * create(d, h, m, s, ms);\n        }\n    }\n    throw new Error(\"String was not recognized as a valid TimeSpan.\");\n}\nexport function tryParse(v) {\n    try {\n        return [true, parse(v)];\n    }\n    catch (_err) {\n        return [false, 0];\n    }\n}\n//# sourceMappingURL=TimeSpan.js.map","\nnamespace Thoth.Json\n\n[<RequireQualifiedAccess>]\nmodule Decode =\n\n    open System.Globalization\n    open Fable.Core\n    open Fable.Core.JsInterop\n\n    module internal Helpers =\n        [<Emit(\"typeof $0\")>]\n        let jsTypeof (_ : JsonValue) : string = jsNative\n\n        [<Emit(\"$0 instanceof SyntaxError\")>]\n        let isSyntaxError (_ : JsonValue) : bool = jsNative\n\n        let inline getField (fieldName: string) (o: JsonValue) = o?(fieldName)\n        let inline isString (o: JsonValue) : bool = o :? string\n\n        let inline isBoolean (o: JsonValue) : bool = o :? bool\n\n        let inline isNumber (o: JsonValue) : bool = jsTypeof o = \"number\"\n\n        let inline isArray (o: JsonValue) : bool = JS.Array.isArray(o)\n\n        [<Emit(\"$0 === null ? false : (Object.getPrototypeOf($0 || false) === Object.prototype)\")>]\n        let isObject (_ : JsonValue) : bool = jsNative\n\n        let inline isNaN (o: JsonValue) : bool = JS.Number.isNaN(!!o)\n\n        let inline isNullValue (o: JsonValue): bool = isNull o\n\n        [<Emit(\"-2147483648 < $0 && $0 < 2147483647 && ($0 | 0) === $0\")>]\n        let isValidIntRange (_: JsonValue) : bool = jsNative\n\n        [<Emit(\"isFinite($0) && !($0 % 1)\")>]\n        let isIntFinite (_: JsonValue) : bool = jsNative\n\n        let isUndefined (o: JsonValue): bool = jsTypeof o = \"undefined\"\n\n        [<Emit(\"JSON.stringify($0, null, 4) + ''\")>]\n        let anyToString (_: JsonValue) : string = jsNative\n\n        let inline isFunction (o: JsonValue) : bool = jsTypeof o = \"function\"\n\n        let inline objectKeys (o: JsonValue) : string seq = upcast JS.Object.keys(o)\n        let inline asBool (o: JsonValue): bool = unbox o\n        let inline asInt (o: JsonValue): int = unbox o\n        let inline asFloat (o: JsonValue): float = unbox o\n        let inline asString (o: JsonValue): string = unbox o\n        let inline asArray (o: JsonValue): JsonValue[] = unbox o\n\n    let private genericMsg msg value newLine =\n        try\n            \"Expecting \"\n                + msg\n                + \" but instead got:\"\n                + (if newLine then \"\\n\" else \" \")\n                + (Helpers.anyToString value)\n        with\n            | _ ->\n                \"Expecting \"\n                + msg\n                + \" but decoder failed. Couldn't report given value due to circular structure.\"\n                + (if newLine then \"\\n\" else \" \")\n\n    let private errorToString (path : string, error) =\n        let reason =\n            match error with\n            | BadPrimitive (msg, value) ->\n                genericMsg msg value false\n            | BadType (msg, value) ->\n                genericMsg msg value true\n            | BadPrimitiveExtra (msg, value, reason) ->\n                genericMsg msg value false + \"\\nReason: \" + reason\n            | BadField (msg, value) ->\n                genericMsg msg value true\n            | BadPath (msg, value, fieldName) ->\n                genericMsg msg value true + (\"\\nNode `\" + fieldName + \"` is unkown.\")\n            | TooSmallArray (msg, value) ->\n                \"Expecting \" + msg + \".\\n\" + (Helpers.anyToString value)\n            | BadOneOf messages ->\n                \"The following errors were found:\\n\\n\" + String.concat \"\\n\\n\" messages\n            | FailMessage msg ->\n                \"The following `failure` occurred with the decoder: \" + msg\n\n        match error with\n        | BadOneOf _ ->\n            // Don't need to show the path here because each error case will show it's own path\n            reason\n        | _ ->\n            \"Error at: `\" + path + \"`\\n\" + reason\n\n    ///////////////\n    // Runners ///\n    /////////////\n\n    let fromValue (path : string) (decoder : Decoder<'T>) =\n        fun value ->\n            match decoder path value with\n            | Ok success ->\n                Ok success\n            | Error error ->\n                Error (errorToString error)\n\n    let fromString (decoder : Decoder<'T>) =\n        fun value ->\n            try\n                let json = JS.JSON.parse value\n                fromValue \"$\" decoder json\n            with\n                | ex when Helpers.isSyntaxError ex ->\n                    Error(\"Given an invalid JSON: \" + ex.Message)\n\n    let unsafeFromString (decoder : Decoder<'T>) =\n        fun value ->\n            match fromString decoder value with\n            | Ok x -> x\n            | Error msg -> failwith msg\n\n    [<System.Obsolete(\"Please use fromValue instead\")>]\n    let decodeValue (path : string) (decoder : Decoder<'T>) = fromValue path decoder\n\n    [<System.Obsolete(\"Please use fromString instead\")>]\n    let decodeString (decoder : Decoder<'T>) = fromString decoder\n\n    //////////////////\n    // Primitives ///\n    ////////////////\n\n    let string : Decoder<string> =\n        fun path value ->\n            if Helpers.isString value then\n                Ok(Helpers.asString value)\n            else\n                (path, BadPrimitive(\"a string\", value)) |> Error\n\n    let guid : Decoder<System.Guid> =\n        fun path value ->\n            if Helpers.isString value then\n                match System.Guid.TryParse (Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"a guid\", value)) |> Error\n            else (path, BadPrimitive(\"a guid\", value)) |> Error\n\n    let int : Decoder<int> =\n        fun path value ->\n            if Helpers.isNumber value then\n                if Helpers.isValidIntRange value then\n                    Ok(Helpers.asInt value)\n                else\n                    (path, BadPrimitiveExtra(\"an int\", value, \"Value was either too large or too small for an int\")) |> Error\n            elif Helpers.isString value then\n                match System.Int32.TryParse (Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"an int\", value)) |> Error\n            else\n                (path, BadPrimitive(\"an int\", value)) |> Error\n\n\n    let int64 : Decoder<int64> =\n        fun path value ->\n            if Helpers.isNumber value then\n                Helpers.asInt value |> int64 |> Ok\n            elif Helpers.isString value then\n                match System.Int64.TryParse (Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"an int64\", value)) |> Error\n            else (path, BadPrimitive(\"an int64\", value)) |> Error\n\n    let uint32 : Decoder<uint32> =\n        fun path value ->\n            if Helpers.isNumber value then\n                let x = Helpers.asFloat value\n                if x >= 0. && x <= (float System.UInt32.MaxValue) then\n                    Helpers.asInt value |> uint32 |> Ok\n                else\n                    (path, BadPrimitiveExtra(\"an uint32\", value, \"Value was either too large or too small for an uint32\")) |> Error\n            elif Helpers.isString value then\n                match System.UInt32.TryParse (Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"an uint32\", value)) |> Error\n            else (path, BadPrimitive(\"an uint32\", value)) |> Error\n\n    let uint64 : Decoder<uint64> =\n        fun path value ->\n            if Helpers.isNumber value then\n                let x = Helpers.asFloat value\n                if x >= 0. && x <= (float System.UInt64.MaxValue) then\n                    Helpers.asInt value |> uint64 |> Ok\n                else\n                    (path, BadPrimitiveExtra(\"an uint64\", value, \"Value was either too large or too small for an uint64\")) |> Error\n            elif Helpers.isString value then\n                match System.UInt64.TryParse (Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"an uint64\", value)) |> Error\n            else (path, BadPrimitive(\"an uint64\", value)) |> Error\n\n    let bigint : Decoder<bigint> =\n        fun path value ->\n            if Helpers.isNumber value then\n                Helpers.asInt value |> bigint |> Ok\n            elif Helpers.isString value then\n                // TODO: BigInt.TryParse has been added in Fable 2.1.4\n                // Don't use it for now to support lower Fable versions\n                try\n                    bigint.Parse (Helpers.asString value) |> Ok\n                with _ ->\n                    (path, BadPrimitive(\"a bigint\", value)) |> Error\n            else\n                (path, BadPrimitive(\"a bigint\", value)) |> Error\n\n    let bool : Decoder<bool> =\n        fun path value ->\n            if Helpers.isBoolean value then\n                Ok(Helpers.asBool value)\n            else\n                (path, BadPrimitive(\"a boolean\", value)) |> Error\n\n    let float : Decoder<float> =\n        fun path value ->\n            if Helpers.isNumber value then\n                Ok(Helpers.asFloat value)\n            else\n                (path, BadPrimitive(\"a float\", value)) |> Error\n\n    let decimal : Decoder<decimal> =\n        fun path value ->\n            if Helpers.isNumber value then\n                Helpers.asFloat value |> decimal |> Ok\n            elif Helpers.isString value then\n                match System.Decimal.TryParse (Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"a decimal\", value)) |> Error\n            else\n                (path, BadPrimitive(\"a decimal\", value)) |> Error\n\n    let datetime : Decoder<System.DateTime> =\n        fun path value ->\n            if Helpers.isString value then\n                match System.DateTime.TryParse (Helpers.asString value) with\n                | true, x -> x.ToUniversalTime() |> Ok\n                | _ -> (path, BadPrimitive(\"a datetime\", value)) |> Error\n            else\n                (path, BadPrimitive(\"a datetime\", value)) |> Error\n\n    let datetimeOffset : Decoder<System.DateTimeOffset> =\n        fun path value ->\n            if Helpers.isString value then\n                match System.DateTimeOffset.TryParse(Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"a datetimeoffset\", value)) |> Error\n            else\n                (path, BadPrimitive(\"a datetime\", value)) |> Error\n\n    let timespan : Decoder<System.TimeSpan> =\n        fun path value ->\n            if Helpers.isString value then\n                match System.TimeSpan.TryParse(Helpers.asString value) with\n                | true, x -> Ok x\n                | _ -> (path, BadPrimitive(\"a timespan\", value)) |> Error\n            else\n                (path, BadPrimitive(\"a timespan\", value)) |> Error\n\n    /////////////////////////\n    // Object primitives ///\n    ///////////////////////\n\n    let private decodeMaybeNull path (decoder : Decoder<'T>) value =\n        // The decoder may be an option decoder so give it an opportunity to check null values\n        match decoder path value with\n        | Ok v -> Ok(Some v)\n        | Error _ when Helpers.isNullValue value -> Ok None\n        | Error er -> Error er\n\n    let optional (fieldName : string) (decoder : Decoder<'value>) : Decoder<'value option> =\n        fun path value ->\n            if Helpers.isObject value then\n                let fieldValue = Helpers.getField fieldName value\n                if Helpers.isUndefined fieldValue then Ok None\n                else decodeMaybeNull (path + \".\" + fieldName) decoder fieldValue\n            else\n                Error(path, BadType(\"an object\", value))\n\n    let private badPathError fieldNames currentPath value =\n        let currentPath = defaultArg currentPath (\"$\"::fieldNames |> String.concat \".\")\n        let msg = \"an object with path `\" + (String.concat \".\" fieldNames) + \"`\"\n        Error(currentPath, BadPath (msg, value, List.tryLast fieldNames |> Option.defaultValue \"\"))\n\n    let optionalAt (fieldNames : string list) (decoder : Decoder<'value>) : Decoder<'value option> =\n        fun firstPath firstValue ->\n            ((firstPath, firstValue, None), fieldNames)\n            ||> List.fold (fun (curPath, curValue, res) field ->\n                match res with\n                | Some _ -> curPath, curValue, res\n                | None ->\n                    if Helpers.isNullValue curValue then\n                        let res = badPathError fieldNames (Some curPath) firstValue\n                        curPath, curValue, Some res\n                    elif Helpers.isObject curValue then\n                        let curValue = Helpers.getField field curValue\n                        curPath + \".\" + field, curValue, None\n                    else\n                        let res = Error(curPath, BadType(\"an object\", curValue))\n                        curPath, curValue, Some res)\n            |> function\n                | _, _, Some res -> res\n                | lastPath, lastValue, None ->\n                    if Helpers.isUndefined lastValue then Ok None\n                    else decodeMaybeNull lastPath decoder lastValue\n\n    let field (fieldName: string) (decoder : Decoder<'value>) : Decoder<'value> =\n        fun path value ->\n            if Helpers.isObject value then\n                let fieldValue = Helpers.getField fieldName value\n                if Helpers.isUndefined fieldValue then\n                    Error(path, BadField (\"an object with a field named `\" + fieldName + \"`\", value))\n                else\n                    decoder (path + \".\" + fieldName) fieldValue\n            else\n                Error(path, BadType(\"an object\", value))\n\n    let at (fieldNames: string list) (decoder : Decoder<'value>) : Decoder<'value> =\n        fun firstPath firstValue ->\n            ((firstPath, firstValue, None), fieldNames)\n            ||> List.fold (fun (curPath, curValue, res) field ->\n                match res with\n                | Some _ -> curPath, curValue, res\n                | None ->\n                    if Helpers.isNullValue curValue then\n                        let res = badPathError fieldNames (Some curPath) firstValue\n                        curPath, curValue, Some res\n                    elif Helpers.isObject curValue then\n                        let curValue = Helpers.getField field curValue\n                        if Helpers.isUndefined curValue then\n                            let res = badPathError fieldNames None firstValue\n                            curPath, curValue, Some res\n                        else\n                            curPath + \".\" + field, curValue, None\n                    else\n                        let res = Error(curPath, BadType(\"an object\", curValue))\n                        curPath, curValue, Some res)\n            |> function\n                | _, _, Some res -> res\n                | lastPath, lastValue, None ->\n                    decoder lastPath lastValue\n\n    let index (requestedIndex: int) (decoder : Decoder<'value>) : Decoder<'value> =\n        fun path value ->\n            let currentPath = path + \".[\" + (Operators.string requestedIndex) + \"]\"\n            if Helpers.isArray value then\n                let vArray = Helpers.asArray value\n                if requestedIndex < vArray.Length then\n                    decoder currentPath (vArray.[requestedIndex])\n                else\n                    let msg =\n                        \"a longer array. Need index `\"\n                            + (requestedIndex.ToString())\n                            + \"` but there are only `\"\n                            + (vArray.Length.ToString())\n                            + \"` entries\"\n\n                    (currentPath, TooSmallArray(msg, value))\n                    |> Error\n            else\n                (currentPath, BadPrimitive(\"an array\", value))\n                |> Error\n\n    let option (decoder : Decoder<'value>) : Decoder<'value option> =\n        fun path value ->\n            if Helpers.isNullValue value then Ok None\n            else decoder path value |> Result.map Some\n\n    //////////////////////\n    // Data structure ///\n    ////////////////////\n\n    let list (decoder : Decoder<'value>) : Decoder<'value list> =\n        fun path value ->\n            if Helpers.isArray value then\n                let mutable i = -1\n                let tokens = Helpers.asArray value\n                (Ok [], tokens) ||> Array.fold (fun acc value ->\n                    i <- i + 1\n                    match acc with\n                    | Error _ -> acc\n                    | Ok acc ->\n                        match decoder (path + \".[\" + (i.ToString()) + \"]\") value with\n                        | Error er -> Error er\n                        | Ok value -> Ok (value::acc))\n                |> Result.map List.rev\n            else\n                (path, BadPrimitive (\"a list\", value))\n                |> Error\n\n    let array (decoder : Decoder<'value>) : Decoder<'value array> =\n        fun path value ->\n            if Helpers.isArray value then\n                let mutable i = -1\n                let tokens = Helpers.asArray value\n                let arr = Array.zeroCreate tokens.Length\n                (Ok arr, tokens) ||> Array.fold (fun acc value ->\n                    i <- i + 1\n                    match acc with\n                    | Error _ -> acc\n                    | Ok acc ->\n                        match decoder (path + \".[\" + (i.ToString()) + \"]\") value with\n                        | Error er -> Error er\n                        | Ok value -> acc.[i] <- value; Ok acc)\n            else\n                (path, BadPrimitive (\"an array\", value))\n                |> Error\n\n    let keyValuePairs (decoder : Decoder<'value>) : Decoder<(string * 'value) list> =\n        fun path value ->\n            if Helpers.isObject value then\n                (Ok [], Helpers.objectKeys value) ||> Seq.fold (fun acc prop ->\n                    match acc with\n                    | Error _ -> acc\n                    | Ok acc ->\n                        match Helpers.getField prop value |> decoder path with\n                        | Error er -> Error er\n                        | Ok value -> (prop, value)::acc |> Ok)\n                |> Result.map List.rev\n            else\n                (path, BadPrimitive (\"an object\", value))\n                |> Error\n\n    //////////////////////////////\n    // Inconsistent Structure ///\n    ////////////////////////////\n\n    let oneOf (decoders : Decoder<'value> list) : Decoder<'value> =\n        fun path value ->\n            let rec runner (decoders : Decoder<'value> list) (errors : string list) =\n                match decoders with\n                | head::tail ->\n                    match fromValue path head value with\n                    | Ok v ->\n                        Ok v\n                    | Error error -> runner tail (errors @ [error])\n                | [] -> (path, BadOneOf errors) |> Error\n\n            runner decoders []\n\n    //////////////////////\n    // Fancy decoding ///\n    ////////////////////\n\n    let nil (output : 'a) : Decoder<'a> =\n        fun path value ->\n            if Helpers.isNullValue value then\n                Ok output\n            else\n                (path, BadPrimitive(\"null\", value)) |> Error\n\n    let value _ v = Ok v\n\n    let succeed (output : 'a) : Decoder<'a> =\n        fun _ _ ->\n            Ok output\n\n    let fail (msg: string) : Decoder<'a> =\n        fun path _ ->\n            (path, FailMessage msg) |> Error\n\n    let andThen (cb: 'a -> Decoder<'b>) (decoder : Decoder<'a>) : Decoder<'b> =\n        fun path value ->\n            match decoder path value with\n            | Error error -> Error error\n            | Ok result -> cb result path value\n\n    /////////////////////\n    // Map functions ///\n    ///////////////////\n\n    let map\n        (ctor : 'a -> 'value)\n        (d1 : Decoder<'a>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value with\n            | Ok v1 -> Ok (ctor v1)\n            | Error er -> Error er\n\n    let map2\n        (ctor : 'a -> 'b -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value with\n            | Ok v1, Ok v2 -> Ok (ctor v1 v2)\n            | Error er,_ -> Error er\n            | _,Error er -> Error er\n\n    let map3\n        (ctor : 'a -> 'b -> 'c -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value with\n            | Ok v1, Ok v2, Ok v3 -> Ok (ctor v1 v2 v3)\n            | Error er,_,_ -> Error er\n            | _,Error er,_ -> Error er\n            | _,_,Error er -> Error er\n\n    let map4\n        (ctor : 'a -> 'b -> 'c -> 'd -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>)\n        (d4 : Decoder<'d>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value, d4 path value with\n            | Ok v1, Ok v2, Ok v3, Ok v4 -> Ok (ctor v1 v2 v3 v4)\n            | Error er,_,_,_ -> Error er\n            | _,Error er,_,_ -> Error er\n            | _,_,Error er,_ -> Error er\n            | _,_,_,Error er -> Error er\n\n    let map5\n        (ctor : 'a -> 'b -> 'c -> 'd -> 'e -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>)\n        (d4 : Decoder<'d>)\n        (d5 : Decoder<'e>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value, d4 path value, d5 path value with\n            | Ok v1, Ok v2, Ok v3, Ok v4, Ok v5 -> Ok (ctor v1 v2 v3 v4 v5)\n            | Error er,_,_,_,_ -> Error er\n            | _,Error er,_,_,_ -> Error er\n            | _,_,Error er,_,_ -> Error er\n            | _,_,_,Error er,_ -> Error er\n            | _,_,_,_,Error er -> Error er\n\n    let map6\n        (ctor : 'a -> 'b -> 'c -> 'd -> 'e -> 'f -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>)\n        (d4 : Decoder<'d>)\n        (d5 : Decoder<'e>)\n        (d6 : Decoder<'f>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value, d4 path value, d5 path value, d6 path value with\n            | Ok v1, Ok v2, Ok v3, Ok v4, Ok v5, Ok v6 -> Ok (ctor v1 v2 v3 v4 v5 v6)\n            | Error er,_,_,_,_,_ -> Error er\n            | _,Error er,_,_,_,_ -> Error er\n            | _,_,Error er,_,_,_ -> Error er\n            | _,_,_,Error er,_,_ -> Error er\n            | _,_,_,_,Error er,_ -> Error er\n            | _,_,_,_,_,Error er -> Error er\n\n    let map7\n        (ctor : 'a -> 'b -> 'c -> 'd -> 'e -> 'f -> 'g -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>)\n        (d4 : Decoder<'d>)\n        (d5 : Decoder<'e>)\n        (d6 : Decoder<'f>)\n        (d7 : Decoder<'g>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value, d4 path value, d5 path value, d6 path value, d7 path value with\n            | Ok v1, Ok v2, Ok v3, Ok v4, Ok v5, Ok v6, Ok v7 -> Ok (ctor v1 v2 v3 v4 v5 v6 v7)\n            | Error er,_,_,_,_,_,_ -> Error er\n            | _,Error er,_,_,_,_,_ -> Error er\n            | _,_,Error er,_,_,_,_ -> Error er\n            | _,_,_,Error er,_,_,_ -> Error er\n            | _,_,_,_,Error er,_,_ -> Error er\n            | _,_,_,_,_,Error er,_ -> Error er\n            | _,_,_,_,_,_,Error er -> Error er\n\n    let map8\n        (ctor : 'a -> 'b -> 'c -> 'd -> 'e -> 'f -> 'g -> 'h -> 'value)\n        (d1 : Decoder<'a>)\n        (d2 : Decoder<'b>)\n        (d3 : Decoder<'c>)\n        (d4 : Decoder<'d>)\n        (d5 : Decoder<'e>)\n        (d6 : Decoder<'f>)\n        (d7 : Decoder<'g>)\n        (d8 : Decoder<'h>) : Decoder<'value> =\n        fun path value ->\n            match d1 path value, d2 path value, d3 path value, d4 path value, d5 path value, d6 path value, d7 path value, d8 path value with\n            | Ok v1, Ok v2, Ok v3, Ok v4, Ok v5, Ok v6, Ok v7, Ok v8 -> Ok (ctor v1 v2 v3 v4 v5 v6 v7 v8)\n            | Error er,_,_,_,_,_,_,_ -> Error er\n            | _,Error er,_,_,_,_,_,_ -> Error er\n            | _,_,Error er,_,_,_,_,_ -> Error er\n            | _,_,_,Error er,_,_,_,_ -> Error er\n            | _,_,_,_,Error er,_,_,_ -> Error er\n            | _,_,_,_,_,Error er,_,_ -> Error er\n            | _,_,_,_,_,_,Error er,_ -> Error er\n            | _,_,_,_,_,_,_,Error er -> Error er\n\n    let dict (decoder : Decoder<'value>) : Decoder<Map<string, 'value>> =\n        map Map.ofList (keyValuePairs decoder)\n\n    //////////////////////\n    // Object builder ///\n    ////////////////////\n\n    type IRequiredGetter =\n        abstract Field : string -> Decoder<'a> -> 'a\n        abstract At : List<string> -> Decoder<'a> -> 'a\n        abstract Raw : Decoder<'a> -> 'a\n\n    type IOptionalGetter =\n        abstract Field : string -> Decoder<'a> -> 'a option\n        abstract At : List<string> -> Decoder<'a> -> 'a option\n        abstract Raw : Decoder<'a> -> 'a option\n\n    type IGetters =\n        abstract Required: IRequiredGetter\n        abstract Optional: IOptionalGetter\n\n    let private unwrapWith (errors: ResizeArray<DecoderError>) path (decoder: Decoder<'T>) value: 'T =\n        match decoder path value with\n        | Ok v -> v\n        | Error er -> errors.Add(er); Unchecked.defaultof<'T>\n\n    type Getters<'T>(path: string, v: 'T) =\n        let mutable errors = ResizeArray<DecoderError>()\n        let required =\n            { new IRequiredGetter with\n                member __.Field (fieldName : string) (decoder : Decoder<_>) =\n                    unwrapWith errors path (field fieldName decoder) v\n                member __.At (fieldNames : string list) (decoder : Decoder<_>) =\n                    unwrapWith errors path (at fieldNames decoder) v\n                member __.Raw (decoder: Decoder<_>) =\n                    unwrapWith errors path decoder v }\n        let optional =\n            { new IOptionalGetter with\n                member __.Field (fieldName : string) (decoder : Decoder<_>) =\n                    unwrapWith errors path (optional fieldName decoder) v\n                member __.At (fieldNames : string list) (decoder : Decoder<_>) =\n                    unwrapWith errors path (optionalAt fieldNames decoder) v\n                member __.Raw (decoder: Decoder<_>) =\n                    match decoder path v with\n                    | Ok v -> Some v\n                    | Error((_, reason) as error) ->\n                        match reason with\n                        | BadPrimitive(_,v)\n                        | BadPrimitiveExtra(_,v,_)\n                        | BadType(_,v) ->\n                            if Helpers.isNullValue v then None\n                            else errors.Add(error); Unchecked.defaultof<_>\n                        | BadField _\n                        | BadPath _ -> None\n                        | TooSmallArray _\n                        | FailMessage _\n                        | BadOneOf _ -> errors.Add(error); Unchecked.defaultof<_> }\n        member __.Errors: _ list = Seq.toList errors\n        interface IGetters with\n            member __.Required = required\n            member __.Optional = optional\n\n    let object (builder: IGetters -> 'value) : Decoder<'value> =\n        fun path v ->\n            let getters = Getters(path, v)\n            let result = builder getters\n            match getters.Errors with\n            | [] -> Ok result\n            | fst::_ as errors ->\n                if errors.Length > 1 then\n                    let errors = List.map errorToString errors\n                    (path, BadOneOf errors) |> Error\n                else\n                    Error fst\n\n    ///////////////////////\n    // Tuples decoders ///\n    ////////////////////\n\n    let tuple2 (decoder1: Decoder<'T1>) (decoder2: Decoder<'T2>) : Decoder<'T1 * 'T2> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                succeed (v1, v2)\n            )\n        )\n\n    let tuple3 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>) : Decoder<'T1 * 'T2 * 'T3> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    succeed (v1, v2, v3)\n                )\n            )\n        )\n\n    let tuple4 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>)\n               (decoder4: Decoder<'T4>) : Decoder<'T1 * 'T2 * 'T3 * 'T4> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    index 3 decoder4\n                    |> andThen (fun v4 ->\n                        succeed (v1, v2, v3, v4)\n                    )\n                )\n            )\n        )\n\n    let tuple5 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>)\n               (decoder4: Decoder<'T4>)\n               (decoder5: Decoder<'T5>) : Decoder<'T1 * 'T2 * 'T3 * 'T4 * 'T5> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    index 3 decoder4\n                    |> andThen (fun v4 ->\n                        index 4 decoder5\n                        |> andThen (fun v5 ->\n                            succeed (v1, v2, v3, v4, v5)\n                        )\n                    )\n                )\n            )\n        )\n\n    let tuple6 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>)\n               (decoder4: Decoder<'T4>)\n               (decoder5: Decoder<'T5>)\n               (decoder6: Decoder<'T6>) : Decoder<'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    index 3 decoder4\n                    |> andThen (fun v4 ->\n                        index 4 decoder5\n                        |> andThen (fun v5 ->\n                            index 5 decoder6\n                            |> andThen (fun v6 ->\n                                succeed (v1, v2, v3, v4, v5, v6)\n                            )\n                        )\n                    )\n                )\n            )\n        )\n\n    let tuple7 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>)\n               (decoder4: Decoder<'T4>)\n               (decoder5: Decoder<'T5>)\n               (decoder6: Decoder<'T6>)\n               (decoder7: Decoder<'T7>) : Decoder<'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    index 3 decoder4\n                    |> andThen (fun v4 ->\n                        index 4 decoder5\n                        |> andThen (fun v5 ->\n                            index 5 decoder6\n                            |> andThen (fun v6 ->\n                                index 6 decoder7\n                                |> andThen (fun v7 ->\n                                    succeed (v1, v2, v3, v4, v5, v6, v7)\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n\n    let tuple8 (decoder1: Decoder<'T1>)\n               (decoder2: Decoder<'T2>)\n               (decoder3: Decoder<'T3>)\n               (decoder4: Decoder<'T4>)\n               (decoder5: Decoder<'T5>)\n               (decoder6: Decoder<'T6>)\n               (decoder7: Decoder<'T7>)\n               (decoder8: Decoder<'T8>) : Decoder<'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7 * 'T8> =\n        index 0 decoder1\n        |> andThen (fun v1 ->\n            index 1 decoder2\n            |> andThen (fun v2 ->\n                index 2 decoder3\n                |> andThen (fun v3 ->\n                    index 3 decoder4\n                    |> andThen (fun v4 ->\n                        index 4 decoder5\n                        |> andThen (fun v5 ->\n                            index 5 decoder6\n                            |> andThen (fun v6 ->\n                                index 6 decoder7\n                                |> andThen (fun v7 ->\n                                    index 7 decoder8\n                                    |> andThen (fun v8 ->\n                                        succeed (v1, v2, v3, v4, v5, v6, v7, v8)\n                                    )\n                                )\n                            )\n                        )\n                    )\n                )\n            )\n        )\n\n    //////////////////\n    // Reflection ///\n    ////////////////\n\n    open FSharp.Reflection\n\n    // As generics are erased by Fable, let's just do an unsafe cast for performance\n    let inline boxDecoder (d: Decoder<'T>): BoxedDecoder =\n        !!d // d >> Result.map box\n\n    let inline unboxDecoder (d: BoxedDecoder): Decoder<'T> =\n        !!d // d >> Result.map unbox\n\n    // This is used to force Fable use a generic comparer for map keys\n    let private toMap<'key, 'value when 'key: comparison> (xs: ('key*'value) seq) = Map.ofSeq xs\n    let private toSet<'key when 'key: comparison> (xs: 'key seq) = Set.ofSeq xs\n\n    let private autoObject (decoderInfos: (string * BoxedDecoder)[]) (path : string) (value: JsonValue) =\n        if not (Helpers.isObject value) then\n            (path, BadPrimitive (\"an object\", value)) |> Error\n        else\n            (decoderInfos, Ok []) ||> Array.foldBack (fun (name, decoder) acc ->\n                match acc with\n                | Error _ -> acc\n                | Ok result ->\n                    Helpers.getField name value\n                    |> decoder (path + \".\" + name)\n                    |> Result.map (fun v -> v::result))\n\n    let private autoObject2 (keyDecoder: BoxedDecoder) (valueDecoder: BoxedDecoder) (path : string) (value: JsonValue) =\n        if not (Helpers.isObject value) then\n            (path, BadPrimitive (\"an object\", value)) |> Error\n        else\n            (Ok [], Helpers.objectKeys(value)) ||> Seq.fold (fun acc name ->\n                match acc with\n                | Error _ -> acc\n                | Ok acc ->\n                    match keyDecoder path name with\n                    | Error er -> Error er\n                    | Ok k ->\n                        Helpers.getField name value\n                        |> valueDecoder (path + \".\" + name)\n                        |> function\n                            | Error er -> Error er\n                            | Ok v -> (k,v)::acc |> Ok)\n\n    let private mixedArray msg (decoders: BoxedDecoder[]) (path: string) (values: JsonValue[]): Result<JsonValue list, DecoderError> =\n        if decoders.Length <> values.Length then\n            (path, sprintf \"Expected %i %s but got %i\" decoders.Length msg values.Length\n            |> FailMessage) |> Error\n        else\n            (values, decoders, Ok [])\n            |||> Array.foldBack2 (fun value decoder acc ->\n                match acc with\n                | Error _ -> acc\n                | Ok result -> decoder path value |> Result.map (fun v -> v::result))\n\n    let rec private makeUnion extra isCamelCase t name (path : string) (values: JsonValue[]) =\n        let uci =\n            FSharpType.GetUnionCases(t, allowAccessToPrivateRepresentation=true)\n            |> Array.tryFind (fun x -> x.Name = name)\n        match uci with\n        | None -> (path, FailMessage(\"Cannot find case \" + name + \" in \" + t.FullName)) |> Error\n        | Some uci ->\n            if values.Length = 0 then\n                FSharpValue.MakeUnion(uci, [||], allowAccessToPrivateRepresentation=true) |> Ok\n            else\n                let decoders = uci.GetFields() |> Array.map (fun fi -> autoDecoder extra isCamelCase false fi.PropertyType)\n                mixedArray \"union fields\" decoders path values\n                |> Result.map (fun values -> FSharpValue.MakeUnion(uci, List.toArray values, allowAccessToPrivateRepresentation=true))\n\n    and private autoDecodeRecordsAndUnions extra (isCamelCase : bool) (isOptional : bool) (t: System.Type) : BoxedDecoder =\n        // Add the decoder to extra in case one of the fields is recursive\n        let decoderRef = ref Unchecked.defaultof<_>\n        let extra = extra |> Map.add t.FullName decoderRef\n        let decoder =\n            if FSharpType.IsRecord(t, allowAccessToPrivateRepresentation=true) then\n                let decoders =\n                    FSharpType.GetRecordFields(t, allowAccessToPrivateRepresentation=true)\n                    |> Array.map (fun fi ->\n                        let name =\n                            if isCamelCase then fi.Name.[..0].ToLowerInvariant() + fi.Name.[1..]\n                            else fi.Name\n                        name, autoDecoder extra isCamelCase false fi.PropertyType)\n                fun path value ->\n                    autoObject decoders path value\n                    |> Result.map (fun xs -> FSharpValue.MakeRecord(t, List.toArray xs, allowAccessToPrivateRepresentation=true))\n\n            elif FSharpType.IsUnion(t, allowAccessToPrivateRepresentation=true) then\n                fun path (value: JsonValue) ->\n                    if Helpers.isString(value) then\n                        let name = Helpers.asString value\n                        makeUnion extra isCamelCase t name path [||]\n                    elif Helpers.isArray(value) then\n                        let values = Helpers.asArray value\n                        let name = Helpers.asString values.[0]\n                        makeUnion extra isCamelCase t name path values.[1..]\n                    else (path, BadPrimitive(\"a string or array\", value)) |> Error\n\n            else\n                if isOptional then\n                    // The error will only happen at runtime if the value is not null\n                    // See https://github.com/MangelMaxime/Thoth/pull/84#issuecomment-444837773\n                    boxDecoder(fun path value -> Error(path, BadType(\"an extra coder for \" + t.FullName, value)))\n                else\n                    // Don't use failwithf here, for some reason F#/Fable compiles it as a function\n                    // when the return type is a function too, so it doesn't fail immediately\n                    sprintf \"Cannot generate auto decoder for %s. Please pass an extra decoder.\" t.FullName |> failwith\n        decoderRef := decoder\n        decoder\n\n    and private autoDecoder (extra: Map<string, ref<BoxedDecoder>>) isCamelCase (isOptional : bool) (t: System.Type) : BoxedDecoder =\n      let fullname = t.FullName\n      match Map.tryFind fullname extra with\n      | Some decoderRef -> fun path value -> decoderRef.contents path value\n      | None ->\n        if t.IsArray then\n            let decoder = t.GetElementType() |> autoDecoder extra isCamelCase false\n            array decoder |> boxDecoder\n        elif t.IsGenericType then\n            if FSharpType.IsTuple(t) then\n                let decoders = FSharpType.GetTupleElements(t) |> Array.map (autoDecoder extra isCamelCase false)\n                fun path value ->\n                    if Helpers.isArray value then\n                        mixedArray \"tuple elements\" decoders path (Helpers.asArray value)\n                        |> Result.map (fun xs -> FSharpValue.MakeTuple(List.toArray xs, t))\n                    else (path, BadPrimitive (\"an array\", value)) |> Error\n            else\n                let fullname = t.GetGenericTypeDefinition().FullName\n                if fullname = typedefof<obj option>.FullName then\n                    t.GenericTypeArguments.[0] |> (autoDecoder extra isCamelCase true) |> option |> boxDecoder\n                elif fullname = typedefof<obj list>.FullName then\n                    t.GenericTypeArguments.[0] |> (autoDecoder extra isCamelCase false) |> list |> boxDecoder\n                elif fullname = typedefof< Map<string, obj> >.FullName then\n                    let keyDecoder = t.GenericTypeArguments.[0] |> autoDecoder extra isCamelCase false\n                    let valueDecoder = t.GenericTypeArguments.[1] |> autoDecoder extra isCamelCase false\n                    oneOf [\n                        autoObject2 keyDecoder valueDecoder\n                        list (tuple2 keyDecoder valueDecoder)\n                    ] |> map (fun ar -> toMap (unbox ar) |> box)\n                elif fullname = typedefof< Set<string> >.FullName then\n                    let decoder = t.GenericTypeArguments.[0] |> autoDecoder extra isCamelCase false\n                    fun path value ->\n                        match array decoder path value with\n                        | Error er -> Error er\n                        | Ok ar -> toSet (unbox ar) |> box |> Ok\n                else\n                    autoDecodeRecordsAndUnions extra isCamelCase isOptional t\n        else\n            if fullname = typeof<bool>.FullName then\n                boxDecoder bool\n            elif fullname = typeof<string>.FullName then\n                boxDecoder string\n            elif fullname = typeof<int>.FullName then\n                boxDecoder int\n            elif fullname = typeof<uint32>.FullName then\n                boxDecoder uint32\n            elif fullname = typeof<float>.FullName then\n                boxDecoder float\n            // These number types require extra libraries in Fable. To prevent penalizing\n            // all users, extra decoders (withInt64, etc) must be passed when they're needed.\n\n            // elif fullname = typeof<int64>.FullName then\n            //     boxDecoder int64\n            // elif fullname = typeof<uint64>.FullName then\n            //     boxDecoder uint64\n            // elif fullname = typeof<bigint>.FullName then\n            //     boxDecoder bigint\n            // elif fullname = typeof<decimal>.FullName then\n            //     boxDecoder decimal\n            elif fullname = typeof<System.DateTime>.FullName then\n                boxDecoder datetime\n            elif fullname = typeof<System.DateTimeOffset>.FullName then\n                boxDecoder datetimeOffset\n            elif fullname = typeof<System.TimeSpan>.FullName then\n                boxDecoder timespan\n            elif fullname = typeof<System.Guid>.FullName then\n                boxDecoder guid\n            elif fullname = typeof<obj>.FullName then\n                fun _ v -> Ok v\n            else autoDecodeRecordsAndUnions extra isCamelCase isOptional t\n\n    let private makeExtra (extra: ExtraCoders option) =\n        match extra with\n        | None -> Map.empty\n        | Some e -> Map.map (fun _ (_,dec) -> ref dec) e\n\n    type Auto =\n        /// ATTENTION: Use this only when other arguments (isCamelCase, extra) don't change\n        static member generateDecoderCached<'T>(?isCamelCase : bool, ?extra: ExtraCoders, [<Inject>] ?resolver: ITypeResolver<'T>): Decoder<'T> =\n            let t = Util.resolveType resolver\n            Util.CachedDecoders.GetOrAdd(t.FullName, fun _ ->\n                let isCamelCase = defaultArg isCamelCase false\n                autoDecoder (makeExtra extra) isCamelCase false t) |> unboxDecoder\n\n        static member generateDecoder<'T>(?isCamelCase : bool, ?extra: ExtraCoders, [<Inject>] ?resolver: ITypeResolver<'T>): Decoder<'T> =\n            let isCamelCase = defaultArg isCamelCase false\n            Util.resolveType resolver\n            |> autoDecoder (makeExtra extra) isCamelCase false |> unboxDecoder\n\n        static member fromString<'T>(json: string, ?isCamelCase : bool, ?extra: ExtraCoders, [<Inject>] ?resolver: ITypeResolver<'T>): Result<'T, string> =\n            let decoder = Auto.generateDecoder(?isCamelCase=isCamelCase, ?extra=extra, ?resolver=resolver)\n            fromString decoder json\n\n        static member unsafeFromString<'T>(json: string, ?isCamelCase : bool, ?extra: ExtraCoders, [<Inject>] ?resolver: ITypeResolver<'T>): 'T =\n            let decoder = Auto.generateDecoder(?isCamelCase=isCamelCase, ?extra=extra, ?resolver=resolver)\n            match fromString decoder json with\n            | Ok x -> x\n            | Error msg -> failwith msg\n","module Model\r\nopen System\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Import\r\nopen Browser.WebStorage\r\nopen Common\r\n\r\ntype AnswerState = | NeedsReview | Good | NoAnswer | ChromeOnly\r\nmodule Seq =\r\n    let every pred = not << Seq.exists (not << pred)\r\n\r\nmodule Enums =\r\n    type MathKey = | Number of string | Enter | Backspace | HintKey\r\n    type MathType = | Plus | Minus | Times | Divide\r\n    type MathBase = Binary | Decimal | Hex\r\n    let numberKey x = Number(x.ToString())\r\n    let DecimalKeys = [1..9] |> List.map numberKey|> (fun x -> List.append x [Backspace; numberKey 0; Enter; HintKey]) |> Array.ofList\r\n    let HexKeys = [1..9] |> List.map numberKey |> (fun x -> List.append x [Number \"A\"; Number \"B\"; Number \"C\"; Number \"D\"; Number \"E\"; Number \"F\"; Backspace; numberKey 0; Enter; HintKey]) |> Array.ofList\r\n    let BinaryKeys = [|Backspace; numberKey 1; numberKey 0; Enter; HintKey|]\r\n    let mathTypeMappings = [Plus, \"+\"; Minus, \"−\"; Times, \"×\"; Divide, \"÷\"]\r\n    let keysOf = function Binary -> BinaryKeys | Decimal -> DecimalKeys | Hex -> HexKeys\r\n\r\nopen Enums\r\ntype SoundState = On | Off | CheerOnly | BombOnly\r\ntype Settings = {\r\n    size: int\r\n    mathBase: Enums.MathBase\r\n    mathType: Enums.MathType\r\n    autoEnter: bool\r\n    progressiveDifficulty: bool\r\n    sound: SoundState\r\n    } with\r\n    static member Default = {\r\n        size = 12\r\n        mathBase = Decimal\r\n        mathType = Enums.Times\r\n        autoEnter = false\r\n        progressiveDifficulty = true\r\n        sound = On\r\n    }\r\n\r\nlet FormatByBase mathBase n =\r\n    match mathBase with\r\n    | Decimal -> n.ToString()\r\n    | Binary ->\r\n        let rec binPrint n =\r\n            if n > 1 then\r\n                let next = (binPrint (n / 2))\r\n                next + ((n % 2).ToString())\r\n            else\r\n                n.ToString()\r\n        binPrint n\r\n    | Hex ->\r\n        let hexDigit n =\r\n            match n % 16 with\r\n                | x when x >= 10 -> (65 + (x - 10)) |> char |> string\r\n                | x -> x.ToString()\r\n        let rec hexPrint n =\r\n            if n > 15 then\r\n                let next = hexPrint (n/16)\r\n                let thisDigit = hexDigit n\r\n                next + thisDigit\r\n            else\r\n                hexDigit n\r\n        hexPrint n\r\n\r\nlet ComputeHints settings =\r\n    let size, mathBase, mathType = settings.size, settings.mathBase, settings.mathType\r\n    match mathType with\r\n    | Enums.Plus | Enums.Minus ->\r\n        [for x in 0..size ->\r\n            [for y in 0..size ->\r\n                FormatByBase mathBase (x+y), (if x = 0 || y = 0 then ChromeOnly else NoAnswer)\r\n                ]\r\n            ]\r\n    | Enums.Times | Enums.Divide ->\r\n        [for x in 1..size ->\r\n            [for y in 1..size ->\r\n                FormatByBase mathBase (x*y), NoAnswer\r\n                ]\r\n            ]\r\n\r\nlet ComputeProblem opType j k mathBase =\r\n    let makeProb lhs rhs =\r\n        let symbol = Enums.mathTypeMappings |> Seq.find (fun (k,v) -> k = opType) |> snd\r\n        sprintf \"%s %s %s\" (FormatByBase mathBase lhs) symbol (FormatByBase mathBase rhs)\r\n    let prob, ans =\r\n        match opType with\r\n        | Enums.Plus -> makeProb j k, FormatByBase mathBase (j + k)\r\n        | Enums.Minus ->\r\n            makeProb (j+k) j, FormatByBase mathBase k\r\n        | Enums.Times -> makeProb j k, FormatByBase mathBase (j * k)\r\n        | Enums.Divide ->\r\n            makeProb (j*k) j, FormatByBase mathBase k\r\n    (j, k, prob, ans)\r\n\r\nlet FormatProblem mathType mathBase lhs rhs =\r\n    let symbol = Enums.mathTypeMappings |> Seq.find (fun (k,v) -> k = mathType) |> snd\r\n    sprintf \"%s %s %s\" (FormatByBase mathBase lhs) symbol (FormatByBase mathBase rhs)\r\n\r\n// I don't trust JS.Math.random() (samples don't seem very independent) so instead of using it directly via Math.random() < prob-as-decimal I transform it a bit\r\nlet prob percentage =\r\n    JS.Math.random() < (float percentage)/100.\r\n\r\nlet inline persist key value =\r\n    localStorage.[key:string] <- Thoth.Json.Encode.Auto.toString(1, value)\r\n\r\nlet inline retrievePersisted key defaultValue =\r\n    match localStorage.[key:string] with\r\n    | null -> defaultValue\r\n    | rawValue ->\r\n        match Thoth.Json.Decode.Auto.fromString(unbox<string> rawValue) with\r\n        | Ok v -> v\r\n        | Error _ -> defaultValue\r\n\r\ntype Review = { lhs: int; rhs: int; problem: string; guess: string; correctAnswer: string }\r\n\r\nlet coordsFor mathType x y =\r\n    match mathType with\r\n        | Enums.Plus | Enums.Minus -> x,y\r\n        | Enums.Times | Enums.Divide -> x-1,y-1\r\nlet cellFor (cells: _ list list) mathType x y =\r\n    let i,j = coordsFor mathType x y\r\n    cells.[i].[j] |> snd\r\n\r\ntype Game = {\r\n    settings: Settings\r\n    reviewList: Review list\r\n    cells: (string * AnswerState) list list\r\n    problem: {| lhs: int; rhs: int; question: string; answer: string |}\r\n    score: int\r\n    currentAnswer: string\r\n    messageToUser: string option\r\n    showOptions: bool\r\n    showHints: bool\r\n    } with\r\n    static member Fresh(?settings) =\r\n        let settings = match settings with | Some v -> v | None -> retrievePersisted \"settings\" Settings.Default\r\n        {\r\n            settings = settings\r\n            reviewList = []\r\n            cells = ComputeHints settings\r\n            problem = Unchecked.defaultof<_>\r\n            score = 0\r\n            currentAnswer = \"\"\r\n            messageToUser = None\r\n            showOptions = false\r\n            showHints = false\r\n        } |> Game.nextProblem\r\n    static member nextProblem (g: Game) =\r\n        // 30% of the time it will backtrack to one you got wrong before\r\n        if(prob 30 && g.reviewList.Length > 0) then\r\n            let review = g.reviewList.[(JS.Math.random() * 1000. |> int) % g.reviewList.Length]\r\n            { g with problem = {| lhs = review.lhs; rhs = review.rhs; question = review.problem; answer = review.correctAnswer |} }\r\n        else\r\n            let settings = g.settings\r\n            // in progressive difficulty mode, 70% of the time, it will pick a problem you haven't answered correctly yet until you answer all of them, then it will grow (with 100% probability)\r\n            let flattenedCells = Seq.concat g.cells\r\n            let allCorrect = flattenedCells |> Seq.every (fun (_, c) -> match c with | Good | ChromeOnly -> true | _ -> false)\r\n            if (settings.progressiveDifficulty && (prob 70 || allCorrect)) then\r\n                // if all already answered, grow to next level\r\n                let cells, settings =\r\n                    // note that <> does not work right with union types currently so we have to use match instead\r\n                    if allCorrect then\r\n                        let settings = { settings with size = settings.size + 1 }\r\n                        let newHints =\r\n                            ComputeHints settings\r\n                            |> List.mapi(fun i row ->\r\n                                row |> List.mapi(fun j cell ->\r\n                                        if i < g.cells.Length && j < g.cells.[i].Length then\r\n                                            g.cells.[i].[j]\r\n                                        else\r\n                                            cell\r\n                                    )\r\n                                )\r\n                        newHints, settings\r\n                    else g.cells, settings\r\n                let nextNumber() = (JS.Math.random() * (float settings.size) |> int) + 1\r\n                let mutable j, k = nextNumber(), nextNumber()\r\n                // note that <> does not work right with union types currently so we have to use match instead\r\n                while(match (cellFor cells settings.mathType j k) with\r\n                        | Good -> true\r\n                        | _ -> false) do\r\n                    j <- nextNumber()\r\n                    k <- nextNumber()\r\n                let lhs, rhs, problem, answer = ComputeProblem settings.mathType j k settings.mathBase\r\n                { g with settings = settings; cells = cells; problem = {|lhs = lhs; rhs = rhs; question = problem; answer = answer |}}\r\n            else\r\n                let nextNumber() = (JS.Math.random() * (float settings.size) |> int) + 1\r\n                let j, k = nextNumber(), nextNumber()\r\n                let lhs, rhs, problem, answer = ComputeProblem settings.mathType j k settings.mathBase\r\n                { g with problem = {|lhs = lhs; rhs = rhs; question = problem; answer = answer |}}\r\n    static member CurrentProblem (this: Game) =\r\n        sprintf \"%s = %s\" this.problem.question (if this.currentAnswer.Length > 0 then this.currentAnswer else \"??\")\r\n    static member TryAdvance (this: Game) onCorrect onIncorrect =\r\n        let currentAnswer = this.currentAnswer\r\n        if this.currentAnswer.Length > 0 then\r\n            let problem = this.problem\r\n            let (x,y) = coordsFor this.settings.mathType problem.lhs problem.rhs\r\n            let updateCells newValue =\r\n                this.cells |> List.mapi(fun i row ->\r\n                        if x <> i then row else\r\n                            row |> List.mapi(fun j cell ->\r\n                                if y <> j then cell else (fst cell, newValue))\r\n                    )\r\n            if problem.answer = currentAnswer then\r\n                onCorrect()\r\n                let reviewList' =\r\n                    if this.reviewList |> Seq.exists (fun review -> (review.lhs, review.rhs) = (problem.lhs, problem.rhs)) then\r\n                    // now that they've got it correct, eliminate it from the review list\r\n                        this.reviewList |> List.filter (fun review -> (review.lhs, review.rhs) <> (problem.lhs, problem.rhs))\r\n                    else this.reviewList\r\n                { this with currentAnswer = \"\"; score = this.score + 100; cells = updateCells Good; reviewList = reviewList' }\r\n            else\r\n                onIncorrect()\r\n                let reviewList' =\r\n                    { Review.lhs = problem.lhs; rhs = problem.rhs; problem = problem.question; correctAnswer = problem.answer; guess = this.currentAnswer } :: this.reviewList\r\n                { this with currentAnswer = \"\"; score = this.score - 100; cells = updateCells NeedsReview; reviewList = reviewList' }\r\n            |> Game.nextProblem\r\n        else\r\n            this\r\n\r\n#if LEGACY\r\n\r\n/// PersistentSetting is a setting which is cached between sessions in local storage\r\ntype PersistentSetting<'a when 'a: equality>(name: string, defaultValue: 'a) =\r\n    let key = \"Setting.\" + name\r\n    let mutable storedValue =\r\n        let stringVal = localStorage.[key]\r\n        if stringVal = null then\r\n            defaultValue\r\n        else\r\n            match Thoth.Json.Decode.Auto.fromString<'a>(unbox<string> stringVal) with\r\n            | Ok v -> v\r\n            | Error e -> failwithf \"Could not decode %A\" stringVal\r\n    member this.Value\r\n        with get() = storedValue\r\n        and set(v) =\r\n            if storedValue <> v then\r\n                localStorage.[key] <- Thoth.Json.Encode.Auto.toString(1, v)\r\n                storedValue <- v\r\ntype MathProblems(onCorrect: _ -> _, onIncorrect: _ -> _) =\r\n    let size = PersistentSetting(\"size\", 12);\r\n    let mathBase = PersistentSetting(\"mathBase\", Enums.Decimal)\r\n    let mathType = PersistentSetting(\"mathType\", Enums.Times)\r\n    let autoEnter = PersistentSetting(\"autoEnter\", false)\r\n    let progressiveDifficulty = PersistentSetting(\"progressiveDifficulty\", false)\r\n    let mutable reviewList = []\r\n    let mutable cells : (string * AnswerState) list list = ComputeHints size.Value mathBase.Value mathType.Value\r\n    let cellFor mathType x y =\r\n        match mathType with\r\n            | Enums.Plus | Enums.Minus -> cells.[x].[y] |> snd\r\n            | Enums.Times | Enums.Divide -> cells.[x-1].[y-1] |> snd\r\n    let mutable problem = Unchecked.defaultof<_>\r\n    let mutable score = 0\r\n    let mutable currentAnswer = \"\";\r\n    member this.MathBase\r\n        with get() = mathBase.Value\r\n        and set(v) =\r\n            mathBase.Value <- v\r\n    member this.MaxNum\r\n        with get() = size.Value\r\n        and set(v) =\r\n            size.Value <- v\r\n    member this.AutoEnter\r\n        with get() = autoEnter.Value\r\n        and set(v) = autoEnter.Value <- v\r\n    member this.ProgressiveDifficulty\r\n        with get() = progressiveDifficulty.Value\r\n        and set(v) = progressiveDifficulty.Value <- v\r\n    member this.MathType\r\n        with get() = mathType.Value\r\n        and set(v) = mathType.Value <- v\r\n    member this.Score = score\r\n    member this.CurrentProblem =\r\n        let _, _, prob, _ = problem\r\n        sprintf \"%s = %s\" prob (if currentAnswer.Length > 0 then currentAnswer else \"??\")\r\n    member this.HintCells =\r\n        cells\r\n    member this.ReviewList =\r\n        reviewList\r\n    member this.KeyPress (n: int) =\r\n        // ignore keys that don't apply to this base\r\n        if n < (match mathBase.Value with Decimal -> 10 | Hex -> 16 | Binary -> 2) then\r\n            currentAnswer <- currentAnswer + (if n < 10 then n.ToString() else (65 + (n - 10)) |> char |> string)\r\n        //if this.AutoEnter then\r\n            //let _, _, _, ans = problem\r\n            //if ans.Length = currentAnswer.Length then\r\n            //    this.Advance()\r\n    member this.Backspace() =\r\n        if(currentAnswer.Length > 0) then\r\n            currentAnswer <- currentAnswer.Substring(0, currentAnswer.Length - 1)\r\n    member this.Reset() =\r\n        score <- 0\r\n        currentAnswer <- \"\"\r\n        reviewList <- []\r\n        cells <- ComputeHints size.Value mathBase.Value mathType.Value\r\n        //problem <- nextProblem()\r\n    member this.Keys = match mathBase.Value with | Decimal -> DecimalKeys | Hex -> HexKeys | Binary -> BinaryKeys\r\n\r\n#endif\r\n","export class CancellationToken {\n    constructor(cancelled = false) {\n        this._id = 0;\n        this._cancelled = cancelled;\n        this._listeners = new Map();\n    }\n    get isCancelled() {\n        return this._cancelled;\n    }\n    cancel() {\n        if (!this._cancelled) {\n            this._cancelled = true;\n            for (const [, listener] of this._listeners) {\n                listener();\n            }\n        }\n    }\n    addListener(f) {\n        const id = this._id;\n        this._listeners.set(this._id++, f);\n        return id;\n    }\n    removeListener(id) {\n        return this._listeners.delete(id);\n    }\n    register(f, state) {\n        const $ = this;\n        const id = this.addListener(state == null ? f : () => f(state));\n        return { Dispose() { $.removeListener(id); } };\n    }\n}\nexport class OperationCanceledError extends Error {\n    constructor() {\n        super(\"The operation was canceled\");\n        Object.setPrototypeOf(this, OperationCanceledError.prototype);\n    }\n}\nexport class Trampoline {\n    static get maxTrampolineCallCount() {\n        return 2000;\n    }\n    constructor() {\n        this.callCount = 0;\n    }\n    incrementAndCheck() {\n        return this.callCount++ > Trampoline.maxTrampolineCallCount;\n    }\n    hijack(f) {\n        this.callCount = 0;\n        setTimeout(f, 0);\n    }\n}\nexport function protectedCont(f) {\n    return (ctx) => {\n        if (ctx.cancelToken.isCancelled) {\n            ctx.onCancel(new OperationCanceledError());\n        }\n        else if (ctx.trampoline.incrementAndCheck()) {\n            ctx.trampoline.hijack(() => {\n                try {\n                    f(ctx);\n                }\n                catch (err) {\n                    ctx.onError(err);\n                }\n            });\n        }\n        else {\n            try {\n                f(ctx);\n            }\n            catch (err) {\n                ctx.onError(err);\n            }\n        }\n    };\n}\nexport function protectedBind(computation, binder) {\n    return protectedCont((ctx) => {\n        computation({\n            onSuccess: (x) => {\n                try {\n                    binder(x)(ctx);\n                }\n                catch (ex) {\n                    ctx.onError(ex);\n                }\n            },\n            onError: ctx.onError,\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function protectedReturn(value) {\n    return protectedCont((ctx) => ctx.onSuccess(value));\n}\nexport class AsyncBuilder {\n    Bind(computation, binder) {\n        return protectedBind(computation, binder);\n    }\n    Combine(computation1, computation2) {\n        return this.Bind(computation1, () => computation2);\n    }\n    Delay(generator) {\n        return protectedCont((ctx) => generator()(ctx));\n    }\n    For(sequence, body) {\n        const iter = sequence[Symbol.iterator]();\n        let cur = iter.next();\n        return this.While(() => !cur.done, this.Delay(() => {\n            const res = body(cur.value);\n            cur = iter.next();\n            return res;\n        }));\n    }\n    Return(value) {\n        return protectedReturn(value);\n    }\n    ReturnFrom(computation) {\n        return computation;\n    }\n    TryFinally(computation, compensation) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: (x) => {\n                    compensation();\n                    ctx.onSuccess(x);\n                },\n                onError: (x) => {\n                    compensation();\n                    ctx.onError(x);\n                },\n                onCancel: (x) => {\n                    compensation();\n                    ctx.onCancel(x);\n                },\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n            });\n        });\n    }\n    TryWith(computation, catchHandler) {\n        return protectedCont((ctx) => {\n            computation({\n                onSuccess: ctx.onSuccess,\n                onCancel: ctx.onCancel,\n                cancelToken: ctx.cancelToken,\n                trampoline: ctx.trampoline,\n                onError: (ex) => {\n                    try {\n                        catchHandler(ex)(ctx);\n                    }\n                    catch (ex2) {\n                        ctx.onError(ex2);\n                    }\n                },\n            });\n        });\n    }\n    Using(resource, binder) {\n        return this.TryFinally(binder(resource), () => resource.Dispose());\n    }\n    While(guard, computation) {\n        if (guard()) {\n            return this.Bind(computation, () => this.While(guard, computation));\n        }\n        else {\n            return this.Return(void 0);\n        }\n    }\n    Zero() {\n        return protectedCont((ctx) => ctx.onSuccess(void 0));\n    }\n}\nexport const singleton = new AsyncBuilder();\n//# sourceMappingURL=AsyncBuilder.js.map","import { OperationCanceledError, Trampoline } from \"./AsyncBuilder\";\nimport { CancellationToken } from \"./AsyncBuilder\";\nimport { protectedCont } from \"./AsyncBuilder\";\nimport { protectedBind } from \"./AsyncBuilder\";\nimport { protectedReturn } from \"./AsyncBuilder\";\nimport { choice1, choice2 } from \"./Option\";\nimport { map } from \"./Seq\";\n// Implemented just for type references\nexport default class Async {\n}\nfunction emptyContinuation(x) {\n    // NOP\n}\n// MakeAsync: body:(AsyncActivation<'T> -> AsyncReturn) -> Async<'T>\nexport function makeAsync(body) {\n    return body;\n}\n// Invoke: computation: Async<'T> -> ctxt:AsyncActivation<'T> -> AsyncReturn\nexport function invoke(computation, ctx) {\n    return computation(ctx);\n}\n// CallThenInvoke: ctxt:AsyncActivation<'T> -> result1:'U -> part2:('U -> Async<'T>) -> AsyncReturn\nexport function callThenInvoke(ctx, result1, part2) {\n    return part2(result1)(ctx);\n}\n// Bind: ctxt:AsyncActivation<'T> -> part1:Async<'U> -> part2:('U -> Async<'T>) -> AsyncReturn\nexport function bind(ctx, part1, part2) {\n    return protectedBind(part1, part2)(ctx);\n}\nexport function createCancellationToken(arg) {\n    const token = new CancellationToken(typeof arg === \"boolean\" ? arg : false);\n    if (typeof arg === \"number\") {\n        setTimeout(() => { token.cancel(); }, arg);\n    }\n    return token;\n}\nexport function cancel(token) {\n    token.cancel();\n}\nexport function cancelAfter(token, ms) {\n    setTimeout(() => { token.cancel(); }, ms);\n}\nexport function isCancellationRequested(token) {\n    return token != null && token.isCancelled;\n}\nexport function startChild(computation) {\n    const promise = startAsPromise(computation);\n    // JS Promises are hot, computation has already started\n    // but we delay returning the result\n    return protectedCont((ctx) => protectedReturn(awaitPromise(promise))(ctx));\n}\nexport function awaitPromise(p) {\n    return fromContinuations((conts) => p.then(conts[0]).catch((err) => (err instanceof OperationCanceledError\n        ? conts[2] : conts[1])(err)));\n}\nexport function cancellationToken() {\n    return protectedCont((ctx) => ctx.onSuccess(ctx.cancelToken));\n}\nexport const defaultCancellationToken = new CancellationToken();\nexport function catchAsync(work) {\n    return protectedCont((ctx) => {\n        work({\n            onSuccess: (x) => ctx.onSuccess(choice1(x)),\n            onError: (ex) => ctx.onSuccess(choice2(ex)),\n            onCancel: ctx.onCancel,\n            cancelToken: ctx.cancelToken,\n            trampoline: ctx.trampoline,\n        });\n    });\n}\nexport function fromContinuations(f) {\n    return protectedCont((ctx) => f([ctx.onSuccess, ctx.onError, ctx.onCancel]));\n}\nexport function ignore(computation) {\n    return protectedBind(computation, (x) => protectedReturn(void 0));\n}\nexport function parallel(computations) {\n    return awaitPromise(Promise.all(map((w) => startAsPromise(w), computations)));\n}\nexport function sleep(millisecondsDueTime) {\n    return protectedCont((ctx) => {\n        let tokenId;\n        const timeoutId = setTimeout(() => {\n            ctx.cancelToken.removeListener(tokenId);\n            ctx.onSuccess(void 0);\n        }, millisecondsDueTime);\n        tokenId = ctx.cancelToken.addListener(() => {\n            clearTimeout(timeoutId);\n            ctx.onCancel(new OperationCanceledError());\n        });\n    });\n}\nexport function start(computation, cancellationToken) {\n    return startWithContinuations(computation, cancellationToken);\n}\nexport function startImmediate(computation, cancellationToken) {\n    return start(computation, cancellationToken);\n}\nexport function startWithContinuations(computation, continuation, exceptionContinuation, cancellationContinuation, cancelToken) {\n    if (typeof continuation !== \"function\") {\n        cancelToken = continuation;\n        continuation = null;\n    }\n    const trampoline = new Trampoline();\n    computation({\n        onSuccess: continuation ? continuation : emptyContinuation,\n        onError: exceptionContinuation ? exceptionContinuation : emptyContinuation,\n        onCancel: cancellationContinuation ? cancellationContinuation : emptyContinuation,\n        cancelToken: cancelToken ? cancelToken : defaultCancellationToken,\n        trampoline,\n    });\n}\nexport function startAsPromise(computation, cancellationToken) {\n    return new Promise((resolve, reject) => startWithContinuations(computation, resolve, reject, reject, cancellationToken ? cancellationToken : defaultCancellationToken));\n}\n//# sourceMappingURL=Async.js.map","namespace Elmish\nopen System\n\n[<Struct>]\ntype internal RingState<'item> =\n    | Writable of wx:'item array * ix:int\n    | ReadWritable of rw:'item array * wix:int * rix:int\n\ntype internal RingBuffer<'item>(size) =\n    let doubleSize ix (items: 'item array) =\n        seq { yield! items |> Seq.skip ix\n              yield! items |> Seq.take ix\n              for _ in 0..items.Length do\n                yield Unchecked.defaultof<'item> }\n        |> Array.ofSeq\n\n    let mutable state : 'item RingState =\n        Writable (Array.zeroCreate (max size 10), 0)\n\n    member __.Pop() =\n        match state with\n        | ReadWritable (items, wix, rix) ->\n            let rix' = (rix + 1) % items.Length\n            match rix' = wix with\n            | true -> \n                state <- Writable(items, wix)\n            | _ ->\n                state <- ReadWritable(items, wix, rix')\n            Some items.[rix]\n        | _ ->\n            None\n\n    member __.Push (item:'item) =\n        match state with\n        | Writable (items, ix) ->\n            items.[ix] <- item\n            let wix = (ix + 1) % items.Length\n            state <- ReadWritable(items, wix, ix)\n        | ReadWritable (items, wix, rix) ->\n            items.[wix] <- item\n            let wix' = (wix + 1) % items.Length\n            match wix' = rix with\n            | true -> \n                state <- ReadWritable(items |> doubleSize rix, items.Length, 0)\n            | _ -> \n                state <- ReadWritable(items, wix', rix)","(**\nCmd\n---------\nCore abstractions for dispatching messages in Elmish.\n\n*)\n\nnamespace Elmish\n\nopen System\n\n/// Dispatch - feed new message into the processing loop\ntype Dispatch<'msg> = 'msg -> unit\n\n/// Subscription - return immediately, but may schedule dispatch of a message at any time\ntype Sub<'msg> = Dispatch<'msg> -> unit\n\n/// Cmd - container for subscriptions that may produce messages\ntype Cmd<'msg> = Sub<'msg> list\n\n/// Cmd module for creating and manipulating commands\n[<RequireQualifiedAccess>]\nmodule Cmd =\n    /// Execute the commands using the supplied dispatcher\n    let internal exec (dispatch:Dispatch<'msg>) (cmd:Cmd<'msg>) =\n        cmd |> List.iter (fun sub -> sub dispatch)\n\n    /// None - no commands, also known as `[]`\n    let none : Cmd<'msg> =\n        []\n\n    /// When emitting the message, map to another type\n    let map (f: 'a -> 'msg) (cmd: Cmd<'a>) : Cmd<'msg> =\n        cmd |> List.map (fun g -> (fun dispatch -> f >> dispatch) >> g)\n\n    /// Aggregate multiple commands\n    let batch (cmds: #seq<Cmd<'msg>>) : Cmd<'msg> =\n        cmds |> List.concat\n\n    /// Command to call the subscriber\n    let ofSub (sub: Sub<'msg>) : Cmd<'msg> =\n        [sub]\n\n    module OfFunc =\n        /// Command to evaluate a simple function and map the result\n        /// into success or error (of exception)\n        let either (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                try\n                    task arg\n                    |> (ofSuccess >> dispatch)\n                with x ->\n                    x |> (ofError >> dispatch)\n            [bind]\n\n        /// Command to evaluate a simple function and map the success to a message\n        /// discarding any possible error\n        let perform (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                try\n                    task arg\n                    |> (ofSuccess >> dispatch)\n                with x ->\n                    ()\n            [bind]\n\n        /// Command to evaluate a simple function and map the error (in case of exception)\n        let attempt (task: 'a -> unit) (arg: 'a) (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                try\n                    task arg\n                with x ->\n                    x |> (ofError >> dispatch)\n            [bind]\n\n        /// Command to issue a specific message\n        let result (msg:'msg) : Cmd<'msg> =\n            [fun dispatch -> dispatch msg]\n\n    module OfAsyncWith =\n        /// Command that will evaluate an async block and map the result\n        /// into success or error (of exception)\n        let either (start: Async<unit> -> unit) \n                   (task: 'a -> Async<_>)\n                   (arg: 'a)\n                   (ofSuccess: _ -> 'msg)\n                   (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task arg |> Async.Catch\n                    dispatch (match r with\n                             | Choice1Of2 x -> ofSuccess x\n                             | Choice2Of2 x -> ofError x)\n                }\n            [bind >> start]\n\n        /// Command that will evaluate an async block and map the success\n        let perform (start: Async<unit> -> unit) \n                    (task: 'a -> Async<_>)\n                    (arg: 'a)\n                    (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task arg |> Async.Catch\n                    match r with\n                    | Choice1Of2 x -> dispatch (ofSuccess x)\n                    | _ -> ()\n                }\n            [bind >> start]\n\n        /// Command that will evaluate an async block and map the error (of exception)\n        let attempt (start: Async<unit> -> unit) \n                    (task: 'a -> Async<_>)\n                    (arg: 'a)\n                    (ofError: _ -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task arg |> Async.Catch\n                    match r with\n                    | Choice2Of2 x -> dispatch (ofError x)\n                    | _ -> ()\n                }\n            [bind >> start]\n\n        /// Command that will evaluate an async block to the message\n        let result (start: Async<unit> -> unit) \n                   (task: Async<'msg>) : Cmd<'msg> =\n            let bind dispatch =\n                async {\n                    let! r = task |> Async.Catch\n                    match r with\n                    | Choice1Of2 x -> dispatch x\n                    | _ -> ()\n                }\n            [bind >> start]\n\n    module OfAsync =\n#if FABLE_COMPILER\n        let start x = Timer.delay 0 (fun _ -> Async.StartImmediate x)\n#else\n        let inline start x = Async.Start x\n#endif    \n        /// Command that will evaluate an async block and map the result\n        /// into success or error (of exception)\n        let inline either (task: 'a -> Async<_>)\n                          (arg: 'a)\n                          (ofSuccess: _ -> 'msg)\n                          (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.either start task arg ofSuccess ofError\n\n        /// Command that will evaluate an async block and map the success\n        let inline perform (task: 'a -> Async<_>)\n                           (arg: 'a)\n                           (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.perform start task arg ofSuccess\n\n        /// Command that will evaluate an async block and map the error (of exception)\n        let inline attempt (task: 'a -> Async<_>)\n                           (arg: 'a)\n                           (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.attempt start task arg ofError\n\n        /// Command that will evaluate an async block to the message\n        let inline result (task: Async<'msg>) : Cmd<'msg> =\n            OfAsyncWith.result start task\n\n    module OfAsyncImmediate =\n        /// Command that will evaluate an async block and map the result\n        /// into success or error (of exception)\n        let inline either (task: 'a -> Async<_>)\n                          (arg: 'a)\n                          (ofSuccess: _ -> 'msg)\n                          (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.either Async.StartImmediate task arg ofSuccess ofError\n\n        /// Command that will evaluate an async block and map the success\n        let inline perform (task: 'a -> Async<_>)\n                           (arg: 'a)\n                           (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.perform Async.StartImmediate task arg ofSuccess\n\n        /// Command that will evaluate an async block and map the error (of exception)\n        let inline attempt (task: 'a -> Async<_>)\n                           (arg: 'a)\n                           (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsyncWith.attempt Async.StartImmediate task arg ofError\n\n        /// Command that will evaluate an async block to the message\n        let inline result (task: Async<'msg>) : Cmd<'msg> =\n            OfAsyncWith.result Async.StartImmediate task\n\n#if FABLE_COMPILER\n    module OfPromise =\n        /// Command to call `promise` block and map the results\n        let either (task: 'a -> Fable.Core.JS.Promise<_>)\n                   (arg:'a)\n                   (ofSuccess: _ -> 'msg)\n                   (ofError: #exn -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                (task arg)\n                    .``then``(ofSuccess >> dispatch)\n                    .catch(unbox >> ofError >> dispatch)\n                    |> ignore\n            [bind]\n\n        /// Command to call `promise` block and map the success\n        let perform (task: 'a -> Fable.Core.JS.Promise<_>)\n                   (arg:'a)\n                   (ofSuccess: _ -> 'msg) =\n            let bind dispatch =\n                (task arg)\n                    .``then``(ofSuccess >> dispatch)\n                    |> ignore\n            [bind]\n\n        /// Command to call `promise` block and map the error\n        let attempt (task: 'a -> Fable.Core.JS.Promise<_>)\n                    (arg:'a)\n                    (ofError: #exn -> 'msg) : Cmd<'msg> =\n            let bind dispatch =\n                (task arg)\n                    .catch(unbox >> ofError >> dispatch)\n                    |> ignore\n            [bind]\n\n        /// Command to dispatch the `promise` result\n        let result (task: Fable.Core.JS.Promise<'msg>) =\n            let bind dispatch =\n                task.``then`` dispatch\n                |> ignore\n            [bind]\n\n    [<Obsolete(\"Use `OfPromise.either` instead\")>]\n    let inline ofPromise (task: 'a -> Fable.Core.JS.Promise<_>)\n                         (arg:'a)\n                         (ofSuccess: _ -> 'msg)\n                         (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfPromise.either task arg ofSuccess ofError                     \n#else\n    open System.Threading.Tasks\n    module OfTask =\n        /// Command to call a task and map the results\n        let inline either (task: 'a -> Task<_>)\n                          (arg:'a)\n                          (ofSuccess: _ -> 'msg)\n                          (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsync.either (task >> Async.AwaitTask) arg ofSuccess ofError\n\n        /// Command to call a task and map the success\n        let inline perform (task: 'a -> Task<_>)\n                           (arg:'a)\n                           (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n            OfAsync.perform (task >> Async.AwaitTask) arg ofSuccess\n\n        /// Command to call a task and map the error\n        let inline attempt (task: 'a -> Task<_>)\n                           (arg:'a)\n                           (ofError: _ -> 'msg) : Cmd<'msg> =\n            OfAsync.attempt (task >> Async.AwaitTask) arg ofError\n\n        /// Command and map the task success\n        let inline result (task: Task<'msg>) : Cmd<'msg> =\n            OfAsync.result (task |> Async.AwaitTask)\n\n    [<Obsolete(\"Use OfTask.either instead\")>]\n    let inline ofTask (task: 'a -> Task<_>)\n                      (arg:'a)\n                      (ofSuccess: _ -> 'msg)\n                      (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfTask.either task arg ofSuccess ofError\n#endif\n\n    // Synonymous with `OfFunc.result`, may be removed in the future\n    let inline ofMsg (msg:'msg) : Cmd<'msg> =\n        OfFunc.result msg\n\n    [<Obsolete(\"Use `Cmd.OfAsync.either` instead\")>]\n    let inline ofAsync (task: 'a -> Async<_>)\n                       (arg: 'a)\n                       (ofSuccess: _ -> 'msg)\n                       (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfAsync.either task arg ofSuccess ofError\n\n    [<Obsolete(\"Use `Cmd.OfFunc.either` instead\")>]\n    let inline ofFunc (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfFunc.either task arg ofSuccess ofError\n\n    [<Obsolete(\"Use `Cmd.OfFunc.perform` instead\")>]\n    let inline performFunc (task: 'a -> _) (arg: 'a) (ofSuccess: _ -> 'msg) : Cmd<'msg> =\n        OfFunc.perform task arg ofSuccess\n\n    [<Obsolete(\"Use `Cmd.OfFunc.attempt` instead\")>]\n    let attemptFunc (task: 'a -> unit) (arg: 'a) (ofError: _ -> 'msg) : Cmd<'msg> =\n        OfFunc.attempt task arg ofError\n\n","module View\r\n\r\nopen Elmish\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Import\r\n\r\nopen Fable\r\nopen Fable.React\r\nopen Fable.React.Props\r\n\r\nopen Common\r\nopen Model\r\nopen Model.Enums\r\n\r\ntype SettingChange =\r\n    | Sound of SoundState\r\n    | AutoEnter of bool\r\n    | ProgressiveDifficulty of bool\r\n    | MathBase of MathBase\r\n    | Operation of MathType\r\n    | Maximum of int\r\ntype Message =\r\n    | Reset\r\n    | ToggleOptions\r\n    | AnswerKey of MathKey\r\n    | Setting of SettingChange\r\nlet onClick f x = OnClick <| fun _ -> f x\r\nlet btn label attrs = button attrs [str label]\r\n\r\n[<Emit(\"parseInt($0, $1)\")>]\r\nlet parseInt v radix = jsNative\r\n\r\nlet viewOptions (settings:Settings) dispatch =\r\n    let setting label currentValue msg options =\r\n        div[][\r\n            text[ClassName \"optionLabel\"][str label]\r\n            span[ClassName \"optionSpan\"][\r\n                for (label, value) in options ->\r\n                    button[ClassName (if value = currentValue then \"option selected\" else \"option\");\r\n                            OnClick (delay1 dispatch (Setting <| msg value))][str label]\r\n                ]\r\n            ]\r\n    let maxSlider =\r\n        let MAXVAL = 25\r\n        let btnStyle = ClassName \"optionButton\"\r\n        div[ClassName \"options\"] [\r\n            text[ClassName \"optionLabel\"][str \"Up to\"]\r\n            span[ClassName \"optionSpan\"][\r\n                button[btnStyle; OnClick (delay1 dispatch (Setting (Maximum <| max 1 (min MAXVAL <| settings.size - 1))))][str \"-\"]\r\n                input[  ClassName \"optionInput\"\r\n                        Style [MaxWidth \"2em\"]\r\n                        OnChange (fun e ->\r\n                                        let radix = (match settings.mathBase with Binary -> 2 | Decimal -> 10 | Hex -> 16)\r\n                                        let v : string = (e.target?value) |> unbox\r\n                                        match parseInt v radix with\r\n                                        | n when n > 0 && n <> settings.size ->\r\n                                                let n = max 1 (min MAXVAL (int n))\r\n                                                dispatch (Setting (Maximum n))\r\n                                                e.preventDefault()\r\n                                        | _ -> ()\r\n                                        )\r\n                        Value (Model.FormatByBase settings.mathBase settings.size)]\r\n                button[btnStyle; OnClick (delay1 dispatch (Setting (Maximum <| max 1 (min MAXVAL <| settings.size + 1))))][str \"+\"]\r\n                ]\r\n            ]\r\n    div [ClassName \"optionsDisplay\"] [\r\n        setting \"Sound\" settings.sound Sound [\"On\", On; \"Off\", Off; \"Bomb\", BombOnly; \"Cheers\", CheerOnly]\r\n        setting \"Auto-ENTER\" settings.autoEnter AutoEnter [\"On\", true; \"Off\", false]\r\n        setting \"Progressive difficulty\" settings.progressiveDifficulty ProgressiveDifficulty [\"On\", true; \"Off\", false]\r\n        setting \"Base\" settings.mathBase MathBase [\"Binary\", Binary; \"Decimal\", Decimal; \"Hexadecimal\", Hex]\r\n        setting \"Operation\" settings.mathType Operation [\"+\", Plus; \"−\", Minus; \"×\", Times; \"÷\", Divide]\r\n        maxSlider\r\n        button [ClassName \"optionDoneButton\"; OnClick (delay1 dispatch ToggleOptions)][unbox \"OK\"]\r\n        ]\r\n\r\nlet view (g:Game) dispatch =\r\n    let hintTable =\r\n        div[ClassName \"hintDisplay\"][\r\n            table [ClassName \"hintTable\"] [\r\n                tbody [] [\r\n                    for row in g.cells ->\r\n                        let className = function\r\n                            | ChromeOnly -> \"hintCell chromeOnly\"\r\n                            | NeedsReview -> \"hintCell needsReview\"\r\n                            | Good -> \"hintCell correct\"\r\n                            | NoAnswer -> \"hintCell\"\r\n                        tr [] [for (v, status) in row -> td [ClassName <| className status] [str v]]\r\n                    ]\r\n                ]\r\n            ul [ClassName \"reviewList\"] [\r\n                for r in g.reviewList do\r\n                    yield li [] [str <| sprintf \"%s = %s (you guessed %s)\" r.problem r.correctAnswer r.guess]\r\n                ]\r\n            ]\r\n    div [ClassName <| if g.showHints || g.showOptions then \"ui withHints\" else \"ui\"](\r\n        div[ClassName \"header\"][\r\n            btn \"Reset\" [onClick dispatch Reset]\r\n            btn \"Options\" [onClick dispatch ToggleOptions]\r\n            ]\r\n        ::\r\n        if g.showOptions then\r\n            [viewOptions g.settings dispatch; hintTable]\r\n        else [\r\n            yield h3[ClassName \"scoreDisplay\"][str <| sprintf \"Score: %d\" g.score]\r\n            yield div[ClassName \"numDisplay\"][str (defaultArg g.messageToUser (sprintf \"%s = %s\" g.problem.question (if g.currentAnswer = \"\" then String.replicate g.problem.answer.Length \"?\" else g.currentAnswer)))]\r\n            yield div[ClassName \"keyList\"][\r\n                let maybeDispatch = if g.messageToUser.IsSome then ignore else dispatch\r\n                for k in keysOf g.settings.mathBase do\r\n                    let keyButton label = btn label [onClick maybeDispatch (AnswerKey k)]\r\n                    if not <| (k = Enter && g.settings.autoEnter) then\r\n                        yield\r\n                            match k with\r\n                            | Number(label) -> keyButton label\r\n                            | Enter -> keyButton \"ENTER\"\r\n                            | Enums.Backspace -> keyButton (if g.showHints then \"Back\" else \"Backspace\")\r\n                            | HintKey -> keyButton \"Show hints\"\r\n                ]\r\n            if g.showHints then yield hintTable\r\n            ]\r\n        )\r\n\r\n#if LEGACY\r\ntype Message0 = NoOp\r\nlet view0 (model:Game) dispatch =\r\n  div [ClassName \"app shell columnDisplay\"] [\r\n    div [ClassName \"ui\"] [\r\n      div[ClassName \"header\"][\r\n        button [][str \"Reset\"]\r\n        button [OnClick <| fun _ -> dispatch NoOp][str \"Options\"]\r\n      ]\r\n      h3[ClassName \"scoreDisplay\"] [str \"Score: 0\"]\r\n      div[ClassName \"numDisplay\"][str \"3 x 5 = ??\"]\r\n      (if model.settings.mathBase = Enums.Decimal then\r\n          div[ClassName \"keyList\"] [\r\n            for x in 1..9 do\r\n              button[][str <| x.ToString()]\r\n            button[][str \"Backspace\"]\r\n            button[][str \"0\"]\r\n            button[][str \"ENTER\"]\r\n            button[ClassName \"hintButton\"][str \"Show hints\"]\r\n          ]\r\n      elif model.settings.mathBase = Enums.Binary then\r\n        div[ClassName \"keyList\"] [\r\n          for x in 1..1 do\r\n            button[][str <| x.ToString()]\r\n          button[][str \"Backspace\"]\r\n          button[][str \"0\"]\r\n          button[][str \"ENTER\"]\r\n          button[ClassName \"hintButton\"][str \"Show hints\"]\r\n        ]\r\n      else\r\n        div[ClassName \"keyList\"] [\r\n          for x in 1..9 do\r\n            button[][str <| x.ToString()]\r\n          for x in 'A'..'F' do\r\n            button[][str <| x.ToString()]\r\n          button[][str \"0\"]\r\n          button[][str \"Backspace\"]\r\n          button[][str \"ENTER\"]\r\n          button[ClassName \"hintButton\"][str \"Show hints\"]\r\n        ])\r\n      ]\r\n\r\n    div[ClassName \"hintDisplay\"][\r\n      yield table [ClassName \"hintTable\"] [\r\n        tbody [] [\r\n          for row in model.cells do\r\n            tr [] [for (label, answerState) in row -> td [ClassName \"hintCell\"] [str label]]\r\n          ]\r\n      ]\r\n      yield ul [ClassName \"reviewList\"] [\r\n        li [] [str <| sprintf \"%s = %s (you guessed %s)\" \"5x5\" \"25\" \"7\"]\r\n      ]\r\n    ]\r\n  ]\r\n\r\n#endif\r\n","namespace Thoth.Json\n\n[<RequireQualifiedAccess>]\nmodule Encode =\n\n    open System.Collections.Generic\n    open System.Globalization\n    open Fable.Core\n    open Fable.Core.JsInterop\n\n    [<Emit(\"Array.from($0)\")>]\n    let private arrayFrom(x: JsonValue seq): JsonValue = jsNative\n\n    ///**Description**\n    /// Encode a string\n    ///\n    ///**Parameters**\n    ///  * `value` - parameter of type `string`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let inline string (value : string) : JsonValue =\n        box value\n\n    ///**Description**\n    /// Encode a GUID\n    ///\n    ///**Parameters**\n    ///  * `value` - parameter of type `System.Guid`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let guid (value : System.Guid) : JsonValue =\n        box (value.ToString())\n\n    ///**Description**\n    /// Encode an int\n    ///\n    ///**Parameters**\n    ///  * `value` - parameter of type `int`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let inline int (value : int) : JsonValue =\n        box value\n\n    let inline uint32 (value : uint32) : JsonValue =\n        box value\n\n    ///**Description**\n    /// Encode a Float. `Infinity` and `NaN` are encoded as `null`.\n    ///\n    ///**Parameters**\n    ///  * `value` - parameter of type `float`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let inline float (value : float) : JsonValue =\n        box value\n\n    ///**Description**\n    /// Encode a Decimal. (Currently decimal gets converted to float.)\n    ///\n    ///**Parameters**\n    ///  * `value` - parameter of type `decimal`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let decimal (value : decimal) : JsonValue =\n        value.ToString() |> string\n\n    ///**Description**\n    /// Encode null\n    ///\n    ///**Parameters**\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let nil : JsonValue =\n        box null\n\n    ///**Description**\n    /// Encode a bool\n    ///**Parameters**\n    ///  * `value` - parameter of type `bool`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let inline bool (value : bool) : JsonValue =\n        box value\n\n    ///**Description**\n    /// Encode an object\n    ///\n    ///**Parameters**\n    ///  * `values` - parameter of type `(string * Value) list`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let object (values : (string * JsonValue) seq) : JsonValue =\n        let o = obj()\n        for (key, value) in values do\n            o?(key) <- value\n        box o\n\n    ///**Description**\n    /// Encode an array\n    ///\n    ///**Parameters**\n    ///  * `values` - parameter of type `Value array`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let inline array (values : JsonValue array) : JsonValue =\n        box values\n\n    ///**Description**\n    /// Encode a list\n    ///**Parameters**\n    ///  * `values` - parameter of type `Value list`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let list (values : JsonValue list) : JsonValue =\n        // Don't use List.toArray as it may create a typed array\n        arrayFrom values\n\n    let seq (values : JsonValue seq) : JsonValue =\n        arrayFrom values\n\n    ///**Description**\n    /// Encode a dictionary\n    ///**Parameters**\n    ///  * `values` - parameter of type `Map<string, Value>`\n    ///\n    ///**Output Type**\n    ///  * `Value`\n    ///\n    ///**Exceptions**\n    ///\n    let dict (values : Map<string, JsonValue>) : JsonValue =\n        values\n        |> Map.toList\n        |> object\n\n    let bigint (value : bigint) : JsonValue =\n        box (value.ToString())\n\n    let datetimeOffset (value : System.DateTimeOffset) : JsonValue =\n        value.ToString(\"O\", CultureInfo.InvariantCulture) |> string\n\n    /// **Description**\n    /// Encode a timespan\n    /// **Parameters**\n    ///   * `value` - parameter of type `System.TimeSpan`\n    ///\n    /// **Output Type**\n    ///   * `Value`\n    ///\n    /// **Exceptions**\n    ///\n    let timespan (value : System.TimeSpan) : JsonValue =\n        value.ToString() |> string\n\n    let int64 (value : int64) : JsonValue =\n        box (value.ToString(CultureInfo.InvariantCulture))\n\n    let uint64 (value : uint64) : JsonValue =\n        box (value.ToString())\n\n    let tuple2\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (v1, v2) : JsonValue =\n        box [| enc1 v1\n               enc2 v2 |]\n\n    let tuple3\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (v1, v2, v3) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3 |]\n\n    let tuple4\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (enc4 : Encoder<'T4>)\n            (v1, v2, v3, v4) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3\n               enc4 v4 |]\n\n    let tuple5\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (enc4 : Encoder<'T4>)\n            (enc5 : Encoder<'T5>)\n            (v1, v2, v3, v4, v5) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3\n               enc4 v4\n               enc5 v5 |]\n\n    let tuple6\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (enc4 : Encoder<'T4>)\n            (enc5 : Encoder<'T5>)\n            (enc6 : Encoder<'T6>)\n            (v1, v2, v3, v4, v5, v6) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3\n               enc4 v4\n               enc5 v5\n               enc6 v6 |]\n\n    let tuple7\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (enc4 : Encoder<'T4>)\n            (enc5 : Encoder<'T5>)\n            (enc6 : Encoder<'T6>)\n            (enc7 : Encoder<'T7>)\n            (v1, v2, v3, v4, v5, v6, v7) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3\n               enc4 v4\n               enc5 v5\n               enc6 v6\n               enc7 v7 |]\n\n    let tuple8\n            (enc1 : Encoder<'T1>)\n            (enc2 : Encoder<'T2>)\n            (enc3 : Encoder<'T3>)\n            (enc4 : Encoder<'T4>)\n            (enc5 : Encoder<'T5>)\n            (enc6 : Encoder<'T6>)\n            (enc7 : Encoder<'T7>)\n            (enc8 : Encoder<'T8>)\n            (v1, v2, v3, v4, v5, v6, v7, v8) : JsonValue =\n        box [| enc1 v1\n               enc2 v2\n               enc3 v3\n               enc4 v4\n               enc5 v5\n               enc6 v6\n               enc7 v7\n               enc8 v8 |]\n\n    /// **Description**\n    ///\n    /// **Parameters**\n    ///   * `value` - parameter of type `System.DateTime`\n    ///\n    /// **Output Type**\n    ///   * `Value`\n    ///\n    /// **Exceptions**\n    ///\n    let datetime (value : System.DateTime) : JsonValue =\n        value.ToString(\"O\", CultureInfo.InvariantCulture) |> string\n\n    ///**Description**\n    /// Convert a `Value` into a prettified string.\n    ///**Parameters**\n    ///  * `space` - parameter of type `int` - Amount of indentation\n    ///  * `value` - parameter of type `obj` - Value to convert\n    ///\n    ///**Output Type**\n    ///  * `string`\n    ///\n    ///**Exceptions**\n    ///\n    let toString (space: int) (value: JsonValue) : string =\n        JS.JSON.stringify(value, !!null, space)\n\n    ///**Description**\n    /// Encode an option\n    ///**Parameters**\n    ///  * `encoder` - parameter of type `'a -> Value`\n    ///\n    ///**Output Type**\n    ///  * `'a option -> Value`\n    ///\n    ///**Exceptions**\n    ///\n    let option (encoder : 'a -> JsonValue) =\n        Option.map encoder >> Option.defaultWith (fun _ -> nil)\n\n    //////////////////\n    // Reflection ///\n    ////////////////\n\n    open FSharp.Reflection\n    open Fable.Core.DynamicExtensions\n\n    // As generics are erased by Fable, let's just do an unsafe cast for performance\n    let inline boxEncoder (d: Encoder<'T>): BoxedEncoder =\n        !!d\n\n    let inline unboxEncoder (d: BoxedEncoder): Encoder<'T> =\n        !!d\n\n    let rec private autoEncodeRecordsAndUnions extra (isCamelCase : bool) (t: System.Type) : BoxedEncoder =\n        // Add the encoder to extra in case one of the fields is recursive\n        let encoderRef = ref Unchecked.defaultof<_>\n        let extra = extra |> Map.add t.FullName encoderRef\n        let encoder =\n            if FSharpType.IsRecord(t, allowAccessToPrivateRepresentation=true) then\n                let setters =\n                    FSharpType.GetRecordFields(t, allowAccessToPrivateRepresentation=true)\n                    |> Array.map (fun fi ->\n                        let targetKey =\n                            if isCamelCase then fi.Name.[..0].ToLowerInvariant() + fi.Name.[1..]\n                            else fi.Name\n                        let encode = autoEncoder extra isCamelCase fi.PropertyType\n                        fun (source: obj) (target: JsonValue) ->\n                            let value = FSharpValue.GetRecordField(source, fi)\n                            if not(isNull value) then // Discard null fields\n                                target.[targetKey] <- encode value\n                            target)\n                fun (source: obj) ->\n                    (JsonValue(), setters) ||> Seq.fold (fun target set -> set source target)\n            elif FSharpType.IsUnion(t, allowAccessToPrivateRepresentation=true) then\n                fun (value: obj) ->\n                    let info, fields = FSharpValue.GetUnionFields(value, t, allowAccessToPrivateRepresentation=true)\n                    match fields.Length with\n                    | 0 -> string info.Name\n                    | len ->\n                        let fieldTypes = info.GetFields()\n                        let target = Array.zeroCreate<JsonValue> (len + 1)\n                        target.[0] <- string info.Name\n                        for i = 1 to len do\n                            let encode = autoEncoder extra isCamelCase fieldTypes.[i-1].PropertyType\n                            target.[i] <- encode fields.[i-1]\n                        array target\n            else\n                // Don't use failwithf here, for some reason F#/Fable compiles it as a function\n                // when the return type is a function too, so it doesn't fail immediately\n                sprintf \"Cannot generate auto encoder for %s. Please pass an extra encoder.\" t.FullName\n                |> failwith\n        encoderRef := encoder\n        encoder\n\n    and private autoEncoder (extra: Map<string, ref<BoxedEncoder>>) isCamelCase (t: System.Type) : BoxedEncoder =\n      let fullname = t.FullName\n      match Map.tryFind fullname extra with\n      | Some encoderRef -> fun v -> encoderRef.contents v\n      | None ->\n        if t.IsArray then\n            let encoder = t.GetElementType() |> autoEncoder extra isCamelCase\n            fun (value: obj) ->\n                value :?> obj seq |> Seq.map encoder |> seq\n        elif t.IsGenericType then\n            if FSharpType.IsTuple(t) then\n                let encoders =\n                    FSharpType.GetTupleElements(t)\n                    |> Array.map (autoEncoder extra isCamelCase)\n                fun (value: obj) ->\n                    FSharpValue.GetTupleFields(value)\n                    |> Seq.mapi (fun i x -> encoders.[i] x) |> seq\n            else\n                let fullname = t.GetGenericTypeDefinition().FullName\n                if fullname = typedefof<obj option>.FullName then\n                    // Evaluate lazily so we don't need to generate the encoder for null values\n                    let encoder = lazy\n                                    t.GenericTypeArguments.[0]\n                                    |> autoEncoder extra isCamelCase\n                                    |> option\n                                    |> boxEncoder\n                    boxEncoder(fun (value: obj) ->\n                        if isNull value then nil\n                        else encoder.Value value)\n                elif fullname = typedefof<obj list>.FullName\n                    || fullname = typedefof<Set<string>>.FullName then\n                    let encoder = t.GenericTypeArguments.[0] |> autoEncoder extra isCamelCase\n                    fun (value: obj) ->\n                        value :?> obj seq |> Seq.map encoder |> seq\n                elif fullname = typedefof< Map<string, obj> >.FullName then\n                    let keyType = t.GenericTypeArguments.[0]\n                    let valueEncoder = t.GenericTypeArguments.[1] |> autoEncoder extra isCamelCase\n                    if keyType.FullName = typeof<string>.FullName\n                        || keyType.FullName = typeof<System.Guid>.FullName then\n                        fun value ->\n                            // Fable compiles Guids as strings so this works, but maybe we should make the conversion explicit\n                            // (see dotnet version) in case Fable implementation of Guids change\n                            (JsonValue(), value :?> Map<string, obj>)\n                            ||> Seq.fold (fun target (KeyValue(k,v)) ->\n                                target.[k] <- valueEncoder v\n                                target)\n                    else\n                        let keyEncoder = keyType |> autoEncoder extra isCamelCase\n                        fun value ->\n                            value :?> Map<string, obj> |> Seq.map (fun (KeyValue(k,v)) ->\n                                array [|keyEncoder k; valueEncoder v|]) |> seq\n                else\n                    autoEncodeRecordsAndUnions extra isCamelCase t\n        else\n            if fullname = typeof<bool>.FullName then\n                boxEncoder bool\n            elif fullname = typeof<string>.FullName then\n                boxEncoder string\n            elif fullname = typeof<int>.FullName then\n                boxEncoder int\n            elif fullname = typeof<uint32>.FullName then\n                boxEncoder uint32\n            elif fullname = typeof<float>.FullName then\n                boxEncoder float\n            // These number types require extra libraries in Fable. To prevent penalizing\n            // all users, extra encoders (withInt64, etc) must be passed when they're needed.\n\n            // elif fullname = typeof<int64>.FullName then\n            //     boxEncoder int64\n            // elif fullname = typeof<uint64>.FullName then\n            //     boxEncoder uint64\n            // elif fullname = typeof<bigint>.FullName then\n            //     boxEncoder bigint\n            // elif fullname = typeof<decimal>.FullName then\n            //     boxEncoder decimal\n            elif fullname = typeof<System.DateTime>.FullName then\n                boxEncoder datetime\n            elif fullname = typeof<System.DateTimeOffset>.FullName then\n                boxEncoder datetimeOffset\n            elif fullname = typeof<System.TimeSpan>.FullName then\n                boxEncoder timespan\n            elif fullname = typeof<System.Guid>.FullName then\n                boxEncoder guid\n            elif fullname = typeof<obj>.FullName then\n                boxEncoder id\n            else\n                autoEncodeRecordsAndUnions extra isCamelCase t\n\n    let private makeExtra (extra: ExtraCoders option) =\n        match extra with\n        | None -> Map.empty\n        | Some e -> Map.map (fun _ (enc,_) -> ref enc) e\n\n    type Auto =\n        /// ATTENTION: Use this only when other arguments (isCamelCase, extra) don't change\n        static member generateEncoderCached<'T>(?isCamelCase : bool, ?extra: ExtraCoders, [<Inject>] ?resolver: ITypeResolver<'T>): Encoder<'T> =\n            let t = Util.resolveType resolver\n            Util.CachedEncoders.GetOrAdd(t.FullName, fun _ ->\n                let isCamelCase = defaultArg isCamelCase false\n                autoEncoder (makeExtra extra) isCamelCase t) |> unboxEncoder\n\n        static member generateEncoder<'T>(?isCamelCase : bool, ?extra: ExtraCoders, [<Inject>] ?resolver: ITypeResolver<'T>): Encoder<'T> =\n            let isCamelCase = defaultArg isCamelCase false\n            Util.resolveType resolver\n            |> autoEncoder (makeExtra extra) isCamelCase |> unboxEncoder\n\n        static member toString(space : int, value : 'T, ?isCamelCase : bool, ?extra: ExtraCoders, [<Inject>] ?resolver: ITypeResolver<'T>) : string =\n            let encoder = Auto.generateEncoder(?isCamelCase=isCamelCase, ?extra=extra, ?resolver=resolver)\n            encoder value |> toString space\n\n    ///**Description**\n    /// Convert a `Value` into a prettified string.\n    ///**Parameters**\n    ///  * `space` - parameter of type `int` - Amount of indentation\n    ///  * `value` - parameter of type `obj` - Value to convert\n    ///\n    ///**Output Type**\n    ///  * `string`\n    ///\n    ///**Exceptions**\n    ///\n    [<System.Obsolete(\"Please use toString instead\")>]\n    let encode (space: int) (value: JsonValue) : string = toString space value\n","module Update\r\n\r\nopen Elmish\r\nopen Fable.Core\r\nopen Fable.Core.JsInterop\r\nopen Fable.Import\r\nopen Common\r\nopen Model\r\nopen Model.Enums\r\nopen View\r\n\r\nlet init _ = Game.Fresh(), Cmd.none\r\n\r\nmodule Sounds =\r\n    open Browser.Types\r\n    [<Emit(\"new Audio($0)\")>]\r\n    let sound file : HTMLAudioElement = jsNative\r\n    let private cheers = [|\r\n                    sound(\"1_person_cheering-Jett_Rifkin-1851518140.mp3\")\r\n                    sound(\"Cheer1.m4a\")\r\n                    sound(\"Cheer2.m4a\")\r\n                    sound(\"Cheer4.m4a\")\r\n                    sound(\"Cheer5.m4a\")\r\n                    sound(\"Cheer6.m4a\")\r\n                    |]\r\n    let play (sound: HTMLAudioElement) =\r\n        if sound.ended then sound.play()\r\n        else\r\n            sound.currentTime <- 0.\r\n            sound.play()\r\n    let cheer() =\r\n        chooseRandom cheers |> play\r\n    let bomb =\r\n        let s = sound(\"Grenade Explosion-SoundBible.com-2100581469.mp3\")\r\n        delay1 play s\r\nopen Sounds\r\n\r\nlet update msg model =\r\n    match msg with\r\n    | ToggleOptions ->\r\n        let showOptions = not model.showOptions\r\n        if not showOptions then // done button was hit, so persist settings\r\n            let encode = Thoth.Json.Encode.Auto.toString(1, model.settings)\r\n            Browser.WebStorage.localStorage.[\"settings\"] <- encode\r\n        { model with showOptions = showOptions }, Cmd.none\r\n    | Reset -> { Game.Fresh() with showOptions = model.showOptions }, Cmd.none\r\n    | AnswerKey k ->\r\n        if model.showOptions && k = Enter then\r\n            model, Cmd.ofMsg ToggleOptions\r\n        elif model.showOptions || not (Model.Enums.keysOf model.settings.mathBase |> Array.exists ((=) k)) then\r\n            model, Cmd.none\r\n        else\r\n            match k with\r\n            | Number key ->\r\n                let model = { model with currentAnswer = model.currentAnswer + key }\r\n                model, if model.settings.autoEnter && model.currentAnswer.Length = model.problem.answer.Length then Cmd.ofMsg (AnswerKey Enter) else Cmd.none\r\n            | Backspace ->\r\n                { model with currentAnswer = model.currentAnswer.Substring(0, max 0 <| model.currentAnswer.Length - 1) }, Cmd.none\r\n            | Enter ->\r\n                let onCorrect =\r\n                    match model.settings.sound with\r\n                    | On | CheerOnly -> cheer\r\n                    | _ -> ignore\r\n                let onIncorrect =\r\n                    match model.settings.sound with\r\n                    | On | BombOnly -> bomb\r\n                    | _ -> ignore\r\n                Game.TryAdvance model onCorrect onIncorrect, Cmd.none\r\n            | HintKey ->\r\n                { model with showHints = not model.showHints }, Cmd.none\r\n    | Setting msg ->\r\n        let settings = model.settings\r\n        let settings' =\r\n            match msg with\r\n            | SettingChange.Sound v -> { settings with sound = v }\r\n            | SettingChange.AutoEnter v -> { settings with autoEnter = v }\r\n            | SettingChange.ProgressiveDifficulty v -> { settings with progressiveDifficulty = v }\r\n            | SettingChange.MathBase v -> { settings with mathBase = v }\r\n            | SettingChange.Operation v -> { settings with mathType = v }\r\n            | SettingChange.Maximum v -> { settings with size = v }\r\n        match msg with\r\n        | Operation _ | Maximum _ | MathBase _ ->\r\n            { model with settings = settings'; cells = Model.ComputeHints settings'; reviewList = [] } |> Game.nextProblem, Cmd.none\r\n        | _ ->\r\n            { model with settings = settings'; }, Cmd.none\r\n","namespace Elmish.React\n\n[<AutoOpen>]\nmodule Helpers =\n    open Fable.React.Props\n    open Fable.Core.JsInterop\n\n    /// `Ref` callback that sets the value of an input textbox after DOM element is created.\n    /// Can be used instead of `DefaultValue` and `Value` props to override input box value.\n    let inline valueOrDefault value =\n        Ref <| (fun e -> if e |> isNull |> not && !!e?value <> !!value then e?value <- !!value)\n\n[<RequireQualifiedAccess>]\nmodule Program =\n\n    module Internal =\n\n        open Fable.React\n        open Browser\n        open Elmish\n\n        let withReactBatchedUsing lazyView2With placeholderId (program:Program<_,_,_,_>) =\n            let mutable lastRequest = None\n            let setState model dispatch =\n                match lastRequest with\n                | Some r -> window.cancelAnimationFrame r\n                | _ -> ()\n\n                lastRequest <- Some (window.requestAnimationFrame (fun _ ->\n                    ReactDom.render(\n                        lazyView2With (fun x y -> obj.ReferenceEquals(x,y)) (Program.view program) model dispatch,\n                        document.getElementById placeholderId\n                    )))\n\n            program\n            |> Program.withSetState setState\n\n        let withReactSynchronousUsing lazyView2With placeholderId (program:Elmish.Program<_,_,_,_>) =\n            let setState model dispatch =\n                ReactDom.render(\n                    lazyView2With (fun x y -> obj.ReferenceEquals(x,y)) (Program.view program) model dispatch,\n                    document.getElementById placeholderId\n                )\n\n            program\n            |> Program.withSetState setState\n\n        let withReactHydrateUsing lazyView2With placeholderId (program:Elmish.Program<_,_,_,_>) =\n            let setState model dispatch =\n                ReactDom.hydrate(\n                    lazyView2With (fun x y -> obj.ReferenceEquals(x,y)) (Program.view program) model dispatch,\n                    document.getElementById placeholderId\n                )\n\n            program\n            |> Program.withSetState setState\n\n\n    /// Renders React root component inside html element identified by placeholderId.\n    /// Uses `requestAnimationFrame` to batch updates to prevent drops in frame rate.\n    /// NOTE: This may have unexpected effects in React controlled inputs, see https://github.com/elmish/react/issues/12\n    let withReactBatched placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactBatchedUsing lazyView2With placeholderId program\n\n    /// Renders React root component inside html element identified by placeholderId.\n    /// New renders are triggered immediately after an update.\n    let withReactSynchronous placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactSynchronousUsing lazyView2With placeholderId program\n\n    [<System.Obsolete(\"Use withReactBatched\")>]\n    let withReact placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactBatchedUsing lazyView2With placeholderId program\n\n    [<System.Obsolete(\"Use withReactSynchronous\")>]\n    let withReactUnoptimized placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactSynchronousUsing lazyView2With placeholderId program\n\n    /// Renders React root component inside html element identified by placeholderId using `React.hydrate`.\n    let withReactHydrate placeholderId (program:Elmish.Program<_,_,_,_>) =\n        Internal.withReactHydrateUsing lazyView2With placeholderId program\n","module App.View\r\n\r\nopen Update\r\nopen Model.Enums\r\nopen View\r\n\r\nopen Elmish\r\nopen Elmish.Debug\r\nopen Elmish.HMR\r\n\r\n// App\r\nProgram.mkProgram init update view\r\n//|> Program.toNavigable (parseHash pageParser) urlUpdate\r\n#if DEBUG\r\n|> Program.withDebugger\r\n#endif\r\n|> Program.withSubscription(fun model ->\r\n    Cmd.ofSub(fun dispatch ->\r\n        Browser.Dom.document.onkeydown <- fun e ->\r\n            let key = e.key.ToUpperInvariant()\r\n            if Model.Enums.keysOf Model.Enums.Hex |> Array.exists(function Number n when n = key -> true | _ -> false) then\r\n                dispatch (AnswerKey (Number key))\r\n            elif e.keyCode = 13. then\r\n                dispatch (AnswerKey Enter)\r\n            elif e.keyCode = 8. then\r\n                dispatch (AnswerKey Backspace)\r\n            elif key = \"H\" then\r\n                dispatch (AnswerKey HintKey)\r\n            elif key = \"O\" then\r\n                dispatch ToggleOptions\r\n            elif key = \"R\" && e.ctrlKey then\r\n                dispatch Reset\r\n                e.preventDefault()\r\n        )\r\n    )\r\n|> Program.withReactBatched \"main\"\r\n|> Program.run\r\n","namespace Elmish.React\n\nopen Fable.React\nopen Elmish\n\ntype LazyProps<'model> = {\n    model:'model\n    render:unit->ReactElement\n    equal:'model->'model->bool\n}\n\nmodule Components =\n    type LazyView<'model>(props) =\n        inherit Component<LazyProps<'model>,obj>(props)\n\n        override this.shouldComponentUpdate(nextProps, _nextState) =\n            not <| this.props.equal this.props.model nextProps.model\n\n        override this.render () =\n            this.props.render ()\n\n[<AutoOpen>]\nmodule Common =\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function to compare the previous and the new states\n    /// view: function to render the model\n    /// state: new state to render\n    let lazyViewWith (equal:'model->'model->bool)\n                     (view:'model->ReactElement)\n                     (state:'model) =\n        ofType<Components.LazyView<_>,_,_>\n            { render = fun () -> view state\n              equal = equal\n              model = state }\n            []\n\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function to compare the previous and the new states\n    /// view: function to render the model using the dispatch\n    /// state: new state to render\n    /// dispatch: dispatch function\n    let lazyView2With (equal:'model->'model->bool)\n                      (view:'model->'msg Dispatch->ReactElement)\n                      (state:'model)\n                      (dispatch:'msg Dispatch) =\n        ofType<Components.LazyView<_>,_,_>\n            { render = fun () -> view state dispatch\n              equal = equal\n              model = state }\n            []\n\n    /// Avoid rendering the view unless the model has changed.\n    /// equal: function to compare the previous and the new model (a tuple of two states)\n    /// view: function to render the model using the dispatch\n    /// state1: new state to render\n    /// state2: new state to render\n    /// dispatch: dispatch function\n    let lazyView3With (equal:_->_->bool) (view:_->_->_->ReactElement) state1 state2 (dispatch:'msg Dispatch) =\n        ofType<Components.LazyView<_>,_,_>\n            { render = fun () -> view state1 state2 dispatch\n              equal = equal\n              model = (state1,state2) }\n            []\n\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of model to render the view\n    let lazyView (view:'model->ReactElement) =\n        lazyViewWith (=) view\n\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of two arguments to render the model using the dispatch\n    let lazyView2 (view:'model->'msg Dispatch->ReactElement) =\n        lazyView2With (=) view\n\n    /// Avoid rendering the view unless the model has changed.\n    /// view: function of three arguments to render the model using the dispatch\n    let lazyView3 (view:_->_->_->ReactElement) =\n        lazyView3With (=) view\n\n\n"],"sourceRoot":""}